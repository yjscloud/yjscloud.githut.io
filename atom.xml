<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>斯堪的纳维亚</title>
  <subtitle>你不愿意改变的时候，往往就是你最需要改变的时候。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yjscloud.site/"/>
  <updated>2018-08-30T05:08:03.000Z</updated>
  <id>http://yjscloud.site/</id>
  
  <author>
    <name>Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>deepin使用记录</title>
    <link href="http://yjscloud.site/2018/08/30/deepin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yjscloud.site/2018/08/30/deepin使用记录/</id>
    <published>2018-08-30T04:58:06.000Z</published>
    <updated>2018-08-30T05:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、deepin  wifi网速慢问题解决：<br>将<code>/etc/modprobe.d/iwlwifi.conf</code>中的<code>11n_disable=1</code>改为<code>11n_disable=8</code>，然后重启系统<br>Linux的网速测试工具安装： <code>sudo apt-get install speedtest-cli</code><br>运行speedtest命令进行网速测试</p>
<p>2、zsh安装：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt install zsh curl</div><div class="line"><span class="keyword">sh</span> -<span class="keyword">c</span> <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></div><div class="line"><span class="keyword">vim</span> ~/.zshrc</div></pre></td></tr></table></figure>
<p>3.解决<code>YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</code>问题<br>安装第三方vim<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install -<span class="keyword">y</span> <span class="keyword">vim</span>-nox</div></pre></td></tr></table></figure></p>
<p>4、解决deepin的远程问题<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> -y openssh-<span class="keyword">server</span></div><div class="line">systemctl <span class="keyword">start</span> sshd</div></pre></td></tr></table></figure></p>
<p>5、mybase安装<br>mybase下载地址：<a href="https://pan.baidu.com/s/1RBeuVJEy2MemTirV8e9jqQ" target="_blank" rel="external">https://pan.baidu.com/s/1RBeuVJEy2MemTirV8e9jqQ</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -xjvf myBase-Desktop-Ver710-Linux-amd64<span class="selector-class">.tar</span><span class="selector-class">.bz2</span></div><div class="line">cd myBase7</div><div class="line">apt-get install -y libpng12-<span class="number">0</span></div><div class="line">./myBase.run</div></pre></td></tr></table></figure></p>
<p>进入<code>cd /usr/share/applications</code>目录，在目录下创建文件<code>myBase7.desktop</code>，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">[Desktop Entry]</span></div><div class="line"><span class="attr">Name</span>=myBase7</div><div class="line"><span class="attr">Name[zh_CN]</span>=myBase7</div><div class="line"><span class="attr">Name[zh_TW]</span>=myBase7</div><div class="line"><span class="attr">Exec</span>=/opt/myBase7/myBase.run</div><div class="line"><span class="attr">Icon</span>=/opt/myBase7/images/nyf_logo_128.png</div><div class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></div><div class="line"><span class="attr">X-MultipleArgs</span>=<span class="literal">false</span></div><div class="line"><span class="attr">Type</span>=Application</div><div class="line"><span class="attr">Encoding</span>=UTF-<span class="number">8</span></div><div class="line"><span class="attr">Categories</span>=myBase7</div></pre></td></tr></table></figure>
<p>6、安装pip3<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">wget </span><span class="string">https:</span>//<span class="string">bootstrap.</span><span class="string">pypa.</span><span class="string">io/</span><span class="built_in">get-pip.py</span></div><div class="line"><span class="string">python3 </span><span class="built_in">get-pip.py</span></div></pre></td></tr></table></figure></p>
<p>7、kvm安装：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install qemu virt-manager qemu-kvm</div></pre></td></tr></table></figure></p>
<p>8、kdesvn安装<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install -y kdesvn</div></pre></td></tr></table></figure></p>
<p>9、安装kchmviewer<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install -y kchmviewer</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、deepin  wifi网速慢问题解决：&lt;br&gt;将&lt;code&gt;/etc/modprobe.d/iwlwifi.conf&lt;/code&gt;中的&lt;code&gt;11n_disable=1&lt;/code&gt;改为&lt;code&gt;11n_disable=8&lt;/code&gt;，然后重启系统&lt;br&gt;Li
    
    </summary>
    
      <category term="学习笔记" scheme="http://yjscloud.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="deepin操作" scheme="http://yjscloud.site/tags/deepin%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客迁移步骤</title>
    <link href="http://yjscloud.site/2018/08/28/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yjscloud.site/2018/08/28/hexo博客迁移步骤/</id>
    <published>2018-08-28T08:49:01.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近沉迷于deepin,deepin系统友好的界面和对常用软件的支持所以我果断抛弃了黑苹果系统转入deepin的怀抱，原黑苹果系统有我搭建好的hexo博客需要对其进行迁移，为了防止将来还需要迁移，特记录下操作流程，以便将来查看。</p>
<h1 id="hexo环境搭建"><a href="#hexo环境搭建" class="headerlink" title="hexo环境搭建"></a>hexo环境搭建</h1><p>第一步：安装相应的软件和配置好环境，需要安装的软件有Node.js和Git</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> -y nodejs</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> -y npm</div></pre></td></tr></table></figure>
<p>然后检查一下我们安装node的版本号<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">-v</span></div></pre></td></tr></table></figure></p>
<p>安装Git<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install -y git</div></pre></td></tr></table></figure></p>
<p>查看git版本号</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git <span class="comment">--version</span></div></pre></td></tr></table></figure>
<p>第二步：安装hexo</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm <span class="keyword">install</span> -g hexo</div></pre></td></tr></table></figure>
<p>终端cd到一个你选定的目录，执行<code>hexo init .</code>初始化命令：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init .</div></pre></td></tr></table></figure></p>
<p>终端cd到目录下，安装npm</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>此时开启hexo服务就可以在本地（本地预览地址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ）预览博客主页了</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s</span></div></pre></td></tr></table></figure>
<h1 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h1><p>拷贝原来搭建好的博客的站点配置文件和主题配置文件<code>_config.yml</code>并在对应的配置目录下做替换。</p>
<p>如果还有其他修改过的配置文件，也一并替换掉。比如主题目录下<code>layout/_partials/header.swig</code>就有部分修改，因而需要替换。最重要的是拷贝并替换数据文件，即站点更目录下的source文件夹，所有博文的原始文件都在这个目录下。</p>
<p>这里我就直接将原来hexo博客目录下的所有文件拷贝过来全部替换掉新环境hexo博客目录下的所有文件。</p>
<p>执行命令预览一下博客是否于原来的一样</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div><div class="line">hexo s</div></pre></td></tr></table></figure>
<h1 id="添加ssh公钥"><a href="#添加ssh公钥" class="headerlink" title="添加ssh公钥"></a>添加ssh公钥</h1><p>最后要部属到远程服务器，如github，新电脑上生成ssh公钥，并注册到远程服务器。</p>
<p>第一步：生成SSH</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></div><div class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</div><div class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;</div></pre></td></tr></table></figure>
<p>系统会要求你输入密码，这里设置的密码主要是在你提交Git时弹出密码认证，直接回车</p>
<p>成功输出如下代码</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /root/.ssh/id_rsa.</div><div class="line"></div><div class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</div><div class="line"></div><div class="line">The key fingerprint is:</div><div class="line"></div><div class="line">02:58:bd:65:5c:dc:12:78:4f:fe:bf:6e:5e:e9:84:79 1303460512<span class="meta">@qq.com</span></div><div class="line"></div><div class="line">The key's randomart image is:</div><div class="line"></div><div class="line">+--[ RSA 2048]----+</div><div class="line"></div><div class="line">|<span class="string">    .. . +oo     </span>|</div><div class="line"></div><div class="line">|<span class="string">   o  . = + o    </span>|</div><div class="line"></div><div class="line">|<span class="string">  . .  + . =     </span>|</div><div class="line"></div><div class="line">|<span class="string">     ..     o    </span>|</div><div class="line"></div><div class="line">|<span class="string">      . S    .   </span>|</div><div class="line"></div><div class="line">|<span class="string">       .      + .</span>|</div><div class="line"></div><div class="line">|<span class="string">             o E.</span>|</div><div class="line"></div><div class="line">|<span class="string">              +.o</span>|</div><div class="line"></div><div class="line">|<span class="string">              +=.</span>|</div><div class="line"></div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<p>第二步：配置SSH<br>找到<code>id_rsa.pub</code> 并复制文件内容<br><code>id_rsa.pub</code>文件一般位于电脑用户配置文件夹下的一个.ssh文件下<code>\Users\</code>你的用户名<code>.ssh</code><br>登录Github并添加密钥<br>进入github首页在右上角选择settings设置。</p>
<p><img src="http://op9ud5mja.bkt.clouddn.com/ssh02.png" alt="ssh01"></p>
<p>创建一个新的SSH key，图中显示我已经创建好了。<br>title可以随便取<br><img src="http://op9ud5mja.bkt.clouddn.com/ssh01.png" alt="ssh02"></p>
<p>第三步：测试通过git bash链接到Git<br>链接Git</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>
<p>提示如下：yes</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.65.227.44)' can't be established.</span></div><div class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">42</span>:<span class="number">18</span>:<span class="number">60</span>:<span class="number">1</span>d:<span class="number">7</span>b:<span class="number">13</span>:d2:b5:c4:<span class="number">20</span>:<span class="number">7</span>e:<span class="number">56</span>:<span class="number">86</span>:d8:<span class="number">71</span>:f3</div><div class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>以下为成功链接到Git</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi XXXX! You<span class="symbol">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>
<p>最后使用Git bash简单的设置一下用户信息：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">config</span> <span class="comment">--global user.name your name</span></div><div class="line">git <span class="built_in">config</span> <span class="comment">--global user.email your_email@youremail.com</span></div></pre></td></tr></table></figure>
<p>最后博客预览效果没问题的话，就可以部属到远程服务器了。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近沉迷于deepin,deepin系统友好的界面和对常用软件的支持所以我果断抛弃了黑苹果系统转入deepin的怀抱，原黑苹果系统有我搭建好的hexo博客需要对其进行迁移，为了防止将来还需要迁移，特记录下操作流程，以便将来查看。&lt;/p&gt;
&lt;h1 id=&quot;hexo环境搭建&quot;&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yjscloud.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://yjscloud.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记（四）：必备知识篇</title>
    <link href="http://yjscloud.site/2018/06/21/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E7%AF%87/"/>
    <id>http://yjscloud.site/2018/06/21/Shell学习笔记（四）：必备知识篇/</id>
    <published>2018-06-21T11:47:24.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环控制及状态返回值的应用实践"><a href="#循环控制及状态返回值的应用实践" class="headerlink" title="循环控制及状态返回值的应用实践"></a>循环控制及状态返回值的应用实践</h1><p>break、continue、exit、return的区别和对比</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-56.png" alt="s-56"></p>
<p>例1：break跳出整个循环，执行循环下面的其他程序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">for</span>((i=0;i&lt;=5;i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> <span class="_">-eq</span> 3 ];<span class="keyword">then</span></div><div class="line">        <span class="comment">#continue;</span></div><div class="line">        <span class="built_in">break</span>;</div><div class="line">        <span class="comment">#exit</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">        <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
<p>例2（生产场景）：开发shell脚本实现给服务器临时配置多个别名IP，并可以随时撤销配置的所有<br>IP。IP地址为：10.0.2.1-10.0.2.16，其中10.0.2.10不能设置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">[ <span class="_">-f</span> /etc/init.d/<span class="built_in">functions</span> ] &amp;&amp; . /etc/init.d/<span class="built_in">functions</span></div><div class="line">RETVAL=0</div><div class="line"><span class="function"><span class="title">op</span></span>()&#123;</div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"del"</span> ];<span class="keyword">then</span></div><div class="line">        list=`<span class="built_in">echo</span> &#123;16..1&#125;`</div><div class="line">    <span class="keyword">else</span></div><div class="line">        list=`<span class="built_in">echo</span> &#123;1..16&#125;`</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$list</span>;<span class="keyword">do</span></div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$ip</span> <span class="_">-eq</span> 10 ];<span class="keyword">then</span></div><div class="line">            <span class="built_in">continue</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ip addr <span class="variable">$1</span> 10.0.2.<span class="variable">$ip</span>/24 dev ens33 label ens33:<span class="variable">$ip</span> &amp;&gt;/dev/null</div><div class="line">        RETVAL=$?</div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">            action <span class="string">"<span class="variable">$1</span> <span class="variable">$ip</span>"</span> /bin/<span class="literal">true</span>    <span class="comment">#此处的提示用通用的$1，传参来控制</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            action <span class="string">"<span class="variable">$1</span> <span class="variable">$ip</span>"</span> /bin/<span class="literal">false</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        op add                          <span class="comment">#启动时，就传参add给op函数</span></div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        op del                          <span class="comment">#停止时，就传参del给op函数</span></div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">    restart)</div><div class="line">        op del</div><div class="line">        sleep 2</div><div class="line">        op add</div><div class="line">        RETVAL=$?</div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">        <span class="built_in">printf</span> <span class="string">"USAGE:<span class="variable">$0</span> &#123;start|stop|restart&#125;\n"</span></div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure>
<h1 id="shell函数语法"><a href="#shell函数语法" class="headerlink" title="shell函数语法"></a>shell函数语法</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><p>简单的语法：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">函数名（）&#123;</div><div class="line">                指令...</div><div class="line">                <span class="keyword">return</span> n</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>规范的语法：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">函数名（）&#123;</span></div><div class="line">                指令...</div><div class="line">                <span class="keyword">return</span> <span class="type">n</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="shell函数执行"><a href="#shell函数执行" class="headerlink" title="shell函数执行"></a>shell函数执行</h2><p>调用函数：</p>
<p>1）直接执行函数名即可。注意，不需要带小括号。</p>
<p>函数名</p>
<p>2）带参数的函数执行方法：</p>
<p>函数名 参数1 参数2</p>
<p>函数带参数的说明</p>
<ul>
<li>在函数体中位置参数（$1、$2、$3、$4、$5、$#、$*、$?以及$@）都可以是函数参数</li>
<li>父脚本的参数则临时地被函数参数所掩盖或隐藏</li>
<li>$0比较特殊，他仍然是父脚本的名称</li>
<li>当函数完成时，原来的命令行参数会恢复</li>
<li>在shell函数里面，return命令的功能与工作方式与exit相同，用于跳出函数</li>
<li>在shell函数体里使用exit会终止整个shell脚本</li>
<li>return语句会返回一个退出值给调用的程序。</li>
</ul>
<p>例：编写shell开发linux系统一键优化脚本。</p>
<p>1、安装系统是最小化安装</p>
<p>2、配置国内高速yum源</p>
<p>3、禁用开机不需要启动的服务</p>
<p>4、优化系统内核参数/etc/sysctl.conf</p>
<p>5、增加系统文件描述符、堆栈等配置</p>
<p>6、禁止root远程登录。修改ssh端口为特殊端口，禁止DNS，空密码</p>
<p>7、有外网ip的机器要开启配置防火墙，仅对外开启需要提供服务的端口，配置或关闭selinux</p>
<p>8、清除无用的默认系统账户或组（非必须）（添加运维的用户）</p>
<p>9、锁定敏感文件，如/etc/passwd（非必须）</p>
<p>10、配置服务器和互联网时间同步</p>
<p>11、初始化用户，并配置sudo对普通用户权限的控制</p>
<p>12、修改系统字符集</p>
<p>13、补装系统软件及升级系统到最新</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin:/sbin:/usr/sbin</div><div class="line"><span class="comment"># Require root to run this script.</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$UID</span>"</span> != <span class="string">"0"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Please run this script by root."</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#define cmd var</span></div><div class="line">SERVICE=`<span class="built_in">which</span> service`</div><div class="line">CHKCONFIG=`<span class="built_in">which</span> chkconfig`</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">mod_yum</span></span>()&#123;</div><div class="line">    <span class="comment">#modify yum path</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-e</span> /etc/yum.repos.d/CentOS-Base.repo ]</div><div class="line">     <span class="keyword">then</span></div><div class="line">       mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup&amp;&amp;\</div><div class="line">       wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.sise.edu.cn/repo/CentOS-Base.repo</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">close_selinux</span></span>()&#123;</div><div class="line">    <span class="comment">#1.close selinux</span></div><div class="line">    sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config</div><div class="line">    <span class="comment">#grep SELINUX=disabled /etc/selinux/config</span></div><div class="line">    setenforce 0 &amp;&gt;/dev/null</div><div class="line">    <span class="comment">#getenforce</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">close_firewall</span></span>()&#123;</div><div class="line">    <span class="comment">#2.close firewall</span></div><div class="line">    systemctl stop firewalld</div><div class="line">    systemctl stop firewalld</div><div class="line">    systemctl <span class="built_in">disable</span> firewalld</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">least_service</span></span>()&#123;</div><div class="line">    <span class="comment">#3.least service startup</span></div><div class="line">    chkconfig|awk <span class="string">'&#123;print "chkconfig",$1,"off"&#125;'</span>|bash</div><div class="line">    chkconfig|egrep <span class="string">"crond|sshd|network|rsyslog|sysstat"</span>|awk <span class="string">'&#123;print "chkconfig",$1,"on"&#125;'</span>|bash</div><div class="line">    <span class="comment">#export LANG=en</span></div><div class="line">    <span class="comment">#chkconfig --list|grep 3:on</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">adduser</span></span>()&#123;</div><div class="line">    <span class="comment">#4.add yjscloud and sudo</span></div><div class="line">    <span class="keyword">if</span> [ `grep -w yjscloud /etc/passwd|wc <span class="_">-l</span>` <span class="_">-lt</span> 1 ]</div><div class="line">      <span class="keyword">then</span></div><div class="line">        useradd yjscloud</div><div class="line">        <span class="built_in">echo</span> 123456|passwd --stdin yjscloud</div><div class="line">        \cp /etc/sudoers /etc/sudoers.ori</div><div class="line">        <span class="built_in">echo</span> <span class="string">"yjscloud  ALL=(ALL) NOPASSWD: ALL "</span> &gt;&gt;/etc/sudoers</div><div class="line">        tail -1 /etc/sudoers</div><div class="line">        visudo -c &amp;&gt;/dev/null</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">charset</span></span>()&#123;</div><div class="line">    <span class="comment">#5.charset config</span></div><div class="line">    cp /etc/locale.conf /etc/locale.conf</div><div class="line">    <span class="built_in">echo</span> <span class="string">'LANG="zh_CN.UTF-8"'</span>  &gt;/etc/locale.conf</div><div class="line">    <span class="built_in">source</span> /etc/locale.conf</div><div class="line">    <span class="comment">#echo $LANG</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">time_sync</span></span>()&#123;</div><div class="line">    <span class="comment">#6.time sync.</span></div><div class="line">    cron=/var/spool/cron/root</div><div class="line">    <span class="keyword">if</span> [ `grep -w <span class="string">"ntpdate"</span> <span class="variable">$cron</span>|wc <span class="_">-l</span>` <span class="_">-lt</span> 1  ]</div><div class="line">      <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">'#time sync by yjscloud at 2018-6-24'</span> &gt;&gt;<span class="variable">$cron</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">'*/5 * * * * /usr/sbin/ntpdate cn.pool.ntp.org &gt;/dev/null 2&gt;&amp;1'</span> &gt;&gt;<span class="variable">$cron</span></div><div class="line">        crontab <span class="_">-l</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">com_line_set</span></span>()&#123;</div><div class="line">    <span class="comment">#7.command set.</span></div><div class="line">    <span class="keyword">if</span> [ `egrep <span class="string">"TMOUT|HISTSIZE|HISTFILESIZE"</span> /etc/profile|wc <span class="_">-l</span>` -ge 3  ]</div><div class="line">      <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">'export TMOUT=300'</span> &gt;&gt;/etc/profile</div><div class="line">        <span class="built_in">echo</span> <span class="string">'export HISTSIZE=5'</span> &gt;&gt;/etc/profile</div><div class="line">        <span class="built_in">echo</span> <span class="string">'export HISTFILESIZE=5'</span> &gt;&gt;/etc/profile</div><div class="line">        . /etc/profile</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">open_file_set</span></span>()&#123;</div><div class="line">    <span class="comment">#8.increase open file.</span></div><div class="line">    <span class="keyword">if</span> [ `grep 65535 /etc/security/limits.conf|wc <span class="_">-l</span>` <span class="_">-lt</span> 1 ]</div><div class="line">      <span class="keyword">then</span> </div><div class="line">        <span class="built_in">echo</span> <span class="string">'*               -       nofile          65535 '</span> &gt;&gt;/etc/security/limits.conf</div><div class="line">        tail -1 /etc/security/limits.conf</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_kernel</span></span>()&#123;</div><div class="line">    <span class="comment">#9.kernel set.</span></div><div class="line">    <span class="keyword">if</span> [ `grep kernel_flag /etc/sysctl.conf|wc <span class="_">-l</span>` <span class="_">-lt</span> 1 ]</div><div class="line">      <span class="keyword">then</span></div><div class="line">        cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</div><div class="line">        <span class="comment">#kernel_flag</span></div><div class="line">        net.ipv4.tcp_fin_timeout = 2</div><div class="line">        net.ipv4.tcp_tw_reuse = 1</div><div class="line">        net.ipv4.tcp_tw_recycle = 1</div><div class="line">        net.ipv4.tcp_syncookies = 1</div><div class="line">        net.ipv4.tcp_keepalive_time = 600</div><div class="line">        net.ipv4.ip_local_port_range = 4000    65000</div><div class="line">        net.ipv4.tcp_max_syn_backlog = 16384</div><div class="line">        net.ipv4.tcp_max_tw_buckets = 36000</div><div class="line">        net.ipv4.route.gc_timeout = 100</div><div class="line">        net.ipv4.tcp_syn_retries = 1</div><div class="line">        net.ipv4.tcp_synack_retries = 1</div><div class="line">        net.core.somaxconn = 16384</div><div class="line">        net.core.netdev_max_backlog = 16384</div><div class="line">        net.ipv4.tcp_max_orphans = 16384</div><div class="line">EOF</div><div class="line">        sysctl -p</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">init_ssh</span></span>()&#123;</div><div class="line">    \cp /etc/ssh/sshd_config /etc/ssh/sshd_config.`date +<span class="string">"%Y-%m-%d_%H-%M-%S"</span>`</div><div class="line">    <span class="comment">#sed -i 's%#Port 22%Port 52113%' /etc/ssh/sshd_config</span></div><div class="line">    sed -i <span class="string">'s%#PermitRootLogin yes%PermitRootLogin no%'</span> /etc/ssh/sshd_config</div><div class="line">    sed -i <span class="string">'s%#PermitEmptyPasswords no%PermitEmptyPasswords no%'</span> /etc/ssh/sshd_config</div><div class="line">    sed -i <span class="string">'s%#UseDNS yes%UseDNS no%'</span> /etc/ssh/sshd_config</div><div class="line">    /etc/init.d/sshd reload &amp;&gt;/dev/null</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">update_linux</span></span>()&#123;</div><div class="line">    <span class="comment">#10.upgrade linux.</span></div><div class="line">    <span class="keyword">if</span> [ `rpm -qa lrzsz nmap tree dos2unix nc|wc <span class="_">-l</span>` -le 3 ]</div><div class="line">      <span class="keyword">then</span></div><div class="line">        yum install lrzsz nmap tree dos2unix nc ntpdate -y</div><div class="line">        <span class="comment">#yum update -y</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">    mod_yum</div><div class="line">    close_selinux</div><div class="line">    close_firewall</div><div class="line">    least_service</div><div class="line">    adduser</div><div class="line">    charset</div><div class="line">    time_sync</div><div class="line">    com_line_set</div><div class="line">    open_file_set</div><div class="line">    set_kernel</div><div class="line">    init_ssh</div><div class="line">    update_linux</div><div class="line">&#125;</div><div class="line">main</div></pre></td></tr></table></figure>
<h1 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h1><p>简单的说，数组就是相同数据类型的元素按一定顺序排列的集合。数组就是把有限个类型相同的变量用一个名字命名，然后用编号区分他们的变量的集合。这个名字成为数组名，编号成为下标。组成数组的各个变量成为数组的分量，也称为数组的元素，有时也称为下标变量。如果有过用其它语言编程的经历，那么想必会熟悉数组的概念。由于有了数组，可以用相同名字引用一系列变量，并用数字（索引）来识别它们。在许多场合，使用数组可以缩短和简化程序，因为可以利用索引值设计一个循环，高校处理多种情况。</p>
<h2 id="数组定义与读取"><a href="#数组定义与读取" class="headerlink" title="数组定义与读取"></a>数组定义与读取</h2><p>方法1：array=(value1 value2 value3)</p>
<p>1）定义数组</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# array=(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)   #对括号表示数组，数组元素用“空格”符号分割开</div></pre></td></tr></table></figure>
<p>2）获取数组的长度</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# echo $&#123;#array[@]&#125;    #用$&#123;#数组名[@或*]&#125;可以获得到数组长度</div><div class="line"><span class="number">3</span></div><div class="line">[root@pan ~]# echo $&#123;#array[*]&#125;</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>3）打印数组元素</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[0]</span>&#125;   #打印数组元素用$&#123;数组名<span class="string">[下标]</span>&#125;下标是从<span class="number">0</span>开始</div><div class="line"><span class="number">1</span></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[1]</span>&#125;</div><div class="line"><span class="number">2</span></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[2]</span>&#125;</div><div class="line"><span class="number">3</span></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[3]</span>&#125;  #超出范围输出为空</div><div class="line"></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[*]</span>&#125;   #下标是：*或者@得到整个数组内容</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[@]</span>&#125;  #把前面去数组长度的#号去掉，例如：$&#123;array<span class="string">[@]</span>&#125;</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<p>4）数组赋值</p>
<p>直接通过数组名[下标]就可以对其进行引用赋值，如果下标不存在，自动添加新一个数组元素，如果存在就覆盖原来的值</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# array[<span class="number">3</span>]=<span class="number">4</span></div><div class="line">[root@pan ~]# echo $&#123;array[@]&#125;</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line">[root@pan ~]# array[<span class="number">0</span>]=pan</div><div class="line">[root@pan ~]# echo $&#123;array[@]&#125;</div><div class="line">pan <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<p>5）数组删除</p>
<p>直接通过：unset数组[下标]可以清除相应的元素，不带下标，清除整个数据</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $&#123;array[@]&#125;</span></div><div class="line">pan <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># unset array    #删除整个数组</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $&#123;array[@]&#125;</span></div><div class="line"></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># array=(1 2 3)</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># unset array[0]    #删除某个数组元素</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $&#123;array[@]&#125;</span></div><div class="line"><span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<p>6）数组内容的截取和替换（和前文变量子串的替换很像）</p>
<p>截取：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># array=(1 2 3 4 5)</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $&#123;array[@]:1:3&#125;     #截取1号到3号数组元素</span></div><div class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $&#123;array[@]:3:2&#125;</span></div><div class="line"><span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<p>替换：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# echo $&#123;array[@]/<span class="number">5</span>/<span class="number">6</span>&#125;    #把数组中的<span class="number">5</span>替换成<span class="number">6</span>，临时生效，原数组未被修改。和sed很像。</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span></div><div class="line">[root@pan ~]# array1=($&#123;array[@]/<span class="number">5</span>/<span class="number">6</span>&#125;)</div><div class="line">[root@pan ~]# echo $&#123;array[@]&#125;</div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<p>调用方法是：<code>${数组名[@或*]/查找字符/替换字符}</code>该操作不会改变原先数组内容，如果需要修改，可以看上面例子，重新定义数组</p>
<p>删除：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# array1=(<span class="keyword">one</span> <span class="keyword">two</span> three four five)</div><div class="line">[root@pan ~]# echo <span class="variable">$&#123;array1</span>[@]&#125;</div><div class="line"><span class="keyword">one</span> <span class="keyword">two</span> three four five</div><div class="line">[root@pan ~]# echo <span class="variable">$&#123;array1</span>[@]#o&#125;    #左边开始最短的匹配</div><div class="line">ne <span class="keyword">two</span> three four five</div><div class="line">[root@pan ~]# echo <span class="variable">$&#123;array1</span>[@]#fo&#125;    #左边开始最短的匹配</div><div class="line"><span class="keyword">one</span> <span class="keyword">two</span> three ur five</div><div class="line">[root@pan ~]# echo <span class="variable">$&#123;array1</span>[@]%t*<span class="keyword">e</span>&#125;</div><div class="line"><span class="keyword">one</span> <span class="keyword">two</span> four five</div><div class="line">[root@pan ~]# echo <span class="variable">$&#123;array1</span>[@]%%t*<span class="keyword">e</span>&#125;</div><div class="line"><span class="keyword">one</span> <span class="keyword">two</span> four five</div></pre></td></tr></table></figure>
<p>提示：数组也是变量，因此也适合于前面讲解过的变量的子串处理的功能应用。</p>
<p>方法2：array=([1]=one [2]=two [3]=three)</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">[root@pan ~]</span># array=(<span class="string">[1]</span>=one <span class="string">[2]</span>=two <span class="string">[3]</span>=three)</div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;#array<span class="string">[*]</span>&#125;</div><div class="line"><span class="number">3</span></div><div class="line"><span class="string">[root@pan ~]</span># echo $&#123;array<span class="string">[*]</span>&#125;</div><div class="line">one two three</div></pre></td></tr></table></figure>
<p>方法3：array[0]=a  array[1]=b array[2]=c</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]<span class="comment"># array[0]=a</span></div><div class="line">[root@pan ~]<span class="comment"># array[1]=b</span></div><div class="line">[root@pan ~]<span class="comment"># array[2]=c</span></div><div class="line">[root@pan ~]<span class="comment"># array[3]=d</span></div><div class="line">[root@pan ~]<span class="comment"># echo $&#123;array[0]&#125;</span></div><div class="line">a</div><div class="line">[root@pan ~]<span class="comment"># echo $&#123;array[2]&#125;</span></div><div class="line">c</div></pre></td></tr></table></figure>
<h2 id="数组实践"><a href="#数组实践" class="headerlink" title="数组实践"></a>数组实践</h2><p>例1：通过列举法打印数组元素</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array=(</div><div class="line">xwq</div><div class="line">xdf</div><div class="line">yjs</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=0; i&lt;<span class="variable">$&#123;#array[*]&#125;</span>;i++));<span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"This is num <span class="variable">$i</span>,then content is <span class="variable">$&#123;array[$i]&#125;</span>"</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> ------------</div><div class="line"><span class="built_in">echo</span> <span class="string">"array len:<span class="variable">$&#123;#array[*]&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>执行效果：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@pan shell]# sh array01.sh</div><div class="line">This <span class="keyword">is</span> num <span class="number">0</span>,<span class="keyword">then</span> content <span class="keyword">is</span> xwq</div><div class="line">This <span class="keyword">is</span> num <span class="number">1</span>,<span class="keyword">then</span> content <span class="keyword">is</span> xdf</div><div class="line">This <span class="keyword">is</span> num <span class="number">2</span>,<span class="keyword">then</span> content <span class="keyword">is</span> yjs</div><div class="line"><span class="comment">------------</span></div><div class="line"><span class="keyword">array</span> len:<span class="number">3</span></div></pre></td></tr></table></figure>
<p>例2：把系统命令结果做为数组元素</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">dir=($(ls))</div><div class="line"><span class="keyword">for</span> ((i=0;i&lt;`<span class="built_in">echo</span> <span class="variable">$&#123;#dir[@]&#125;</span>`;i++));<span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;dir[$i]&#125;</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>例3：批量检查多个网站地址是否正常</p>
<p>要求：</p>
<p>1）使用shell数组的方法实现，检测策略尽量模拟用户访问</p>
<p>2）每10秒进行一次全部检测，无法访问的输出做出报警</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">. /etc/init.d/<span class="built_in">functions</span></div><div class="line">check_count=0</div><div class="line">url_list=(</div><div class="line">yjscloud.com</div><div class="line">mirrors.sise.edu.cn</div><div class="line">yjsxwq.com</div><div class="line">192.168.0.15</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">wait</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">echo</span> -n <span class="string">'3秒后,执行检查URL操作.'</span>;</div><div class="line">    <span class="keyword">for</span> ((i=0;i&lt;3;i++)); <span class="keyword">do</span></div><div class="line">        <span class="built_in">echo</span> -n <span class="string">"."</span>;sleep 1</div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_url</span></span>()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">wait</span></div><div class="line">    <span class="keyword">for</span> ((i=0; i&lt;`<span class="built_in">echo</span> <span class="variable">$&#123;#url_list[*]&#125;</span>`; i++));<span class="keyword">do</span></div><div class="line">        wget -o /dev/null -T 3 --tries=1 --spider <span class="variable">$&#123;url_list[$i]&#125;</span> &gt;/dev/null 2&gt;&amp;1</div><div class="line">        <span class="keyword">if</span> [ $? <span class="_">-eq</span> 0 ];<span class="keyword">then</span></div><div class="line">            action <span class="string">"<span class="variable">$&#123;url_list[$i]&#125;</span>"</span> /bin/<span class="literal">true</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            action <span class="string">"<span class="variable">$&#123;url_list[$i]&#125;</span>"</span> /bin/<span class="literal">false</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line">((check_count++))</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">    <span class="keyword">while</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">do</span></div><div class="line">    check_url</div><div class="line">    <span class="built_in">echo</span> <span class="string">"-------check count:<span class="variable">$&#123;check_count&#125;</span>---------"</span></div><div class="line">    sleep 7</div><div class="line">    <span class="keyword">done</span></div><div class="line">&#125;</div><div class="line">main</div></pre></td></tr></table></figure>
<h1 id="脚本语法检查"><a href="#脚本语法检查" class="headerlink" title="脚本语法检查"></a>脚本语法检查</h1><p>对脚本的调试如果把windows下编辑的脚本放置到linux下执行，最好执行<code>dos2unix</code>格式化一下，执行<code>dos2unix</code>格式化是一个很好的习惯。如果没有安装<code>dos2unix</code>，则使用<code>yum -y install dos2unix</code>进行安装。使用echo调试，echo命令是最有用的调试脚本的工具之一。一般应在可能出现问题的脚本的重要部分加入echo命令。例如在变量读取或修改操作的前后加入echo命令，并紧挨着退出命令exit。</p>
<p>使用bash命令参数调试</p>
<p>参数说明：</p>
<p>-n：不会执行该脚本，仅查询脚本语法是否有问题，并给出错误提示。</p>
<p>-v：在执行脚本时，先将脚本的内容输出到屏幕上，然后执行脚本，如果有错误，也会给出错误提示。</p>
<p>-x：将执行的脚本内容及输出显示到屏幕上，这对调试很有用的参数。</p>
<p>使用set命令调试部分脚本内容</p>
<p>set命令也可以用于辅助脚本调试，下面是set命令常用的调用选项</p>
<p>set -n：读命令但并不执行</p>
<p>set -v：显示读取的所有行</p>
<p>set -x：显示所有命令及其参数</p>
<p>提示：通过<code>set -x</code>命令开启调试功能，而通过<code>set +x</code>关闭调试功能，和<code>bash -x</code>相比<code>set -x</code>可以缩小调试的作用域。</p>
<p>例：打印九九乘法表的简版的脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">set</span> -x</div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> `seq 9`</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> `seq 9`</div><div class="line">    <span class="keyword">do</span></div><div class="line">        [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ] &amp;&amp; <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$a</span> x <span class="variable">$b</span> = <span class="variable">$(expr $a \* $b)</span> "</span></div><div class="line">    <span class="keyword">done</span></div><div class="line"><span class="built_in">set</span> +x</div><div class="line"><span class="built_in">echo</span> <span class="string">" "</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>小结：</p>
<p>1）直接执行脚本根据报错来调试</p>
<p>2）要记得首先用<code>dos2unix</code>处理脚本</p>
<p>3）<code>sh -x/-n</code>调试整个脚本</p>
<p>4）<code>set -x</code>和<code>set +x</code>调试部分脚本的执行过程（脚本中设置）</p>
<p>5）可通过echo命令输出脚本中要确认的变量及相关内容；然后紧跟着使用exit退出，不执行后面程<br>序，这种方式便于一步步跟踪脚本。对于逻辑错误的调试比较好用写法即<code>echo $var;exit</code></p>
<p>6）最关键的还是要语法熟练，养成良好的编码习惯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;循环控制及状态返回值的应用实践&quot;&gt;&lt;a href=&quot;#循环控制及状态返回值的应用实践&quot; class=&quot;headerlink&quot; title=&quot;循环控制及状态返回值的应用实践&quot;&gt;&lt;/a&gt;循环控制及状态返回值的应用实践&lt;/h1&gt;&lt;p&gt;break、continue、exi
    
    </summary>
    
      <category term="Shell编程" scheme="http://yjscloud.site/categories/Shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Shell学习笔记" scheme="http://yjscloud.site/tags/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记（三）：实战进阶篇</title>
    <link href="http://yjscloud.site/2018/06/20/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://yjscloud.site/2018/06/20/Shell学习笔记（三）：实战进阶篇/</id>
    <published>2018-06-20T11:04:49.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="case结构条件句"><a href="#case结构条件句" class="headerlink" title="case结构条件句"></a>case结构条件句</h1><h2 id="case结构条件句语法"><a href="#case结构条件句语法" class="headerlink" title="case结构条件句语法"></a>case结构条件句语法</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">"字符串变量"</span> <span class="keyword">in</span></div><div class="line">                值 <span class="number">1</span>) 指令 <span class="number">1.</span>..</div><div class="line">;;</div><div class="line">                值 <span class="number">2</span>) 指令 <span class="number">2.</span>..</div><div class="line">;;</div><div class="line">   *) 指令...</div><div class="line">esac</div></pre></td></tr></table></figure>
<h2 id="case结构条件句范例"><a href="#case结构条件句范例" class="headerlink" title="case结构条件句范例"></a>case结构条件句范例</h2><p>范例1：根据用户的输入判断式那个数字</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-31.png" alt="s-31"></p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>让echo输出字符串显示不同颜色范例</p>
<p>开发一个给内容加颜色的函数</p>
<p>效果：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-32.png" alt="s-32"></p>
<p>代码：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-33.png" alt="s-33"></p>
<p>在脚本中给指定的内容加指定颜色：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-34.png" alt="s-34"></p>
<h2 id="要掌握的linux系统标杆脚本"><a href="#要掌握的linux系统标杆脚本" class="headerlink" title="要掌握的linux系统标杆脚本"></a>要掌握的linux系统标杆脚本</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta-keyword">/etc/</span>init.d/functions</div><div class="line"><span class="meta-keyword">/etc/</span>rc.d<span class="meta-keyword">/rc/</span>sysinit</div><div class="line"><span class="meta-keyword">/etc/</span>init.d/nfs</div><div class="line"><span class="meta-keyword">/etc/</span>init.d/portmap</div><div class="line"><span class="meta-keyword">/etc/</span>init.d/httpd</div></pre></td></tr></table></figure>
<h1 id="当型循环和直到型循环"><a href="#当型循环和直到型循环" class="headerlink" title="当型循环和直到型循环"></a>当型循环和直到型循环</h1><h2 id="当型和直到型循环语法"><a href="#当型和直到型循环语法" class="headerlink" title="当型和直到型循环语法"></a>当型和直到型循环语法</h2><p>1、while条件句</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> 条件</div><div class="line">                        <span class="keyword">do</span></div><div class="line">                        指令...</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>2、until条件句</p>
<p>语法：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">until</span> 条件</div><div class="line">                        <span class="keyword">do</span></div><div class="line">                        指令...</div><div class="line">done</div></pre></td></tr></table></figure>
<p>提示：until应用场合不多，了解就好</p>
<p>例1：每隔2秒记录一次系统负载情况</p>
<p>法一：屏幕输出</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-35.png" alt="s-35"></p>
<p>提示：while true表示条件永远为真，因此会一直运行，像死循环一样，但是我们称呼为守护进程</p>
<p>法二：追加到log里，使用微秒单位</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-36.png" alt="s-36"></p>
<h2 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-36-1.png" alt="s-36"></p>
<h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p>1、计算1-100的和，用while</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-37.png" alt="s-37"></p>
<p>2、使用while循环竖向打印10,9,8…1</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-38.png" alt="s-38"></p>
<p>3、定时访问网站地址</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-39.png" alt="s-39"></p>
<p>提示：上面的方法可以用来测负载均衡是否平均分配到了节点</p>
<h2 id="相关高级生产实战范例拓展"><a href="#相关高级生产实战范例拓展" class="headerlink" title="相关高级生产实战范例拓展"></a>相关高级生产实战范例拓展</h2><p>例1：根据http code status判断</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-40.png" alt="s-40"></p>
<p>引入函数库：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-41.png" alt="s-41"></p>
<h1 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h1><h2 id="for循环结构语法"><a href="#for循环结构语法" class="headerlink" title="for循环结构语法"></a>for循环结构语法</h2><p>1、for循环结构语法</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 变量取值列表</div><div class="line"><span class="keyword">do</span></div><div class="line">                指令...</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>提示：在此结构中<code>“in 变量取值列表”</code>可省略。省略是相当于in <code>&quot;$@&quot;</code>，使用<code>for i</code>就相当于使用<code>for i in &quot;$@&quot;</code></p>
<h2 id="for循环结构基础例子"><a href="#for循环结构基础例子" class="headerlink" title="for循环结构基础例子"></a>for循环结构基础例子</h2><p>例1：直接列出变量列表所有元素，打印5、4、3、2、1</p>
<p>法一：直接列出元素的方法</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-42.png" alt="s-42"></p>
<p>法二：使用大括号的方法</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-43.png" alt="s-43"></p>
<p>例2：获取当前目录下的目录名作为变量列表打印输出</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-44.png" alt="s-44"></p>
<p>例3：mysq分库分表备份的脚本</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-45.png" alt="s-45"></p>
<p>例4：</p>
<p>问题1：使用for循环在/yjscloud目录下批量创建10个文件，名称依次为：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yjs<span class="number">-1</span></div><div class="line">yjs<span class="number">-2</span></div><div class="line">yjs<span class="number">-3</span></div><div class="line">......</div><div class="line">yjs<span class="number">-10</span></div></pre></td></tr></table></figure>
<p>问题2：将以上文件名中的yjs全部改为cloud。</p>
<p>问题3：批量创建10个系统账号yjs01-yjs10并设置密码（密码不能相同）</p>
<p>问题4：批量创建10个系统账号yjs01-yjs10并设置密码（密码为随机8位字符串）</p>
<p>参考答案：</p>
<p>问题1：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-46.png" alt="s-46"></p>
<p>问题2：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-47.png" alt="s-47"></p>
<p>问题3：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-48.png" alt="s-48"></p>
<p>问题4：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-49.png" alt="s-49"></p>
<h2 id="linux系统产生随机数的6种方法"><a href="#linux系统产生随机数的6种方法" class="headerlink" title="linux系统产生随机数的6种方法"></a>linux系统产生随机数的6种方法</h2><p>方法一：通过系统环境变量<code>($RANDOM）</code></p>
<p>例：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $RANDOM</span></div><div class="line"><span class="number">2390</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># echo $RANDOM</span></div><div class="line"><span class="number">1527</span></div></pre></td></tr></table></figure>
<p>方法二：通过openssl产生随机数</p>
<p>例：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">[root@pan ~]</span><span class="comment"># openssl rand -base64 8</span></div><div class="line"><span class="attr">ZXpVoQC9aLg</span>=</div><div class="line"><span class="section">[root@pan ~]</span><span class="comment"># openssl rand -base64 10</span></div><div class="line"><span class="attr">3MWgyXj4Fp9RXQ</span>==</div></pre></td></tr></table></figure>
<p>方法三：通过时间获得随机数（date）</p>
<p>例：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# <span class="keyword">date</span> +%s%N</div><div class="line"><span class="number">1529673691945995626</span></div><div class="line">[root@pan ~]# <span class="keyword">date</span> +%s%N</div><div class="line"><span class="number">1529673693875826576</span></div></pre></td></tr></table></figure>
<p>方法四：<br>说明：<code>/dev/random</code>设备，存储着系统当前运行的环境的实时数据。它可以看作是系统某个时候，<br>唯一值数据，因此可以作随机数元数据。我们可以通过文件读取方式，读得里面数据。<code>/dev/urandom</code><br>这个设备数据与random里面一样。只是，它是非阻塞的随机数发生器，读取操作不会产生阻塞。</p>
<p>例：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># head /dev/urandom|cksum</span></div><div class="line"><span class="number">1250884990</span> <span class="number">2522</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># head /dev/urandom|cksum</span></div><div class="line"><span class="number">2562355899</span> <span class="number">2759</span></div></pre></td></tr></table></figure>
<p>方法五：</p>
<p>说明：UUID码全称是通用唯一识别码，它是一个软件构建的标准，亦为自由软件基金会的<br>组织在分布式计算环境领域的一部分。UUID的目的，是让分布式系统中的所有元素，都能有唯一<br>的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它<br>人冲突的UUID。在这样的情况下，就不需考虑数据库创建时的名称重复问题，它会让网络任何一台计算机所生成的uuid码都是互联网整个服务器网络中唯一的。它的原信息会加入硬件时间，机器当前运行信息等等。UUID格式是：包含32个16进位数字，以“-”连接号分为五段，形式为8-4-4-4-12的32个字符。</p>
<p>例：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# cat /proc/sys/kernel/random/uuid</div><div class="line"><span class="number">6</span>fd25695-a798<span class="number">-49</span>b0-b88f-ccb6f010e949</div><div class="line">[root@pan ~]# cat /proc/sys/kernel/random/uuid</div><div class="line"><span class="number">746</span>c7ad0<span class="number">-4979</span><span class="number">-4</span>a04-b830<span class="number">-347</span>bdcb3b668</div></pre></td></tr></table></figure>
<p>方法六：</p>
<p>例：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># yum -y install expect -y</span></div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># mkpasswd -l 8</span></div><div class="line">ckxCX69&gt;</div><div class="line">[root<span class="symbol">@pan</span> ~]<span class="meta"># mkpasswd -l 8</span></div><div class="line">DhqK9/z7</div></pre></td></tr></table></figure>
<p>上面的随机数长短不一，如何统一格式化呢？答：使用md5sum命令</p>
<p>例1:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# cat /proc/sys/kernel/random/uuid|md5sum|cut -c <span class="number">1</span><span class="number">-9</span></div><div class="line">b555bce24</div><div class="line">[root@pan ~]# head /dev/urandom|cksum|md5sum|cut -c <span class="number">1</span><span class="number">-9</span></div><div class="line"><span class="number">9</span>dfc35416</div><div class="line">[root@pan ~]# date +%s%N|md5sum|cut -c <span class="number">1</span><span class="number">-9</span></div><div class="line"><span class="number">364503</span>a1a</div><div class="line">[root@pan ~]# openssl rand -base64 <span class="number">10</span>|md5sum|cut -c <span class="number">1</span><span class="number">-9</span></div><div class="line"><span class="number">1</span>b9639d90</div></pre></td></tr></table></figure>
<p>例2：使用for循环测试随机数的唯一性</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@pan ~]# for n in `seq <span class="number">10</span>`;do echo $RANDOM|md5sum|cut -c <span class="number">1</span><span class="number">-9</span>;done|sort|uniq -c|sort -rn -k1</div><div class="line">      <span class="number">1</span> fed42f93b</div><div class="line">      <span class="number">1</span> f0eb3e614</div><div class="line">      <span class="number">1</span> d4f8e0b04</div><div class="line">      <span class="number">1</span> c080f8c02</div><div class="line">      <span class="number">1</span> <span class="number">8</span>ca398e3a</div><div class="line">      <span class="number">1</span> <span class="number">891321</span>fee</div><div class="line">      <span class="number">1</span> <span class="number">60</span>db6c5bf</div><div class="line">      <span class="number">1</span> <span class="number">31788</span>d2ff</div><div class="line">      <span class="number">1</span> <span class="number">30</span>b296200</div><div class="line">      <span class="number">1</span> <span class="number">2196</span>b3a04</div><div class="line">[root@pan ~]# for n in `seq <span class="number">10</span>`;do echo date +%s%N|md5sum|cut -c <span class="number">1</span><span class="number">-9</span>;done|sort|uniq -c|sort -rn -k1</div><div class="line">     <span class="number">10</span> aa7d1a548</div></pre></td></tr></table></figure>
<p>企业面试题：</p>
<p>写一个脚本，实现判断172.16.149.0/24网络里，当前在线用户的ip有哪些</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-50.png" alt="s-50"></p>
<h1 id="select循环语句介绍及语法"><a href="#select循环语句介绍及语法" class="headerlink" title="select循环语句介绍及语法"></a>select循环语句介绍及语法</h1><p>select循环语句的主要作用可能就是创建菜单，在执行带select循环语句的脚本时，输出会按照数字顺序的列表显示一个菜单项，并显示提示符（默认是#?），同时等待用户输入数字进行选择。<br>语法结构：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> 变量名 [ <span class="keyword">in</span> 菜单取值列表 ]</div><div class="line"><span class="keyword">do</span></div><div class="line">                指令...</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="select循环语句案例"><a href="#select循环语句案例" class="headerlink" title="select循环语句案例"></a>select循环语句案例</h2><p>例1：用select循环打印简单菜单项的多种实现方法</p>
<p>方法一：直接使用列表字符串</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-51.png" alt="s-51"></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@pan <span class="keyword">shell</span><span class="bash">]<span class="comment"># sh select01.sh</span></span></div><div class="line"><span class="number">1</span>) xwq</div><div class="line"><span class="number">2</span>) xdf</div><div class="line"><span class="number">3</span>) yjs</div><div class="line"><span class="comment">#? 1</span></div><div class="line">xwq</div><div class="line"><span class="comment">#? 2</span></div><div class="line">xdf</div><div class="line"><span class="comment">#? 3</span></div><div class="line">yjs</div><div class="line"><span class="comment">#? hzw   输入错误，返回空。</span></div></pre></td></tr></table></figure>
<p>方法二：采用数组做变量列表</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-52.png" alt="s-52"></p>
<p>方法三：把命令结果作为变量列表（菜单项）</p>
<p>1）数据准备</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@pan <span class="keyword">shell</span><span class="bash">]<span class="comment"># mkdir -p /tmp/test</span></span></div><div class="line">[root@pan <span class="keyword">shell</span><span class="bash">]<span class="comment"># mkdir -p /tmp/test/&#123;xwq,xdf,yjs&#125;</span></span></div><div class="line">[root@pan <span class="keyword">shell</span><span class="bash">]<span class="comment"># ls -l /tmp/test/</span></span></div><div class="line">total <span class="number">0</span></div><div class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">6</span> Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">40</span> xdf</div><div class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">6</span> Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">40</span> xwq</div><div class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">6</span> Jun <span class="number">22</span> <span class="number">22</span>:<span class="number">40</span> yjs</div></pre></td></tr></table></figure>
<p>2）开发脚本</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-53.png" alt="s-53"></p>
<p>3）执行结果</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@pan <span class="keyword">shell</span><span class="bash">]<span class="comment"># sh select03.sh</span></span></div><div class="line"><span class="number">1</span>) xdf</div><div class="line"><span class="number">2</span>) xwq</div><div class="line"><span class="number">3</span>) yjs</div><div class="line"><span class="comment">#?</span></div></pre></td></tr></table></figure>
<h2 id="修改select默认提示符"><a href="#修改select默认提示符" class="headerlink" title="修改select默认提示符"></a>修改select默认提示符</h2><p>例1：调整select循环菜单项的默认提示符及利用select变量打印数字序号。</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-54.png" alt="s-54"></p>
<p>提示：PS3就是控制select循环的提示符，REPLY变量就是菜单项对应的数字。</p>
<p>执行演示：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@pan <span class="keyword">shell</span>]# <span class="keyword">sh</span> select04.<span class="keyword">sh</span></div><div class="line"><span class="number">1</span>) xwq</div><div class="line"><span class="number">2</span>) xdf</div><div class="line"><span class="number">3</span>) yjs</div><div class="line">please select <span class="keyword">a</span> num from <span class="keyword">menu</span>:<span class="number">1</span></div><div class="line">I guess you selected the <span class="keyword">menu</span> i<span class="variable">s:</span></div><div class="line"><span class="number">1</span>) xwq</div><div class="line">please select <span class="keyword">a</span> num from <span class="keyword">menu</span>:<span class="number">2</span></div><div class="line">I guess you selected the <span class="keyword">menu</span> i<span class="variable">s:</span></div><div class="line"><span class="number">2</span>) xdf</div><div class="line">please select <span class="keyword">a</span> num from <span class="keyword">menu</span>:<span class="number">3</span></div><div class="line">I guess you selected the <span class="keyword">menu</span> i<span class="variable">s:</span></div><div class="line"><span class="number">3</span>) yjs</div><div class="line">please select <span class="keyword">a</span> num from <span class="keyword">menu</span>:^C</div></pre></td></tr></table></figure>
<p>例2：打印选择菜单，按照选择一键安装不同的web服务。</p>
<p>要求：</p>
<p>1）当用户输入1时，输出”start installing lamp.“然后执行<code>/server/scripts/lamp.sh</code>，<br>脚本内容输出”lamp is installed“后退出脚本</p>
<p>2）当用户输入2时，输出”start installing lnmp“然后执行<code>/server/scripts/lnmp.sh</code>，<br>脚本输出内容”lamp is installed“后退出脚本</p>
<p>3）当输入3时，退出当前菜单脚本；</p>
<p>4）当输入任何其他字符，给出提示”input error“后退出脚本。</p>
<p>5）要对执行的脚本进行相关条件判读，例如：脚本是否存在，是否可执行等。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">RETVAR=0</div><div class="line">path=/server/scripts                                <span class="comment">#定义脚本路径</span></div><div class="line">[ ! <span class="_">-d</span> <span class="string">"<span class="variable">$path</span>"</span> ] &amp;&amp; mkdir <span class="variable">$path</span> -p                <span class="comment">#如果路径不存在，就创建</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Usage</span></span>()&#123;                                <span class="comment">#定义帮助函数</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> argv"</span></div><div class="line">        <span class="built_in">return</span> 1</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">InstallService</span></span>()&#123;                        <span class="comment">#定义安装服务函数</span></div><div class="line">        <span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> 1 ];<span class="keyword">then</span>                        <span class="comment">#参数不等于1，就打印帮助</span></div><div class="line">                Usage</div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="built_in">local</span> RETVAR=0                                <span class="comment">#初始化返回值</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"start installing <span class="variable">$&#123;1&#125;</span>"</span>                <span class="comment">#打印开始安装服务，传参$1,$1是函数的参数，本例即lamp或lnmp</span></div><div class="line">        sleep 2;</div><div class="line">        <span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$path</span>/<span class="variable">$&#123;1&#125;</span>.sh"</span> ];<span class="keyword">then</span>        <span class="comment">#如果安装服务脚本不可执行，则给出提示后退出。</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$path</span>/<span class="variable">$&#123;1&#125;</span>.sh does not exist or can not be exec"</span></div><div class="line">                <span class="built_in">return</span> 1</div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="variable">$path</span>/<span class="variable">$&#123;1&#125;</span>.sh                        <span class="comment">#执行脚本       </span></div><div class="line">                <span class="built_in">return</span> <span class="variable">$RETVAR</span>                        <span class="comment">#返回值返回函数体外</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;                                <span class="comment">#主函数</span></div><div class="line">        PS3=<span class="string">"`echo pls input the num you want:`"</span>        <span class="comment">#菜单提示</span></div><div class="line">        select var <span class="keyword">in</span> <span class="string">"Install lamp"</span> <span class="string">"Install lnmp"</span> <span class="string">"exit"</span></div><div class="line">        <span class="comment">#select循环，菜单内容列表，列表中有空格就要加引号</span></div><div class="line">        <span class="keyword">do</span></div><div class="line">                <span class="keyword">case</span> <span class="string">"<span class="variable">$REPLY</span>"</span> <span class="keyword">in</span>                <span class="comment">#使用获取select循环对应的数字序列的环境变量</span></div><div class="line">                        1)                        <span class="comment">#如果匹配1，则执行下面的指令，到双分号结束</span></div><div class="line">                                InstallService lamp</div><div class="line">                                RETVAR=$?</div><div class="line">                                ;;</div><div class="line">                        2)                        <span class="comment">#如果匹配2，则执行下面的指令，到双分号结束</span></div><div class="line">                                InstallService lnmp</div><div class="line">                                RETVAR=$?</div><div class="line">                                ;;</div><div class="line">                        3)                        <span class="comment">#如果匹配3，则执行下面的指令，到双分号结束</span></div><div class="line">                                <span class="built_in">echo</span> <span class="built_in">bye</span></div><div class="line">                                <span class="built_in">return</span> 3</div><div class="line">                                ;;</div><div class="line">                        *)</div><div class="line">                                <span class="built_in">echo</span> <span class="string">"the num you input must be &#123;1|2|3&#125;"</span></div><div class="line">                                <span class="built_in">echo</span> <span class="string">"Input ERROR"</span></div><div class="line">                <span class="keyword">esac</span></div><div class="line">        <span class="keyword">done</span></div><div class="line"><span class="built_in">exit</span> $ RETVAR</div><div class="line">&#125;</div><div class="line">main</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-55.png" alt="s-55"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;case结构条件句&quot;&gt;&lt;a href=&quot;#case结构条件句&quot; class=&quot;headerlink&quot; title=&quot;case结构条件句&quot;&gt;&lt;/a&gt;case结构条件句&lt;/h1&gt;&lt;h2 id=&quot;case结构条件句语法&quot;&gt;&lt;a href=&quot;#case结构条件句语法&quot; c
    
    </summary>
    
      <category term="Shell编程" scheme="http://yjscloud.site/categories/Shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Shell学习笔记" scheme="http://yjscloud.site/tags/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记（二）：入门知识和实战篇</title>
    <link href="http://yjscloud.site/2018/06/15/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E5%92%8C%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>http://yjscloud.site/2018/06/15/Shell学习笔记（二）：入门知识和实战篇/</id>
    <published>2018-06-15T13:06:37.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量的数值计算常见命令"><a href="#变量的数值计算常见命令" class="headerlink" title="变量的数值计算常见命令"></a>变量的数值计算常见命令</h1><p><code>(())</code>、<code>let</code>、<code>expr</code>、<code>bc</code>、<code>$[]</code>，这里只介绍<code>(())</code>和<code>expr</code></p>
<h2 id="用法："><a href="#用法：" class="headerlink" title="(())用法："></a>(())用法：</h2><p>如果要执行简单的整数运算，只需将特定的算术表达式用”<code>$((&quot;和&quot;))</code>“括起来即可。shell的算术运算符合常置于”<code>$((&quot;......&quot;))</code>“的语法中。这一语法如同双引号功能，除了内嵌双引号无需转义。</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-6.png" alt="s-6"></p>
<p>提示：</p>
<p>1、上面涉及到的参数变量必须为整数，不能是小数（浮点数）或者字符串。后面的bc命令可以进行浮点数运算，但一般较少用到，</p>
<p>2、<code>echo $((a++))</code>和<code>echo $((a--))</code>表示先输出a自身的值，然后在进行++  –的运算，<code>echo $((a++))</code>和<code>echo $((--a))</code>表示先进行++ –的运算，再输出a自身的值</p>
<ul>
<li>记忆方法：变量在前，先输出变量值，变量在后，就是先算后输出变量的值。</li>
</ul>
<p>一个小计算器：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-7.png" alt="s-7"></p>
<h2 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h2><p>expr命令既可以用于整数运算，也可以用于相关字符串长度，匹配等的运算处理</p>
<p>例1：（普通运算）</p>
<pre><code>[root@pan shell]# expr 2 + 2
4
[root@pan shell]# expr 2 - 2    
0
[root@pan shell]# expr 2 * 2
expr: syntax error
[root@pan shell]# expr 2 \* 2
4
[root@pan shell]# expr 2 / 2
1
[root@pan shell]# i=5
[root@pan shell]# i=`expr $i + 6`
[root@pan shell]# echo $i
11
</code></pre><p>提示：</p>
<p>1、运算符及用于计算的数字左右都至少有一个空格，否则会报错</p>
<p>2、使用乘号时，必须用反斜线屏蔽其特定含义，因为shell可能会误解星号的含义。</p>
<p>例2：（判断字符串是否为整数）</p>
<pre><code>[root@pan shell]# i=5
[root@pan shell]# expr $i + 6 &amp;&gt;/dev/null   #把i和整数相加，&amp;&gt;/dev/null表示不保留任何输出
[root@pan shell]# echo $?      #输出返回值
0    #返回为0，则证明i的值为整数
[root@pan shell]# i=oldboy   #此时赋值一个字符串给i
[root@pan shell]# expr $i + 6 &amp;&gt;/dev/null     #同样把i和整数相加，不保留任何输出
[root@pan shell]# echo $?     #输出返回值
2   #返回为非0，则证明i的值不是整数
</code></pre><p>例3：（判断文件扩展名）</p>
<pre><code>[root@pan shell]# expr &quot;web.sh&quot; : &quot;.*\.sh&quot; &amp;&amp; echo 1||echo 0
6
1
[root@pan shell]# expr &quot;web.f&quot; : &quot;.*\.sh&quot; &amp;&amp; echo 1||echo 0
0
0
</code></pre><p>例4：（判断变量是否为整数）</p>
<p>代码：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-8.png" alt="s-8"></p>
<p>运行过程：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-9.png" alt="s-9"></p>
<p>例5：（判断字符串长度）</p>
<pre><code>[root@pan shell]# chars=`seq -s &quot; &quot; 100`
[root@pan shell]# echo ${#chars}
291
[root@pan shell]# echo $(expr length &quot;$chars&quot;)
291
</code></pre><h1 id="Shell变量输入"><a href="#Shell变量输入" class="headerlink" title="Shell变量输入"></a>Shell变量输入</h1><p>shell变量除了可以直接赋值或脚本传参外，还可以使用read命令从标准输入获得。</p>
<p>【语法格式】</p>
<p>   read [参数] [变量名]</p>
<p>【常用参数】</p>
<pre><code>- p prompt：设置提示信息
- t  timeout 设置输入等待的时间，单位默认为秒
</code></pre><p>例1：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-10.png" alt="s-10"></p>
<p>例2：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-11.png" alt="s-11"></p>
<h1 id="常用的文件测试操作符"><a href="#常用的文件测试操作符" class="headerlink" title="常用的文件测试操作符"></a>常用的文件测试操作符</h1><h2 id="文件测试表达式的用法"><a href="#文件测试表达式的用法" class="headerlink" title="文件测试表达式的用法"></a>文件测试表达式的用法</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-12.png" alt="s-12"></p>
<p>特别说明：这些操作符号对于[[ ]]、[ ]、test几乎是通用的，更多操作符请man test</p>
<h2 id="文件测试表达式举例"><a href="#文件测试表达式举例" class="headerlink" title="文件测试表达式举例"></a>文件测试表达式举例</h2><p>1）测试文件类型</p>
<p>范例：</p>
<pre><code>[root@xwq ~]# mkdir test   #创建test文件夹
[root@xwq ~]# touch test.txt   #创建test.txt文件
[root@xwq ~]# [ -f test ] &amp;&amp; echo 1 || echo 0   #测试test是否为普通文件。
0   #输出为0，证明test非普通文件，因为前面创建的是test目录，因此输出0，下面的结果也是如此。
[root@xwq ~]# [ -f test.txt ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ -d test ] &amp;&amp; echo 1 || echo 0
1
</code></pre><p>2）测试文件属性</p>
<p>范例：</p>
<pre><code>[root@xwq ~]# ll test.txt
-rw-r--r--  1 root root  0 Jun  9 20:15 test.txt  文件的默认权限是644
[root@xwq ~]# [ -r test.txt ] &amp;&amp; echo 1 || echo 0    #测试是否可读
1    #返回结果为1，文件可读
[root@xwq ~]# [ -w test.txt ] &amp;&amp; echo 1 || echo 0  #测试文件是否可写
1    #返回结果为1，文件可写
[root@xwq ~]# [ -x test.txt ] &amp;&amp; echo 1 || echo 0  #测试文件是否可执行
0   #返回结果为0，文件不可执行
[root@xwq ~]# chmod 001 test.txt   修改test.txt权限位为001
[root@xwq ~]# ll test.txt
---------x 1 root root 0 Jun  9 20:15 test.txt
[root@xwq ~]# [ -w test.txt ] &amp;&amp; echo 1 || echo 0
1    #用户权限为没有w，返回结果还是为1？
[root@xwq ~]# echo &quot;echo test&quot; &gt; test.txt   #测试是否可写
[root@xwq ~]# [ -r test.txt ] &amp;&amp; echo 1 || echo 0
1   用户权限为没有r，返回结果还是为1?
[root@xwq ~]# cat test.txt
echo test   #确实可读
[root@xwq ~]# ./test.txt
test
</code></pre><p>提示：测试文件的读、写、执行等属性，不光是根据文件的=属性rwx的标识来判断，还要看当前执行测试的用户是否可以按照对应的权限操作该文件。</p>
<p>3）测试shell变量实例</p>
<p>首先我们先定义file1和file2两个变量，并赋予这两个变量对应的系统文件路径及文件名的值</p>
<pre><code>[root@xwq ~]# file1=/etc/services;file2=/etc/rc.local   #分号隔开两个命令
[root@xwq ~]# echo $file1 $file2
/etc/services /etc/rc.local
</code></pre><p>测试：</p>
<pre><code>[root@xwq ~]# [ -f &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0   #文件存在且为普通文件，所以为真（1）
1
[root@xwq ~]# [ -d &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0  #是文件而不是目录，所以为假（0）
0
[root@xwq ~]# [ -s &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0  #文件存在且大小不为0，所以为真（1）
1  
[root@xwq ~]# [ -e &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0  #文件存在，所以为真（1）
1
</code></pre><p>测试时变量的特殊写法及问题</p>
<p>用[ ]测试变量时，如果被测试的变量不加双引号，那么测试结果可能会是不正确的，</p>
<p>例：</p>
<pre><code>[root@xwq ~]# echo $test   #这是一个不存在的变量

[root@xwq ~]# [ -f $test ] &amp;&amp; echo 1 || echo 0   #不加引号测试变量。
1   #明明$test变量不存在内容还返回1，逻辑就不对了
[root@xwq ~]# [ -f &quot;$test&quot; ] &amp;&amp; echo 1 || echo 0  #加双引号测试
0   #加了双引号就返回0，逻辑就对了
</code></pre><p>如果是文件实体路径，那么加引号和不加的结果是一样的：</p>
<pre><code>[root@xwq ~]# [ -f &quot;/etc/services&quot; ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ -f /etc/services ] &amp;&amp; echo 1 || echo 0
1
</code></pre><p>4）写出高效的测试文件</p>
<p>在做测试判断的时候，不一定要按照“前面的操作成功了如何，否则就如何“ 的方法来进行。直接做部分判断，有时看起来更简洁;</p>
<p>例：</p>
<pre><code>[root@xwq ~]# [ -x test.txt ] &amp;&amp; echo 1
1  #如果test.txt可执行，则输出1，如果不可执行则不作任何输出
[root@xwq ~]# [ -f /etc ] || echo 0
0  #如果/etc是文件这一点不成立，则输出0；如果成立则不作任何输出
</code></pre><h1 id="字符串测试操作符"><a href="#字符串测试操作符" class="headerlink" title="字符串测试操作符"></a>字符串测试操作符</h1><p>字符串测试操作符的作用包括：比较两个字符串是否相同、测试字符串的长度是否为零、字符串是否为null等。</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-13.png" alt="s-13"></p>
<p>特别注意：</p>
<p>1、以上表格中的字符串测试操作符号务必要用””引起来</p>
<p>2、比较符号两端有空格。</p>
<p>字符串测试操作符提示：</p>
<p>1）-n比较字符串长度是否不为零，如果不为零则为真，如：<code>[ -n &quot;$myvar&quot; ]</code></p>
<p>2）-z比较字符串长度是否等于零，如果等于零则为真，如：<code>[ -z &quot;$myvar&quot; ]</code></p>
<p>例1：</p>
<pre><code>[root@xwq ~]# [ -n &quot;abc&quot; ] &amp;&amp; echo 1 || echo 0   #如果字符串长度不为0，则输出1，否则输出0
1
[root@xwq ~]# test -n &quot;abc&quot; &amp;&amp; echo 1 || echo 0   #test的用法同上述[ ]的用法
1
[root@xwq ~]# test -n &quot;&quot; &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# var=&quot;yjscloud&quot;     #给变量var赋值yjscloud字符串
[root@xwq ~]# [ -n &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0    #如果字符串长度不为0，则输出1，否则输出0
1
[root@xwq ~]# [ -n $var ] &amp;&amp; echo 1 || echo 0   #去掉双引号在这里看起来也对，不过加上会更好
1
[root@xwq ~]# var=&quot;xwqcloud&quot;
[root@xwq ~]# [ -z &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0    #使用-z，变量长度为0则为真
0
[root@xwq ~]# [ &quot;abc&quot; = &quot;abc&quot; ] &amp;&amp; echo 1 || echo 0   #注意&quot;=&quot;两端要有空格
1
[root@xwq ~]# [ &quot;abc&quot; = &quot;abb&quot; ] &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# [ &quot;$var&quot; = &quot;xwqcloud&quot; ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ &quot;$var&quot; == &quot;xwqcloud&quot; ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ &quot;$var&quot; != &quot;xwqcloud&quot; ] &amp;&amp; echo 1 || echo 0
0
</code></pre><p>例2：</p>
<p>等号两端没有空格带来的问题</p>
<pre><code>[root@xwq ~]# [ &quot;abc&quot;=&quot;1&quot; ] &amp;&amp; echo 1 || echo 0  #若等号两端不带空格，则会出现明显的逻辑错误
1
[root@xwq ~]# [ &quot;abc&quot; = &quot;1&quot; ] &amp;&amp; echo 1 || echo 0   #带空格的就是准确的
0 
</code></pre><p>结论：字符串比较时若等号两端没有空格，则会导致判断出现逻辑错误，即使语法没有问题，但是结果依然可能不对。</p>
<p>例3：</p>
<p>字符串不加引号可能带来的问题</p>
<pre><code>[root@xwq ~]# var=&quot;&quot;  #将变量内容为空
[root@xwq ~]# [ -n &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0   #有双引号
0   #返回0，-n不为空为真，因为变量内容为空，因此输出0是对的
[root@xwq ~]# [ -n $var ] &amp;&amp; echo 1 || echo 0   #去掉双引号
1   #同样的表达式有没有双引号的结果截然相反，可见双引号的重要性
[root@xwq ~]# [ -z &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0  #如果字符串长度为0，则输出1，否则输出0
1
</code></pre><ul>
<li>强调字符串比较一定要加双引号</li>
</ul>
<h1 id="整数二元比较操作符"><a href="#整数二元比较操作符" class="headerlink" title="整数二元比较操作符"></a>整数二元比较操作符</h1><p><img src="http://p10cma2nn.bkt.clouddn.com/s-14.png" alt="s-14"></p>
<p>例1：</p>
<p>二元数字在[]中使用”&lt;”、”&gt;”非标准符合的比较</p>
<pre><code>[root@xwq ~]# [ 2 &gt; 1 ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ 2 &lt; 1 ] &amp;&amp; echo 1 || echo 0
1  #这里逻辑不对，条件不成立，应该返回0，可见，&quot;&lt;&quot;操作符在[]中使用会出现问题
[root@xwq ~]# [ 2 \&lt; 1 ] &amp;&amp; echo 1 || echo 0
0   #转义后这里是正确的
[root@xwq ~]# [ 2 = 1 ] &amp;&amp; echo 1 || echo 0  #返回结果正确
0
[root@xwq ~]# [ 2 = 2 ] &amp;&amp; echo 1 || echo 0   #返回结果正确
1
[root@xwq ~]# [ 2 != 2 ] &amp;&amp; echo 1 || echo 0  #返回结果正确
0
</code></pre><p>例2：</p>
<p>二元数字在[]中使用-gt、-le类符合比较</p>
<pre><code>[root@xwq ~]# [ 2 -gt 1 ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ 2 -ge 1 ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ 2 -lt 1 ] &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# [ 2 -le 1 ] &amp;&amp; echo 1 || echo 0
0
</code></pre><p>例3：</p>
<p>二元数字配合不同种类的操作符在[[]]中的比较</p>
<pre><code>[root@xwq ~]# [[ 5 &gt; 6 ]] &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# [[ 5 &lt; 6 ]] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [[ 5 != 6 ]] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [[ 5 = 6 ]] &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# [[ 5 -gt 6 ]] &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# [[ 5 -lt 6 ]] &amp;&amp; echo 1 || echo 0
1
</code></pre><p>例4：</p>
<p>二元数字在(())中的比较</p>
<pre><code>[root@xwq ~]# (( 3&gt;2 )) &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# (( 3&lt;2 )) &amp;&amp; echo 1 || echo 0
0
[root@xwq ~]# (( 3==2 )) &amp;&amp; echo 1 || echo 0
0
</code></pre><p>小结：</p>
<p>1、整数加双引号的比较是对的</p>
<p>2、[[]]中用类似-eq等的写法是对的，[[]]中类似&gt;、&lt;的写法也可能不对，有可能会只比较第一位，逻辑结果不对</p>
<p>3、[]中类似&gt;、&lt;的写法在语法上虽然可能没错，但逻辑结果不对，可以使用=、!=正确比较</p>
<p>4、(())中不能使用类似-eq等的写法，可以使用类似&gt;、&lt;的写法</p>
<p>提示 ：系统脚本较为常用的组合是[]加-eq、-gt等组合，这也是推荐的用法</p>
<h1 id="逻辑连接符"><a href="#逻辑连接符" class="headerlink" title="逻辑连接符"></a>逻辑连接符</h1><p><img src="http://p10cma2nn.bkt.clouddn.com/s-15.png" alt="s-15"></p>
<p>提示：</p>
<p>！中文意思是反：与一个逻辑值相反的逻辑值</p>
<p>-a中文意思是与(and &amp;&amp;)：两个逻辑值都是为“真”，返回值才是“真”，反之为“假”</p>
<p>-o中文意思是或(or ||)：两个逻辑值只要有一个为“真”，返回值就为“真”</p>
<p>例1：</p>
<pre><code>[root@xwq ~]# [ -f /etc/hosts -a -f /etc/services ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [[ -f /etc/hosts &amp;&amp; -f /etc/services ]] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# [ 5 -eq 6 -o 5 -gt 3 ] &amp;&amp; echo 1 || echo 0
1
[root@xwq ~]# ((5==6||5&gt;3)) &amp;&amp; echo 1 || echo 0
1
</code></pre><p>小结：逻辑操作符使用总结</p>
<p>[]中用-a,-o,!</p>
<p>[[]]中用&amp;&amp;，||，！</p>
<p>test用法和[]相同</p>
<p>多个[]之间以及多个[[]]之间，或者任意混合中间逻辑操作符都是&amp;&amp;或||</p>
<p>注意[]、[[]]的两端及比较符号两端必须有空格，但是对于(())就不需要</p>
<h1 id="逻辑操作符实战案例"><a href="#逻辑操作符实战案例" class="headerlink" title="逻辑操作符实战案例"></a>逻辑操作符实战案例</h1><p>1、开发shell脚本分别实现以定义变量，脚本传参以及read读入的方式比较2个整数大小。用条件表达式(禁止if)进行判断并以屏幕输出的方式提醒用户比较结果。注意：一共开发2个脚本，在用脚本传参和read读入的方式实现时，需要对变量是否为数字及传参个数是否正确给予提示。</p>
<p>方法一：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-16.png" alt="s-16"></p>
<p>方法二：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-17.png" alt="s-17"></p>
<p>2、要求：</p>
<p>1）当用户输入1时，输出”start installing lamp.“然后执行/server/scripts/lamp.sh，脚本内容输出”lamp is installed“后退出脚本</p>
<p>2）当用户输入2时，输出”start installing lnmp“然后执行/server/scripts/lnmp.sh，脚本输出内容”lamp is installed“后退出脚本</p>
<p>3）当输入3时，退出当前菜单脚本；</p>
<p>4）当输入任何其他字符，给出提示”input error“后退出脚本。</p>
<p>5）要对执行的脚本进行相关条件判读，例如：脚本是否存在，是否可执行等。</p>
<p>解答：</p>
<pre><code>[root@xwq]# mkdir -p /server/scripts/
[root@xwq]# cd /server/scripts/
[root@xwq scripts]# echo &quot;echo lnmp is installed&quot; &gt; lnmp.sh
[root@xwq scripts]# echo &quot;echo lamp is installed&quot; &gt; lamp.sh
[root@xwq scripts]# chmod +x lnmp.sh lamp.sh
</code></pre><p>脚本内容：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-18.png" alt="s-17"><br><img src="http://p10cma2nn.bkt.clouddn.com/s-19.png" alt="s-18"></p>
<h1 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h1><h2 id="if条件语句语法说明"><a href="#if条件语句语法说明" class="headerlink" title="if条件语句语法说明"></a>if条件语句语法说明</h2><ul>
<li>单分支结构</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [条件]</div><div class="line">  <span class="keyword">then</span></div><div class="line">      指令</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [条件];<span class="keyword">then</span></div><div class="line">    指令</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>提示：分号相当于命令换行，上面两种语法等同。</p>
<p>特殊写法：<code>if [ -f &quot;$file1&quot; ];then echo 1;fi</code> 相当于:<code>[ -f &quot;$file1&quot; ]&amp;&amp;echo 1</code></p>
<ul>
<li>双分支结构</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [条件]</div><div class="line">   <span class="keyword">then</span></div><div class="line">      指令集</div><div class="line"><span class="keyword">else</span></div><div class="line">      指令集</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>特殊写法：<code>if [ -f &quot;$file1&quot; ];then echo 1;else echo 0;fi</code>相当于:<code>[ -f &quot;$file1&quot; ]&amp;&amp;echo 1||echo 0</code></p>
<ul>
<li>多分支结构</li>
</ul>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> 条件</div><div class="line">   <span class="keyword">then</span></div><div class="line">      指令</div><div class="line"><span class="keyword">elif</span></div><div class="line">   <span class="keyword">then</span></div><div class="line">      指令</div><div class="line"><span class="keyword">else</span></div></pre></td></tr></table></figure>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>1、开发shell脚本判断系统剩余内存的大小，如果低于100M就邮件报警给管理员，并且加入系统定时任务每分钟执行一次检查。（重视解决问题的过程）</p>
<p>第一步：获取内存大小</p>
<pre><code>free -m | grep Mem | awk &apos;{print $NF}&apos;
</code></pre><p>第二步：配置邮件</p>
<pre><code>echo set from=[your qq email] smtp=smtp.qq.com smtp-auth-user=[your qq number] smtp-auth-password=[your email password].smtp-auth=login &gt; /etc/mail.rc
</code></pre><p>第三部：定时任务</p>
<pre><code>###3 s
*/3 * * * * /bin/sh /server/scripts/4.sh &amp;&gt;/dev/null
</code></pre><p>完整脚本：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-20.png" alt="s-20"></p>
<p>2、双多分支if条件句举例</p>
<p>1）用if双分支实现对nginx或mysql服务是否正常判断，使用进程数、端口、url的方式判断，如果进程没起，把进程启动</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-21.png" alt="s-21"></p>
<p>思考：</p>
<p>a、监控web服务是否正常，不低于5种思路</p>
<p>b、监控db服务是否正常，不低于5种思路</p>
<p>方法：web和db共同方法</p>
<p>（1）端口</p>
<ul>
<li>本地：netstat/ss/lsof</li>
<li>远程：telnet/nmap/nc</li>
</ul>
<p>（2）进程（本地）</p>
<p>（3）wget/curl(http方式，判断根据返回值或者返回内容)</p>
<p>（4）header（http）,http方式，根据状态码判断</p>
<p>（5）数据库特有，通过mysql客户端连接判断，根据返回值或者内容。</p>
<p>以web为例：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-22.png" alt="s-22"></p>
<p>以mysql为例:</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-23.png" alt="s-16"></p>
<h2 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展-1"></a>扩展-1</h2><p>此处扩展判断字符串是否为数字的多种方法</p>
<p>法一：sed加正则表达式</p>
<p>命令行传参：</p>
<p>组合语法判断1：</p>
<pre><code>[ -n &quot;`echo $num|sed &apos;s/[0-9]//g&apos;`&quot; -a -n &quot;`echo $2|sed &apos;s/[0-9]//g&apos;`&quot; ]&amp;&amp;echo &quot;两个参数都必须为数字&quot; &amp;&amp; exit 1
</code></pre><p>组合语法判断2：</p>
<pre><code>[ -n &quot;`echo $num|sed &apos;s/[0-9]//g&apos;`&quot; -a -n &quot;`echo $2|sed &apos;s/[0-9]//g&apos;`&quot; ]&amp;&amp;{
echo &quot;两个参数都必须为数字&quot; 
exit 1
}
</code></pre><p>单个判断语法：</p>
<pre><code>[ -n &quot;`echo $1|sed &apos;s/[0-9]//g&apos;`&quot; ]&amp;&amp;echo &quot;第一个参数都必须为数字&quot; &amp;&amp; exit 1
[ -n &quot;`echo $2|sed &apos;s/[0-9]//g&apos;`&quot; ]&amp;&amp;echo &quot;第二个参数都必须为数字&quot; &amp;&amp; exit 1
</code></pre><p>法二：变量的子字符串替换加正则表达式</p>
<pre><code>[root@pan ~]# num=yjscloud123
[root@pan ~]# [ -z &quot;`echo &quot;${num//[0-9]/}&quot;`&quot; ]&amp;&amp; echo 1||echo 0
0
[root@pan ~]# num=123yjscloud123
[root@pan ~]# [ -z &quot;`echo &quot;${num//[0-9]/}&quot;`&quot; ]&amp;&amp; echo 1||echo 0
0    #这个结果说明前面的结果不为0，即有非数字字符
[root@pan ~]# num=123
[root@pan ~]# [ -z &quot;`echo &quot;${num//[0-9]/}&quot;`&quot; ]&amp;&amp; echo 1||echo 0
1     #这个结果说明前面的结果去掉数字后为0，即没有非数字字符
</code></pre><p>法三：变量的子串替换加正则表达式</p>
<p>思路：如果num长度不为0，并把num中的非数字部分删除，然后看结果是不是等于num本身，如果两者都成立就是数字。</p>
<pre><code>[root@pan ~]# [ -n &quot;$num&quot; -a &quot;$num&quot;=&quot;${num//[^0-9]/}&quot; ]&amp;&amp; echo &quot;it is num&quot;
it is num
</code></pre><p>法四：expr计算判断</p>
<pre><code>expr $1 + 0 &gt;/dev/null 2&gt;&amp;1
[ $? -eq 0 ] &amp;&amp; echo int
</code></pre><h2 id="扩展-2（mysql补充）"><a href="#扩展-2（mysql补充）" class="headerlink" title="扩展-2（mysql补充）"></a>扩展-2（mysql补充）</h2><p>完整的检查数据库状态的脚本</p>
<p>方法一：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-24.png" alt="s-24"></p>
<p>方法二：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-25.png" alt="s-25"></p>
<p>方法三：</p>
<p>本方法的实现思路是：模拟web服务器，通过mysql账户连接mysql，然后根据返回命令状态或返回内容确认mysql是否正常（推荐）</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-26.png" alt="s-26"></p>
<h2 id="扩展-3（web补充）"><a href="#扩展-3（web补充）" class="headerlink" title="扩展-3（web补充）"></a>扩展-3（web补充）</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-27.png" alt="s-27"></p>
<p>输入参数版：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-28.png" alt="s-28"></p>
<p>nmap版：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-29.png" alt="s-29"></p>
<p>如果写脚本通过nc检查端口并监控memcache服务可以用下面的方法：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-30.png" alt="s-30"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量的数值计算常见命令&quot;&gt;&lt;a href=&quot;#变量的数值计算常见命令&quot; class=&quot;headerlink&quot; title=&quot;变量的数值计算常见命令&quot;&gt;&lt;/a&gt;变量的数值计算常见命令&lt;/h1&gt;&lt;p&gt;&lt;code&gt;(())&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt;
    
    </summary>
    
      <category term="Shell编程" scheme="http://yjscloud.site/categories/Shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Shell学习笔记" scheme="http://yjscloud.site/tags/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记（一）：基础知识篇</title>
    <link href="http://yjscloud.site/2018/06/10/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87/"/>
    <id>http://yjscloud.site/2018/06/10/Shell学习笔记（一）：基础知识篇/</id>
    <published>2018-06-10T12:08:59.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识脚本"><a href="#初识脚本" class="headerlink" title="初识脚本"></a>初识脚本</h1><h2 id="脚本的建立"><a href="#脚本的建立" class="headerlink" title="脚本的建立"></a>脚本的建立</h2><p>shell脚本通常是在编译器（如vi/vim）中编写，由unix/linux命令、bash shell命令、程序结构控制语句和注释等内容组成。</p>
<p>1）脚本开头（第一行）</p>
<p>一个规范的shell脚本的第一行会指出由那个程序（解释器）来执行脚本中的内容，在linux bash编程中一般为；</p>
<pre><code>#!/bin/bash
</code></pre><p>或</p>
<pre><code>#!/bin/sh
</code></pre><p>“<code>#!</code>“又称为幻数，在执行bash脚本的时候，内核会根据它来确定该用那个程序来解释脚本内容。这一行必须在脚本顶端的第一行，如果不是第一行则为注释。</p>
<p>2）sh和bash的区别</p>
<pre><code>[root@pan ~]# ll /bin/sh
lrwxrwxrwx. 1 root root 4 Jun  5 03:39 /bin/sh -&gt; bash
</code></pre><p>提示：sh为bash的软链接，这里推荐用标准写法<code>#!/bin/bash</code><br>下面是linux中常用脚本语言开头的编码写法，不同语言脚本的开头一般都要加上如下相应语言的开头标识内容。</p>
<pre><code>1、#!/bin/sh
2、#!/bin/bash
3、#!/usr/bin/awk
4、#!/bin/sed
5、#!usr/bin/tcl
6、#!/usr/bin/expect
7、#!/usr/bin/perl
8、#!/usr/bin/env python
</code></pre><p>3）脚本注释</p>
<p>在shell脚本中，跟在（#）井号后面的内容表示注释，用来对脚本进行注释说明，注释部分不会被执行，仅仅是给人看的注释可自成一行，也可以跟在脚本命令后面与命令在同一行。我们在写脚本的时候要养成写注释的好习惯！</p>
<h2 id="shell脚本的执行"><a href="#shell脚本的执行" class="headerlink" title="shell脚本的执行"></a>shell脚本的执行</h2><p>当shell脚本以非交互方式运行时，它会查找环境变量ENV，该变量指定了一个环境文件（通常是.bashrc），然后从该环境变量文件开始执行，当读取了ENV文件后，shell才开始执行shell脚本的内容。shell脚本的执行通常可以采用以下三种方式：</p>
<p>1）bash script-name或 sh script-name（推荐使用）</p>
<p>2）path/script-name或 ./script-name（当前路径下执行脚本）</p>
<p>3）source script-name或 . script-name #注意 “.” 点号</p>
<p>执行说明：</p>
<p>第一种方法是在当前脚本文件本身有没有可执行权限（即文件x位为 - 号）是常用使用的方法里推荐使用bash执行，或者文件开头没有指定解释器。</p>
<p>第二种方法需要将脚本文件的权限改为可执行（即文件加x位），具体方法：<code>chmod script-name</code>或<code>chmod 755 script-name</code>。然后通过脚本路径就可以直接执行脚本了。</p>
<p>第三种方法通常是使用<code>source</code> 或者 “<code>.</code>“点号读入或加载指定的shell脚本文件的命令语句，而不是产生一个子shell来执行文件中的命令。注意”.”和后面的脚本名直接要有空格。</p>
<h1 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>变量可分为两类：环境变量（全局变量）和局部变量</p>
<p>环境变量也可称为全局变量，可以在创建他们的shell及其派生出来的任意子进程shell中使用。局部变量只能在创建他们的shell函数或脚本中使用。还有一些变量是用户创建的，其它的则是专用shell变量。</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>环境变量用于定义shell的运行环境，保证shell命令的正确执行，shell通过环境变量来确定登陆用户名、命令路径、终端类型、登陆目录等，所有的环境变量都是系统全局变量，可用于所有子进程中，这包括编辑器、shell脚本和各类应用。</p>
<p>环境变量可以在命令行中设置，但用户退出时这些变量值也会丢失，因此最好在用户家目录下的<code>.bash_profile</code>文件中或全局配置<code>/etc/profile</code>文件或者<code>/etc/profile.d/</code>中定义。将环境变量放入profile文件中，每次用户登录时这些变量值都将被初始化。</p>
<p>传统上，所有环境变量均为大写。环境变量应用与用户进程前，必须用export命令导出。</p>
<p>有些环境变量，比如HOME、PATH、SHELL、UID、USER等，在用户登录之前就已经被<code>/bin/login</code>程序设置好了，通常环境变量定义并保存在用户家目录下的.bash_profile文件中。</p>
<h2 id="自定义环境变量（全局变量）"><a href="#自定义环境变量（全局变量）" class="headerlink" title="自定义环境变量（全局变量）"></a>自定义环境变量（全局变量）</h2><p>如果想设置环境变量，就要在给变量赋值之后或设置变量时使用export命令。带-x选项的declare<br>内置命令也可完成同样的功能。（注意：输出变量时不要在变量名前加<code>$</code>）</p>
<ul>
<li>export 变量名=value</li>
<li>变量名=value ；export 变量名</li>
<li>declare -x 变量名=value</li>
</ul>
<p>提示：以上为三种设置环境变量的方法</p>
<p>例：</p>
<pre><code>export NAME=pan
declare -x NAME=pan
NAME=oldboy;export NAME
</code></pre><p>举例：（自定义全局环境变量）</p>
<pre><code>[root@pan ~]# grep XWQ /etc/profile
export XWQ=&apos;pan&apos;   #编辑/etc/profile在末行输出内容并保存
[root@pan ~]# source /etc/profile    #使定义的内容生效
[root@pan ~]# echo $XWQ    #打印变量值
pan
[root@pan ~]# env|grep XWQ   #查看定义结果
XWQ=pan
</code></pre><p>1）常见的全局环境变量的配置：</p>
<pre><code>/etc/profile
/etc/bashrc   #推荐在此文件中优先设置
/etc/profile.d/
</code></pre><p>若在登录后初始化或者显示加载内容，则把脚本文件放在<code>/etc/profile.d/</code>下即可（无需加执行限）</p>
<p>2）设置登录提示的两种方式<br>第一种是在<code>/etc/motd</code>里增加提示的字符串，如下：</p>
<pre><code>[root@pan ]# cat /etc/motd
welcome to pan linux shell training.
</code></pre><p>登录后显示如下：</p>
<pre><code>Last login: Tue Jun 12 14:46:50 2018 from 192.168.0.1
welcome to pan linux shell training.
</code></pre><p>第二种是在<code>/etc/profile.d/</code>下面增加如下脚本</p>
<pre><code>[root@pan ~]# cat /etc/profile.d/pan.sh
echo &quot;Here is pan blog&quot;  #脚本内容
</code></pre><p>登录后显示如下：</p>
<pre><code>Last login: Tue Jun 12 16:00:48 2018 from 192.168.0.1
Here is pan blog
</code></pre><h2 id="显示与取消环境变量"><a href="#显示与取消环境变量" class="headerlink" title="显示与取消环境变量"></a>显示与取消环境变量</h2><p>1）通过echo 命令打印环境变量</p>
<p><code>$HOME</code> 用户登录时进入的目录</p>
<p><code>$UID</code> 当前用户的UID（用户标识）相当与id-u</p>
<p><code>$PWD</code> 当前工作目录的绝对路径名</p>
<p><code>$SHELL</code> 当前SHELL</p>
<p><code>$USER</code> 当前用户</p>
<p>……..</p>
<p>2）用env（printenv）或set显示默认的环境变量<br>3）用unset消除本地变量和环境变量</p>
<p>例：</p>
<pre><code>[pan@pan ~]$ echo $USER
pan
[pan@pan ~]$ unset USER
[pan@pan ~]$ echo $USER
#此处输出为空
</code></pre><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>1）定义本地变量</p>
<p>本地变量在用户当前的shell生存期的脚本中使用。例如，本地变量 XWQ取值为pan，这个值只要在用户当前shell生存期中有意义。如果在shell中启动另一个进程或退出，本地变量XWQ值将无效。</p>
<p>1.普通字符串变量定义</p>
<p>变量名=value</p>
<p>变量名=’value’</p>
<p>变量名=”value”</p>
<p>shell中变量名的要求：一般是字母，数字。下划线组成。</p>
<p>2）自定义变量建议</p>
<p>纯数字（不带空格），定义方式可以不加引号（单或双），例如：</p>
<pre><code>PanAge=23
NETWORKING=yes
</code></pre><p>没有特殊情况，字符串一般用双引号定义，特别是多个字符串中有空格时，例如：</p>
<pre><code>NFSD_MODULE=&quot;no load&quot;
MyName=&quot;Pan is a handsome boy&quot;
</code></pre><p>变量内容需要原样输出时，要用单引号（’’）</p>
<pre><code>PAN_NAME=&apos;PAN&apos;
</code></pre><p>3）变量命名规范</p>
<p>变量命令要统一，使用全部大写字母，如<code>APACHE_ERR_NUM</code>；语义要清晰，能够正确表达变量内容的含义，过长的英文单词可采用前几个字符代替。多个单词连接使用“_”号连接，引用时，最好以<code>${APACHE_ERR_NUM}</code>加大括号或者”<code>${APACHE_ERR_NUM}</code>“外面加双引号方式引用变量；</p>
<p>4）避免无含义字符或数字</p>
<p>5）全局变量和局部变量命令</p>
<p>a.脚本中的全局变量定义，如<code>PAN_HOME</code>或<code>PANHOME</code>，在变量使用时使用{}将变量括起或<code>&quot;${PAN_HOME}&quot;</code></p>
<p>b.脚本中局部变量定义：存在于脚本函数（function）中的变量称为局部变量，要以local方式进行声明，使之只在本函数作用域内有效，防止变量在函数中命名与变量外部程序中变量重名造成程序异常。</p>
<p>6）变量合并</p>
<p>当某些变量或配置项要组合起来才有意义时，如文件的路径和文件名称，建议将要组合的变量合并到一起赋值给一个新的变量，这样既方便之后调用，也为以后进行修改提供了方便。</p>
<h1 id="Shell特殊变量"><a href="#Shell特殊变量" class="headerlink" title="Shell特殊变量"></a>Shell特殊变量</h1><h2 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-1.png" alt="s-1"></p>
<p>提示：如果希望单独获取名称或路径可以使用dirname及basename命令。</p>
<pre><code>[root@pan scripts]# cat n.sh
dirname $0
basename $0
[root@pan scripts]# sh /server/scripts/n.sh
/server/scripts
n.sh
</code></pre><h2 id="进程状态变量"><a href="#进程状态变量" class="headerlink" title="进程状态变量"></a>进程状态变量</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-2.png" alt="s-2"></p>
<p><code>$?</code>返回值参考：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-3.png" alt="s-3"></p>
<p>例：</p>
<pre><code>[root@pan scripts]# cat all.sh
echo &apos;$0 获取当前执行的shell脚本的文件名：&apos; $0
echo &apos;$n 获取当前执行的shell脚本的第n个参数值，n=1...9:&apos; &apos;$1&apos;=$1 &apos;$2&apos;=$2 &quot;\    $3=$3&quot;
echo &apos;$* 获取当前shell的所有参数“$1 $2 $3...注意与$#的区别”：&apos; $*
echo &apos;$# 获取当前shell命令行中参数的总个数：&apos; $#
echo &apos;$$ 获取当前shell的进程号(PID)：&apos; $$
sleep 2 &amp;
echo &apos;$! 执行上一个指令的PID：&apos; $!
echo &apos;$? 获取执行的上一个指令的返回值：&apos; $?
echo &apos;$@ 这个程序的所有参数&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;...&quot; :&apos; $@
echo &apos;$_ 在此之前执行的命令或脚本的最后一个参数：&apos; $_
[root@pan scripts]# sh all.sh xwq pan xdf
$0 获取当前执行的shell脚本的文件名： all.sh
$n 获取当前执行的shell脚本的第n个参数值，n=1...9: $1=xwq $2=pan $3=xdf
$* 获取当前shell的所有参数“$1 $2 $3...注意与$#的区别”： xwq pan xdf
$# 获取当前shell命令行中参数的总个数： 3    
$$ 获取当前shell的进程号(PID)： 3873
$! 执行上一个指令的PID： 3874
$? 获取执行的上一个指令的返回值： 0
$@ 这个程序的所有参数&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;...&quot; : xwq pan xdf
$_ 在此之前执行的命令或脚本的最后一个参数： xdf
</code></pre><h2 id="bash内部变量"><a href="#bash内部变量" class="headerlink" title="bash内部变量"></a>bash内部变量</h2><p>有些内部命令在目录表时是看不见的，它们由shell本身提供，常用的内部命令有：</p>
<p>echo,eval,exec,export,readonly,read,shift,wait,exit和点(.)</p>
<ul>
<li>echo 变量表名</li>
</ul>
<p>将变量名表指定的变量显示到标准输出。</p>
<ul>
<li>eval args</li>
</ul>
<p>读入参数args，并它们组合成一个新的命令，然后执行。</p>
<ul>
<li>exec命令参数</li>
</ul>
<p>当shell执行到exec语句时，不会去创建新的子进程，而是转去执行指定的命令，当指令的命令执行完时，该进程（也就最初的shell）就终止了，所以shell程序中exec后面的语句将不再被执行。</p>
<ul>
<li>export 变量名=value</li>
</ul>
<p>shell可以用export把它的变量向下带入子shell，从而让子进程继承父进程中的环境变量。但是shell不能用export把它的变量向上带入父shell</p>
<ul>
<li>readonly 变量名</li>
</ul>
<p>只读变量 用readonly 显示所有只读变量</p>
<ul>
<li><p>read 变量名表<br>从标准输入读字符串，传给指定变量。可以在函数中用local变量名的方式申明局部变量</p>
</li>
<li><p>shift语句<br>shift语句按如下方式重新命名所有的位置参数变量，即<code>$2</code>成为<code>$1</code>,<code>$3</code>成为<code>$2...</code>在程序中每使用一次shift语句，都使所有的位置参数依次向左移动一个位置，并使位置参数<code>$#</code>减</p>
</li>
</ul>
<h2 id="变量子串的常用操作"><a href="#变量子串的常用操作" class="headerlink" title="变量子串的常用操作"></a>变量子串的常用操作</h2><p>常见操作如下表：</p>
<p><img src="http://p10cma2nn.bkt.clouddn.com/s-4.png" alt="s-4"></p>
<p>依次举例说明：</p>
<p>定义PAN 变量，内容为”I am pan”</p>
<pre><code>[root@pan ~]# PAN=&quot;I am pan&quot;
[root@pan ~]# echo ${PAN}
I am pan
</code></pre><p>1）返回字符串PAN 变量字符串的长度</p>
<pre><code>[root@pan ~]# echo ${#PAN}
8
</code></pre><p>2）截取PAN变量字符串从第2个字符之后开始取，默认取后面字符的全部，第2个字符不包含在内。也可理解为删除前面的多少个字符。</p>
<pre><code>[root@pan ~]# echo ${PAN:2}
am pan
</code></pre><p>3）截取PAN变量字符串从第2个字符之后开始取，取两个字符。</p>
<pre><code>[root@pan ~]# echo ${PAN:2:2}
am
提示：类似cut -c参数
[root@pan ~]# echo ${PAN}|cut -c 1-4
I am
[root@pan ~]# echo ${PAN}|cut -c 3-4
am
</code></pre><p>4）从变量<code>$PAN</code>开头开始删除最短匹配“I am”子串</p>
<pre><code>[root@pan ~]# echo ${PAN#I am}
pan
</code></pre><p>5）从变量<code>$PAN</code>开头开始删除最长匹配“I am p”</p>
<pre><code>[root@pan ~]# echo ${PAN##I am p}
an
</code></pre><p>6）从变量<code>$PAN</code>结尾开始删除最短匹配pan子串</p>
<pre><code>[root@pan ~]# echo ${PAN%pan}
I am
</code></pre><p>7）使用etiantian字符串，来代替变量<code>$PAN</code>第一匹配的pan字符串</p>
<pre><code>[root@pan ~]# echo ${PAN/pan/etiantian}
I am etiantian
</code></pre><p>8）使用etiantian字符串，来代替从变量<code>$PAN</code>结尾开始匹配pan字符串</p>
<pre><code>[root@pan ~]# echo ${PAN/%pan/etiantian}
I am etiantian
</code></pre><p>9）使用He is 字符串，来代替从变量<code>$PAN</code>开头开始匹配的 I am 字符串</p>
<pre><code>[root@pan ~]# echo ${PAN/#I am/He is}
He is pan
</code></pre><p>提示：统一规律<code>#</code>从开头开始，<code>%</code>从结尾开始</p>
<h2 id="Shell特殊扩展变量"><a href="#Shell特殊扩展变量" class="headerlink" title="Shell特殊扩展变量"></a>Shell特殊扩展变量</h2><p><img src="http://p10cma2nn.bkt.clouddn.com/s-5.png" alt="s-5"></p>
<p>依次举例说明：<br>1）<code>${value:-word}</code></p>
<p>当变量未定义或者值为空时，返回值为word内容，否则返回变量的值。<br>举例：</p>
<pre><code>[root@pan ~]# result=${test:-UNSET}
[root@pan ~]# echo $result
UNSET
[root@pan ~]# echo $test
#返回空值
</code></pre><p>结论：当test变量没内容时，就返回了后面的UNSET</p>
<pre><code>[root@pan ~]# test=&apos;pan&apos;
[root@pan ~]# result=${test:-UNSET}
[root@pan ~]# echo $result
pan
</code></pre><p>提示：这个变量功能可以用来判断变量是否没有定义。</p>
<p>结论：当test变量有内容时，就返回了test的内容</p>
<p>2）<code>${value:=word}</code></p>
<pre><code>[root@pan ~]# unset result
[root@pan ~]# echo $result

[root@pan ~]# unset test
[root@pan ~]# echo $test

[root@pan ~]# result=${test:=UNSET}
[root@pan ~]# echo $result
UNSET
[root@pan ~]# echo $test
UNSET
</code></pre><p>3）<code>${vlaue:?message}</code><br>若变量已赋值的话，正常替换。否则将消息message送到标准错误输出（若此替换出现在shell程序中，那么该程序将终止运行）</p>
<p>4）<code>${value-word}</code>去掉冒号</p>
<pre><code>[root@pan ~]# httpd=${HTTP-/usr/sbin/httpd}
[root@pan ~]# pidfile=${PIDFILE-/var/run/httpd.pid}
[root@pan ~]# echo $httpd $pidfile
/usr/sbin/httpd /var/run/httpd.pid
[root@pan ~]# echo $HTTPD $PIDFILE
#此处输出为空
</code></pre><p>结论：变量没有定义就用-号后面的替代</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识脚本&quot;&gt;&lt;a href=&quot;#初识脚本&quot; class=&quot;headerlink&quot; title=&quot;初识脚本&quot;&gt;&lt;/a&gt;初识脚本&lt;/h1&gt;&lt;h2 id=&quot;脚本的建立&quot;&gt;&lt;a href=&quot;#脚本的建立&quot; class=&quot;headerlink&quot; title=&quot;脚本的建立&quot;&gt;
    
    </summary>
    
      <category term="Shell编程" scheme="http://yjscloud.site/categories/Shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Shell学习笔记" scheme="http://yjscloud.site/tags/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（七）：MySQL备份与恢复实战</title>
    <link href="http://yjscloud.site/2018/05/20/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9AMySQL%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%E5%AE%9E%E6%88%98/"/>
    <id>http://yjscloud.site/2018/05/20/MySQL系列（七）：MySQL备份与恢复实战/</id>
    <published>2018-05-20T12:49:10.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全量备份与增量备份"><a href="#全量备份与增量备份" class="headerlink" title="全量备份与增量备份"></a>全量备份与增量备份</h1><h2 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h2><p>全量数据就是数据库中所有的数据，全量备份就是把数据库中所有的数据进行备份。</p>
<p>例：</p>
<p>备份所有数据：</p>
<pre><code>mysqldump -uroot -pyjscloud -F -B -A|gzip &gt;/server/backup/mysqlbak_$(date +%F).sql.gz
</code></pre><p>备份一个库：</p>
<pre><code>mysqldump -uroot -pyjscloud -F -B yjs_stu|gzip &gt;/server/backup/mysqlbak_$(date +%F).sql.gz
</code></pre><h2 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h2><p>增量数据是从上次全量备份之后，更新的新数据。对于MySQL来说，binlog日志就是MySQL的增量数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-128.png" alt="m-128"></p>
<h2 id="企业场景全量和增量的频率"><a href="#企业场景全量和增量的频率" class="headerlink" title="企业场景全量和增量的频率"></a>企业场景全量和增量的频率</h2><p>1）中小公司，全量一般是每天一次，业务流量低谷执行全备，备份时会锁表</p>
<p>2）单台数据库，如何增量。用rsync（配合定时任务频率大点或者inotify，主从复制把所有binlog备份到远程服务器，尽量做主从复制）</p>
<p>增量备份的例子：</p>
<pre><code>rsync -avz /application/mysql/data/mysql-bin.*     rsync_backup@192.168.0.30::backup --password-file=/etc/rsync.password
</code></pre><p>3）大公司周备，每周六00点一次全量，下周日-下周六00点前都是增量</p>
<p>优点：节约备份时间，减小备份压力。缺点：增量的binlog文件副本太多，还原会很多麻烦</p>
<p>4）一主五从，会有一个从库做备份，延迟同步。</p>
<p>mysql的mysqldump备份什么时候派上用场？</p>
<ul>
<li><p>迁移或者升级数据库时。</p>
</li>
<li><p>增加从库时候</p>
</li>
<li><p>因为硬件或特殊异常情况，主库或从库宕机，从库可以互相切换，无需备份。</p>
</li>
<li><p>人为的DDL，DML语句，主从库没有办法了，所有库都会执行。此时需要备份。</p>
</li>
<li><p>跨机房灾备，需要备份到异地。</p>
</li>
</ul>
<h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><p>1）什么情况下需要增量恢复？</p>
<p>我们再在生产工作中一般常用一主多从的数据库架构，常见的备份方案是在某一个不对外服务的从库上开启binlog，然后实施定时全备和实时增量备份。</p>
<p>什么是增量恢复？</p>
<p>利用二进制日志和全备进行的恢复过程，被称为增量恢复。那么到底什么情况下才需要数据库增量恢复呢？</p>
<p>1、主或者从库宕机（硬件损坏）是否需要增量恢复？</p>
<p>答：不需要增量恢复，主库宕机，只需要把其中一个同步最快的从库切换为主库即可。从库宕机，直接不用就好了（一般都会配LVS负载均衡）。或者正常修复。</p>
<p>2、人为操作数据库SQL语句破坏主库是否需要增量恢复？</p>
<p>在数据库主库内部命令误操作，会导致所有的数据库（包括主从库）数据丢失，例如：在主库执行了drop database test; 这样的删除语句，这时所有的从库也会执行这个drop database test;语句，从而导致所有的数据库上的test库数据丢失，这样的场景是需要增量恢复的。</p>
<p>3）只有一个主库是否需要增量恢复？</p>
<p>如果公司只有一个主库的情况，首先应该做定时全量备份（每天一次）及增量备份（每隔1-10分钟对binlog日志做切割然后备份到其他的服务器上，或者本地其他的硬盘里）或者写到网络文件系统（备份服务器）里。如果不允许数据丢失，最好的办法就是做从库，通过drdb（基于磁盘块的）同步。</p>
<p>正常情况下：</p>
<ul>
<li><p>主库同步：除了分担读写分离压力外，还可以防止物理设备损坏数据丢失的恢复。</p>
</li>
<li><p>从库备份：在从库进行全量和增量方式的备份，可以防止人为对主库的误操作导致数据丢失。确保备份的从库实时和主库是同步状态。</p>
</li>
</ul>
<p>小结：一般由人为（或程序）逻辑的方式在数据库执行的SQL语句误操作，需要增量恢复，因为此时所有的从库也执行了误操作的语句。</p>
<h1 id="MySQL增量恢复必备条件"><a href="#MySQL增量恢复必备条件" class="headerlink" title="MySQL增量恢复必备条件"></a>MySQL增量恢复必备条件</h1><h2 id="开启MySQL-log-bin日志功能"><a href="#开启MySQL-log-bin日志功能" class="headerlink" title="开启MySQL log-bin日志功能"></a>开启MySQL log-bin日志功能</h2><p>mysql数据库开启log-bin参数记录binlog日志功能如下：</p>
<pre><code>[root@master ~]# grep log-bin /etc/my.cnf
log-bin=mysql-bin
</code></pre><p>提示：主库和备份的从库都需要开启binlog记录功能。</p>
<p>小结：增量恢复的条件：存在一份全备加上全备之后的时刻到处问题时刻的所有增量binlog文件备份</p>
<h2 id="存在mysql数据库备份"><a href="#存在mysql数据库备份" class="headerlink" title="存在mysql数据库备份"></a>存在mysql数据库备份</h2><p>1）生产环境mysqldump备份命令</p>
<p>备份命令如下：</p>
<pre><code>mysqldump -uroot -pyjscloud --single-transaction -F -B yjs_stu |gzip &gt; /server/backup/mysql_$(date +%F).sql.gz
</code></pre><p>innodb引擎备份：</p>
<pre><code>mysqldump -u$MYUSER -p$MYPASS -F --single-transaction -A -B | gzip &gt; $DATA_FILE
mysqldump -u$MYUSER -p$MYPASS -F -A -B --lock-all-tables | gzip &gt; $DATA_FILE
</code></pre><p>MySQL增量恢复案例图解</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-129.png" alt="m-129"></p>
<h1 id="场景模拟"><a href="#场景模拟" class="headerlink" title="场景模拟"></a>场景模拟</h1><h2 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h2><p>1）创建学生表</p>
<pre><code>create database yjs_stu;
use yjs_stu;
create table student(
Sno int(10) NOT NULL COMMENT &apos;学号&apos;,
Sname varchar(16) NOT NULL COMMENT &apos;姓名&apos;,
Ssex char(2) NOT NULL COMMENT &apos;性别&apos;,
Sage tinyint(2)  NOT NULL default &apos;0&apos; COMMENT &apos;学生年龄&apos;,
Sdept varchar(16)  default NULL  COMMENT &apos;学生所在系别&apos;,
PRIMARY KEY  (Sno) ,
key index_Sname (Sname)
);
</code></pre><p>2）学生表插入数据：</p>
<pre><code>INSERT INTO student values(0001,&apos;路飞&apos;,&apos;男&apos;,17,&apos;计算机网络&apos;);
INSERT INTO student values(0002,&apos;索隆&apos;,&apos;男&apos;,19,&apos;网络安全&apos;);
INSERT INTO student values(0003,&apos;乌索普&apos;,&apos;男&apos;,18,&apos;网络媒体&apos;);
INSERT INTO student values(0004,&apos;娜美&apos;,&apos;女&apos;,17,&apos;旅游管理&apos;);
INSERT INTO student values(0005,&apos;香吉士&apos;,&apos;男&apos;,22,&apos;新东方厨校&apos;);
INSERT INTO student values(0006,&apos;妮可罗宾&apos;,&apos;女&apos;,28,&apos;古代历史&apos;);
</code></pre><p>3）检查数据库及数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-130.png" alt="m-130"></p>
<p>4）定时任务备份数据</p>
<p>这里我们使用脚本备份数据</p>
<pre><code>#!/bin/sh

#parameter defined
MYUSER=root
MYPASS=&quot;yjscloud&quot;
#MYSOCK=/application/mysql/tmp/mysql.sock
DBNAME=&quot;yjs_stu&quot;
MAIN_PATH=/server/backup
DATA_PATH=/server/backup
LOG_FILE=${DATA_PATH}/mysql_logs_$(date +%F).log
DATA_FILE=${DATA_PATH}/mysql_backup_$(date +%F).sql.gz

#command defined
MYSQL_PATH=/application/mysql/bin
MYSQL_DUMP=&quot;$MYSQL_PATH/mysqldump -u$MYUSER -p$MYPASS -F -B --master-data=2 --single-transaction -e  $DBNAME&quot;

#backup command
${MYSQL_DUMP} | gzip &gt; $DATA_FILE

#check backup result
du -sh $DATA_FILE&gt;$LOG_FILE
</code></pre><p>5）备份完成后插入新数据</p>
<pre><code>INSERT INTO student values(0007,&apos;弗兰奇&apos;,&apos;男&apos;,38,&apos;机械工程&apos;);
INSERT INTO student values(0008,&apos;布鲁克&apos;,&apos;男&apos;,58,&apos;音乐学院&apos;);
</code></pre><p>6）模拟用户误删数据</p>
<pre><code>mysql&gt; drop database yjs_stu;
</code></pre><p>7）检查破坏结果</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-131.png" alt="m-131"></p>
<h1 id="增量恢复全过程"><a href="#增量恢复全过程" class="headerlink" title="增量恢复全过程"></a>增量恢复全过程</h1><h2 id="允许锁库的的情景"><a href="#允许锁库的的情景" class="headerlink" title="允许锁库的的情景"></a>允许锁库的的情景</h2><p>通过防火墙禁止web等应用向主库写数据或或者锁表。让主库暂时停止更新。然后再进行恢复。</p>
<p>1）检查全备</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-132.png" alt="m-132"></p>
<p>2）检查全备后的所有binlog</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-133.png" alt="m-133"></p>
<p>3）立即刷新并备份出binlog</p>
<pre><code>mysqladmin -uroot -pyjscloud flush-logs
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-134.png" alt="m-134"></p>
<p>备份刷新出来的binlog</p>
<pre><code>cp mysql-bin.000009 /server/backup/
</code></pre><p>将新的mysql-bin文件转换为sql文件</p>
<pre><code>mysqlbinlog -d yjs_stu mysql-bin.000009 &gt; bin.sql
</code></pre><p>4）编辑bin.sql</p>
<pre><code>vim bin.sql 
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-135.png" alt="m-135"></p>
<p>5）往数据导入数据</p>
<pre><code>mysql -uroot -pyjscloud &lt; mysql_backup_2018-05-20.sql
mysql -uroot -pyjscloud &lt; bin.sql 
</code></pre><p>6）查看数据库</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-136.png" alt="m-136"></p>
<p>数据恢复完成</p>
<h2 id="不锁库情景下恢复思想"><a href="#不锁库情景下恢复思想" class="headerlink" title="不锁库情景下恢复思想"></a>不锁库情景下恢复思想</h2><p>1）停止一个从库，然后在主库刷新binlog，把mysql-bin.000009恢复成bin.sql（去掉drop语句）</p>
<p>2）把全备mysql_backup_2018-05-20.sql及新插入数据前的增量bin.sql恢复到从库</p>
<p>3）切换到从库提供服务，会有数据丢失插入数据后刷新binlog以后的数据mysql-bin.000010</p>
<p>4）把mysql-bin.000010解析为sql，恢复到从库</p>
<p>以上解决办法会有主键冲突问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;全量备份与增量备份&quot;&gt;&lt;a href=&quot;#全量备份与增量备份&quot; class=&quot;headerlink&quot; title=&quot;全量备份与增量备份&quot;&gt;&lt;/a&gt;全量备份与增量备份&lt;/h1&gt;&lt;h2 id=&quot;全量备份&quot;&gt;&lt;a href=&quot;#全量备份&quot; class=&quot;headerli
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（六）：MySQL主从复制高级应用</title>
    <link href="http://yjscloud.site/2018/05/18/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
    <id>http://yjscloud.site/2018/05/18/MySQL系列（六）：MySQL主从复制高级应用/</id>
    <published>2018-05-18T11:24:35.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="mysql主从同步配置步骤"><a href="#mysql主从同步配置步骤" class="headerlink" title="mysql主从同步配置步骤"></a>mysql主从同步配置步骤</h2><p>1）准备两台数据库环境，或者单台多实例环境，能否正常启动和登陆</p>
<p>2）配置my.cnf文件，主库配置log-bin和server-id参数，从库配置server-id，不能和主库以及其他从库一样，一般不开启从库log-bin功能，注意：配置参数后要重启生效。</p>
<p>3）登陆主库增加用于从库连接主库同步的账户如：rep，并授权replication slave同步的权限。</p>
<p>4）登陆主库，整个锁表flush table with read lock （窗口关闭后即失效，超时参数到了也失效）；然后show master status查看binlog的位置状态。</p>
<p>5）新窗口，linux命令行备份或导出原有的数据库数据，并拷贝到从库所在的服务器目录。如果数据量很大，并允许停机，可以停机打包，而不用mysqldump</p>
<p>6）解锁主库，unlock tables;</p>
<p>7）把主库导出的原有数据恢复到从库</p>
<p>8）根据主库的show master status查看binlog的位置状态，在从库执行change master to…语句</p>
<p>9）从库开启同步开关，start slave</p>
<p>10）从库show slave status\G ,检查同步状态，并在主库进行更新测试。</p>
<h2 id="mysql主从复制原理要点"><a href="#mysql主从复制原理要点" class="headerlink" title="mysql主从复制原理要点"></a>mysql主从复制原理要点</h2><p>1）异步方式同步。</p>
<p>2）逻辑同步模式，多种模式，默认是通过SQL语句执行</p>
<p>3）主库通过记录binlog实现对从库的同步。binlog记录数据库的更新语句。</p>
<p>4）主库1个IO线程，从库由1个IO线程和一个SQL线程来完成的</p>
<p>5）从库关键文件master.info,relay-log,relay-info功能</p>
<p>6）如果从库还想级联从库，需要打开log-bin和log-slave-updates参数。</p>
<h2 id="生产场景快速配置mysql主从复制方案"><a href="#生产场景快速配置mysql主从复制方案" class="headerlink" title="生产场景快速配置mysql主从复制方案"></a>生产场景快速配置mysql主从复制方案</h2><p>1）安装好要配置从库的数据库，配置好log-bin和server-id参数</p>
<p>2）无需配置主库my.cnf文件，主库的log-bin和server-id参数默认就是配置好的</p>
<p>3）登陆主库增加用于从库连接主库同步的账号例如：rep，并授权replication slave同步的权限</p>
<p>4）使用半夜mysqldump带–master-data=1备份的全备数据恢复到从库。</p>
<p>5）在从库执行change master to…语句，无需binlog文件及对应位置点。</p>
<p>6）从库开启同步开关，start slave。</p>
<p>7）从库show slave status\G ,检查同步状态，并在主库进行更新测试。</p>
<h1 id="生产环境主从库同步配置注意事项"><a href="#生产环境主从库同步配置注意事项" class="headerlink" title="生产环境主从库同步配置注意事项"></a>生产环境主从库同步配置注意事项</h1><h2 id="第一次做从库如何做？"><a href="#第一次做从库如何做？" class="headerlink" title="第一次做从库如何做？"></a>第一次做从库如何做？</h2><p>1）申请设备资源，用来做从库服务器</p>
<p>2）撰写方案文档和实施步骤。</p>
<p>假如你的服务器只有主库，而且已经跑了生产线上应用了，现在由于业务需要第一次做从库，<br>此时可能需要和公司申请停机维护时间（要确认这个时间段内可以做一次全备），集在用户访问量最小，且不影响内部其他业务运转的时间点来停机（包括锁表）配置主从复制，一般都是凌晨进行。<br>注意：停机（锁表，停库）的最小时间段，为锁表备份的时间，也就是说无需等待主从配置好。<br>当然也可以不申请停机时间，在定时任务备份时，每天的夜里的定时备份时做一些措施即可实现。</p>
<h2 id="无须熬夜在工作时间轻松配置从库"><a href="#无须熬夜在工作时间轻松配置从库" class="headerlink" title="无须熬夜在工作时间轻松配置从库"></a>无须熬夜在工作时间轻松配置从库</h2><p>全备及全备过程中binlog位置的信息或者直接用–master-data参数解决。</p>
<p>1）一键做主从复制脚本</p>
<p>1、锁表备份全备一份</p>
<p>2、锁表前后取得showmaster status值记录日志里这样就可以在白天从容的实现主从同步了。这个脚本还是很容易实现的，如：</p>
<p>脚本方法1：</p>
<pre><code>#!/bin/sh
MYUSER=root
MYPASS=&quot;yjscloud&quot;
MYSOCK=/application/mysql/tmp/mysql.sock
MAIN_PATH=/server/backup
DATA_PATH=/server/backup
LOG_FILE=${DATA_PATH}/mysqllogs_&apos;date +%F&apos;.log
DATA_FILE=${DATA_PATH}/mysql_backup_&apos;date +%F&apos;.sql.gz
MYSQL_PATH=/application/mysql/bin
MYSQL_CMD=&quot;$MYSQL_PATH/mysql -u$MYUSER -p$MYPASS -S $MYSOCK&quot;
MYSQL_DUMP=&quot;$MYSQL_PATH/mysqldump -u$MYUSER -p$MYPASS -S $MYSOCK -A -B --single-transaction -e&quot;
cat |$MYSQL_CMD&lt;&lt;EOF
flush tables with read lock;
system echo &quot;-----show master status result------&quot;&gt;&gt;$LOG_FILE;
system $MYSQL_CMD -e &quot;show master status&quot;|tail -1 &gt;&gt;$LOG_FILE;
system ${MYSQL_DUMP} | gzip &gt; $DATA_FILE;
EOF
$MYSQL_CMD -e &quot;unlock tables;&quot;
</code></pre><p>脚本方法2：</p>
<pre><code>#!/bin/sh
MYUSER=root
MYPASS=&quot;yjscloud&quot;
MYSOCK=/application/mysql/tmp/mysql.sock
MAIN_PATH=/server/backup
DATA_PATH=/server/backup
LOG_FILE=${DATA_PATH}/mysqllogs_&apos;date +%F&apos;.log
DATA_FILE=${DATA_PATH}/mysql_backup_&apos;date +%F&apos;.sql.gz
MYSQL_PATH=/application/mysql/bin
MYSQL_CMD=&quot;$MYSQL_PATH/mysql -u$MYUSER -p$MYPASS -S $MYSOCK&quot;
MYSQL_DUMP=&quot;$MYSQL_PATH/mysqldump -u$MYUSER -p$MYPASS -S $MYSOCK -A -B --master-data=1 --single-transaction -e&quot;
${MYSQL_DUMP} | gzip &gt; $DATA_FILE;
</code></pre><p>有了mysql_backup_xxxx-xx-xx.sql.gz和mysqllogs_xxxx-xx-xx.log内容做从库就不远了</p>
<h2 id="不停主库一键批量创建从库"><a href="#不停主库一键批量创建从库" class="headerlink" title="不停主库一键批量创建从库"></a>不停主库一键批量创建从库</h2><h3 id="一键创建从库方法1"><a href="#一键创建从库方法1" class="headerlink" title="一键创建从库方法1"></a>一键创建从库方法1</h3><p>把上面备份的mysql_backup_xxxx-xx-xx.sql.gz发布到想做从库同步的机器上，可以做多台。<br>然后再制造如下批量做从库脚本，一键完成多台机器从库的制作</p>
<pre><code>#!/bin/sh
MYUSER=root
MYPASS=&quot;yjscloud&quot;
MYSOCK=/application/mysql/tmp/mysql.sock
MAIN_PATH=/server/backup
DATA_PATH=/server/backup
LOG_FILE=${DATA_PATH}/mysqllogs_&apos;date +%F&apos;.log
DATA_FILE=${DATA_PATH}/mysql_backup_&apos;date +%F&apos;.sql.gz
MYSQL_PATH=/application/mysql/bin
MYSQL_CMD=&quot;$MYSQL_PATH/mysql -u$MYUSER -p$MYPASS -S $MYSOCK&quot;

#recover
cd ${DATA_PATH}
gzip -d mysql_backup_&apos;date +%F&apos;.sql.gz
$MYSQL_CMD &lt;  mysql_backup_&apos;date +%F&apos;.sql

#config slave
cat |$MYSQL_CMD&lt;&lt;EOF
CHANGE MASTER TO
MASTER_HOST=&apos;192.168.0.30&apos;,
MASTER_PORT=3306,
MASTER_USER=&apos;rep&apos;,
MASTER_PASSWORD=&apos;yjscloud123&apos;,
MASTER_LOG_FILE=&apos;mysql-bin.000005&apos;,
MASTER_LOG_POS=338;
EOF

$MYSQL_CMD -e &quot;start slave;&quot;
$MYSQL_CMD -e &quot;show salve status\G&quot; |egrep &quot;IO_Running|SQL_Running&quot;&gt;$LOG_FILE
mail -s &quot;mysql slave result&quot; yjscloud@gmail.com &lt; $LOG_FILE
</code></pre><p>特别提醒：</p>
<p>此脚本中change master参数要根据mysqllog_xxxx-xx-xx.log修改</p>
<h3 id="一键创建从库方法2"><a href="#一键创建从库方法2" class="headerlink" title="一键创建从库方法2"></a>一键创建从库方法2</h3><pre><code>#!/bin/sh
MYUSER=root
MYPASS=&quot;yjscloud&quot;
MYSOCK=/application/mysql/tmp/mysql.sock
MAIN_PATH=/server/backup
DATA_PATH=/server/backup
LOG_FILE=${DATA_PATH}/mysqllogs_&apos;date +%F&apos;.log
DATA_FILE=${DATA_PATH}/mysql_backup_&apos;date +%F&apos;.sql.gz
MYSQL_PATH=/application/mysql/bin
MYSQL_CMD=&quot;$MYSQL_PATH/mysql -u$MYUSER -p$MYPASS -S $MYSOCK&quot;

#recover
cd ${DATA_PATH}
gzip -d mysql_backup_&apos;date +%F&apos;.sql.gz
$MYSQL_CMD &lt;  mysql_backup_&apos;date +%F&apos;.sql

#config slave
cat |$MYSQL_CMD&lt;&lt;EOF
CHANGE MASTER TO
MASTER_HOST=&apos;192.168.0.30&apos;,
MASTER_PORT=3306,
MASTER_USER=&apos;rep&apos;,
MASTER_PASSWORD=&apos;yjscloud123&apos;,
EOF

$MYSQL_CMD -e &quot;start slave;&quot;
$MYSQL_CMD -e &quot;show salve status\G&quot; |egrep &quot;IO_Running|SQL_Running&quot;&gt;$LOG_FILE
mail -s &quot;mysql slave result&quot; yjscloud@gmail.com &lt; $LOG_FILE
</code></pre><h2 id="相关mysql主从复制技术技巧概览"><a href="#相关mysql主从复制技术技巧概览" class="headerlink" title="相关mysql主从复制技术技巧概览"></a>相关mysql主从复制技术技巧概览</h2><h3 id="登陆数据库查看mysql线程同步状态"><a href="#登陆数据库查看mysql线程同步状态" class="headerlink" title="登陆数据库查看mysql线程同步状态"></a>登陆数据库查看mysql线程同步状态</h3><p>主库：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-116.png" alt="m-116"></p>
<p>从库：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-117.png" alt="m-117"></p>
<h3 id="复制主线程状态"><a href="#复制主线程状态" class="headerlink" title="复制主线程状态"></a>复制主线程状态</h3><p>下面列出了主服务器的Binlog Dump线程的state列最常见的状态。如果你没有在主服务器上看见任何binlog dump线程，这说明复制没有在运行，即目前没有连接任何从服务器。</p>
<p>Sending binlog events to slave<br>(二进制日志由各种事件组成，一个事件通常为一个跟新加一些其它信息，线程已经从二进制日志读取了一个事件并且正将它发送到从服务器)</p>
<p>Finished reading one binlog;switchingto next binlog<br>(线程已经读完二进制日志文件并且正打开下一个发送到服务器的日志文件)</p>
<p>Has sent all binlog to slave;waitingfor binlog to be updated<br>(线程已经从二进制日志读取所有主要的跟新并已经发送到从服务器线程正空闲，等待由主服务器上新的跟新导致的出现在二进制日志中新事件)</p>
<p>Waiting to finalize termination<br>(线程停止时发生一个很简单的状态。)</p>
<h3 id="复制从I-O线程状态"><a href="#复制从I-O线程状态" class="headerlink" title="复制从I/O线程状态"></a>复制从I/O线程状态</h3><p>下面列出了从服务器的I/O线程的state列的最常见的状态。该状态也出现在Slave_IO_State列，由SHOW SLAVE STATUS显示，这说明你可以通过该语句仔细浏览所发生的事情</p>
<p>Connecting to master(线程正试图连接主服务器)</p>
<p>Checking master version(建立同主服务器之间的连接后立即临时出现的状态)</p>
<p>Registering slave on master(建立同主服务器之间的连接后立即临时出现的状态)</p>
<p>Requesting binlog dump(建立同主服务器之间的连接后立即临时出现的状态。线程向主服务器发送索取从请求的二进制日志文件名和位置开始的二进制日志的内容)</p>
<p>Waiting to reconnect after a failed binlog dump request(如果二进制日志转储请求失败[由于没有连接]，线程进入睡眠状态，然新连接，可以使用–master-connect-retry 选项指定重试之间的间隔)</p>
<p>Reconnecting after a failed binlog dump request<br>(线程正尝试重新连接主服务器)</p>
<p>Waiting for master to send event<br>(线程已经连接上主服务器，正等待二进制日志事件到达，如果主服务器正空闲，会持续较长的时间。如果等待继续slave_read_timeout秒，则发生超时，此时线程认为连接被中断并企图重新连接。)</p>
<p>Queueing master event to the relay log<br>(线程已经读取一个事件，正将它复制到中继日志供SQL线程来处理)</p>
<p>Waiting to reconnect after a failed master event read<br>(读取时（由于没有连接）出现错误。线程企图重新连接前将睡眠master-connect-retry秒。)</p>
<p>Reconnecting after a failed master event read<br>(线程正尝试重新连接主服务器。当连接重新建立后，状态变为Waiting for master to send event)</p>
<p>Waiting for the slave SQL thread to free enough relay log space<br>正使用一个非零relay_log_space_limit值，中继日志已经增长到其组合大小超过该值。I/O线程正(等待直到SQL线程处理中继日志内容并删除部分中继日志文件来释放足够的空间。)</p>
<p>Waiting for slave mutex on exit<br>(线程停止时发生的一个很简单的状态。)</p>
<h3 id="复制从SQL线程状态"><a href="#复制从SQL线程状态" class="headerlink" title="复制从SQL线程状态"></a>复制从SQL线程状态</h3><p>下面列出了从服务器的SQL线程的State列的最常见的状态。</p>
<p>Reading event from the relay log<br>(线程已经从中继日志读取一个事件，可以对事件进行处理了)</p>
<p>Has read all relay log; waiting for the slave I/0 thread to update it<br>(线程已经处理了中继日志文件中的所有事件，现在正等待I/O线程将新事件写入中继日志；)</p>
<p>Waiting for slave mutex on exit<br>(线程停止发生的一个简单的状态I/O线程的state列也可以显示语句的文本。这说明线程已经从中继日志读取了一个事件。从中提取了语句，并且正在执行语句。)</p>
<h3 id="查看mysql线程同步状态的用途"><a href="#查看mysql线程同步状态的用途" class="headerlink" title="查看mysql线程同步状态的用途"></a>查看mysql线程同步状态的用途</h3><p>通过mysql线程同步状态查看数据库同步时是否完成，用于主库宕机或者人工数据库主从切换迁移等。<br>主库宕机选择最快的从库提升为主，就需要查看，当然也可以利用mysql的半同步功能，选择固定库的提升为主。</p>
<h1 id="生产场景mysql主从复制读写分离授权方案实战"><a href="#生产场景mysql主从复制读写分离授权方案实战" class="headerlink" title="生产场景mysql主从复制读写分离授权方案实战"></a>生产场景mysql主从复制读写分离授权方案实战</h1><p>当配置好mysql主从复制后，所有对数据库内容的更新就必须在主服务器上进行。因为数据复制时单向的，只有在主库上更新，才能避免用户对主服务器上数据库内容的更新与从库上数据库内容的更新一致，而不发生冲突。</p>
<h2 id="生产mysql复制环境用户授权方案"><a href="#生产mysql复制环境用户授权方案" class="headerlink" title="生产mysql复制环境用户授权方案"></a>生产mysql复制环境用户授权方案</h2><p>假设为博客数据库授权，大家可以做下面的授权</p>
<p>1、生产环境主库用户授权：</p>
<pre><code>grant select,insert,update,delete on &apos;blog&apos; .* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>提示：特殊业务可能权限会略多，如果业务安全性要求不高，也可以all privileges权限</p>
<p>2、生产环境从库用户的授权：</p>
<pre><code>grant select,insert,update,delete on &apos;blog&apos; .* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
revoke insert ,update,delete on blog.* from &apos;blog&apos;@&apos;192.168.0.%&apos;;
</code></pre><p>提示：可以结合read-only参数共同做。</p>
<p>3、生产授权案例说明：这里表示给192.168.0.0/24的用户blog管理数据库的所有表（*表示所有表）只读权限（select）密码为yjscloud。</p>
<pre><code>grant select,insert,update,delete on &apos;blog&apos; .* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>生产环境主从库用户授权：</p>
<p>主库：</p>
<pre><code>grant select,insert,update,delete on &apos;blog&apos; .* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>从库：</p>
<pre><code>grant select on &apos;blog&apos; .* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>实现上述授权方案最简单的办法是在主库配置binlog-ignore-db=mysql</p>
<h2 id="通过忽略授权表的方式防止数据写从库方法及实践"><a href="#通过忽略授权表的方式防止数据写从库方法及实践" class="headerlink" title="通过忽略授权表的方式防止数据写从库方法及实践"></a>通过忽略授权表的方式防止数据写从库方法及实践</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>生产环境中一般会采取忽略授权表方式的同步，然后对从服务器（slave）上的用户仅授权select读权限。不同步mysql库，这样我们就保证主库和从库相同的用户可以授权不同的权限。忽略mysql库和information_schema库的主从同步</p>
<pre><code>replicate-ignore-db = mysql
binlog-ignore-db = mysql
binlog-ignore-db = performance_schema
binlog-ignore-db = information_schema
</code></pre><p>提示：忽略记录binlog日志的参数binlog-ignore-db一般用于系统的库和表</p>
<p>结论：如果想要在从库上忽略mysql库的同步，方法：</p>
<p>1、只有在[主从]库上分别设置replicate-ignore-db = mysql才可以做到从库不同步mysql库。</p>
<p>2、在主库上设置binlog-ignore-db=mysql不记录有关mysql库更新binlog，来达到从库不同步mysql库</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>修改配置文件my.cnf将如下代码复制到[mysqld]标签下</p>
<pre><code>replicate-ignore-db = mysql
binlog-ignore-db = mysql
binlog-ignore-db = performance_schema
binlog-ignore-db = information_schema
</code></pre><p>修改配置文件后需要重启数据库</p>
<pre><code>/etc/init.d/mysqld restart
</code></pre><p>重启的时候我遇到了一个报错ERROR! MySQL server PID file could not be found<br>可能进程里已经存在mysql进程</p>
<p>解决方法：用命令“ps -ef|grep mysqld”查看是否有mysqld进程，如果有使用“kill -9  进程号”杀死，然后重新启动mysqld！</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-118.png" alt="m-118"></p>
<p><a href="http://blog.51cto.com/dahui09/1841627" target="_blank" rel="external">更多解决办法请参考博客</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主库</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-119.png" alt="m-119"></p>
<p>在从库</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-120.png" alt="m-120"></p>
<p>在主库创建数据库查看主从同步是否正常</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-121.png" alt="m-121"></p>
<p>在从库查看</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-122.png" alt="m-122"></p>
<h2 id="mysql主从复制指定不同库表同步参数说明"><a href="#mysql主从复制指定不同库表同步参数说明" class="headerlink" title="mysql主从复制指定不同库表同步参数说明"></a>mysql主从复制指定不同库表同步参数说明</h2><p>master端：</p>
<pre><code>--binlog-do-db 二进制日志记录的数据库（多数据库用逗号，隔开）
--binlog-ignore-db 二进制日志中忽略数据库 （多数据库用逗号，隔开）
</code></pre><p>以下是mysql主从忽略授权表的方法案例：</p>
<p>master端：</p>
<pre><code>binlog-do-db=YYY 需要同步的数据库。不添加这行表示同步所有
binlog-ignore-db = mysql   这是不记录binlog，来达到从库不同步mysql库，以确保各自权限
binlog-ignore-db = performance_schema
binlog-ignore-db = information_schema
</code></pre><p>slave端：</p>
<pre><code>--replication-do-db    设定需要复制的数据库（多数据库使用逗号，隔开）
--replication-ignore-db 设定需要忽略的复制数据库 （多数据库使用逗号，隔开）
--replication-do-table   设定需要复制的表
--replication-ignore-table 设定需要忽略的复制表
--replication-wild-do-table 同replication-do-table功能一样，但是可以通配符
--replication-wild-ignore-table 同replication-ignore-table功能一样，但是可以加通配符
</code></pre><p>互为同步配置实例：</p>
<p>1）A、B互为主从同步test，不同步mysql:</p>
<p>两个数据库配置中均配置：</p>
<pre><code>binlog-do-db=test
binlog-ignore-db=mysql
replication-do-db=test
replication-ignore-db=mysql
</code></pre><p>2）A、B互为为主从同步test，不同步其他数据库，新库创建的也不会同步</p>
<p>两个数据库配置中均配置：</p>
<pre><code>binlog-do-db=test
replication-do-db=test
</code></pre><p>3）A、B互为为主从不同步mysql，同步其他数据库，譬如新创建的数据库也会同步</p>
<pre><code>binlog-ignore-db=mysql
replication-ignore-db=mysql
</code></pre><p>4）A、B互为主从同步所有数据库，包括新建的数据库:</p>
<p>两个数据库配置中均不设置上述四项</p>
<h2 id="通过read-only参数防止数据写入从库方法"><a href="#通过read-only参数防止数据写入从库方法" class="headerlink" title="通过read-only参数防止数据写入从库方法"></a>通过read-only参数防止数据写入从库方法</h2><p>除了上面在从库仅做select的授权外，还可以在slave服务器启动选项增加参数或者在my.cnf配置文件中加read-only参数来确保从库只读，当然授权用户和read-only参数二者同时操作效果更佳，这也是生产环境中使用的方案。read-only参数可以让slave服务器只允许来自slave服务器线程或具有super权限的用户更新。可以确保slave服务器不接受来自普通用户的更新，slave服务器启动项增加–read-only也是同样功能</p>
<p>注意：</p>
<p>1、my.cnf里加入read-only后，重启服务使参数生效</p>
<p>2、root用户及all权限的用户可以插入，删除数据</p>
<p>3、具备insert,update,delete等权限的用户无法通过read-only的限制</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-123.png" alt="m-123"></p>
<p>重新启动mysql</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-124.png" alt="m-124"></p>
<p>进入从库创建一个用户</p>
<pre><code>mysql&gt; grant select,insert,update,delete on *.* to &apos;t_user&apos;@&apos;localhost&apos; identified by &apos;123&apos;;
mysql&gt; flush privileges;
</code></pre><p>然后用这个用户登录数据库，尝试插入数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-125.png" alt="m-125"></p>
<p>提示为只读，无权插入数据</p>
<h1 id="模拟故障"><a href="#模拟故障" class="headerlink" title="模拟故障"></a>模拟故障</h1><h2 id="模拟故障-1"><a href="#模拟故障-1" class="headerlink" title="模拟故障"></a>模拟故障</h2><p>MySQL从库数据冲突导致同步停止在slave创建一个库，然后master创建一个同名的库就会出现这种错误</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-126.png" alt="m-126"></p>
<p>解决办法一：</p>
<pre><code>stop slave;
set global sql_slave_skip_counter =1;
start slave;
</code></pre><p>1）对于普通的互联网业务，忽略问题不是很大，当然，要确定不影响公司业务的前题下</p>
<p>2）企业场景解决主从同步，主从不一致对当前业务更重要，然后如果主从数据一致也很重要，在找个时间恢复一下这个从库。</p>
<p>这样slave就会和master去同步，主要关键点：</p>
<pre><code>Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Seconds_Behind_Master: 0   #0表示已经同步状态
</code></pre><p>提示：set global sql_slave_skip_counter =n;  #取值&gt;0忽略执行N个更新。</p>
<p>方法二：根据错误号跳过指定的错误</p>
<pre><code>slave-skip-errors = 1032,1062,1007   #一般由于入库重复导致的失败就可以忽略
</code></pre><p>对于错误代码，应使用slave服务器错误日志中错误消息提供的编码和show slave status的输出。也可以使用不推荐的all值忽略所有错误消息，不考虑所发生的错误。无需而言，如果使用该值，我们不能保证数据的完整性。在这种情况下，如果slave服务器的数据与master服务器上的不相近请不要<br>抱怨，已经警告过你了</p>
<p>附：<a href="https://blog.csdn.net/aidenliu/article/details/5925604" target="_blank" rel="external">mysql错误代码大全</a></p>
<h2 id="让MySQL从库记录binlog方法"><a href="#让MySQL从库记录binlog方法" class="headerlink" title="让MySQL从库记录binlog方法"></a>让MySQL从库记录binlog方法</h2><p>需要记录binlog的情况</p>
<p>1、当前从库还要作为其他从库的主库</p>
<p>2、把从库作为备份服务器时需要开启binlog</p>
<p>在从库的my.cnf中加入如下参数</p>
<pre><code>log-slave-updates
log-bin=mysql-bin
expire_logs_days = 7
</code></pre><p>应用场景：级联复制或从库做数据备份。A–&gt;B–&gt;C，B服务器要开启记录binlog日志功能</p>
<h2 id="主多从宕机从库切换主继续和从同步过程详解"><a href="#主多从宕机从库切换主继续和从同步过程详解" class="headerlink" title="主多从宕机从库切换主继续和从同步过程详解"></a>主多从宕机从库切换主继续和从同步过程详解</h2><h3 id="看两个线程的更新状态"><a href="#看两个线程的更新状态" class="headerlink" title="看两个线程的更新状态"></a>看两个线程的更新状态</h3><p>登陆从库show processlist\G</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-127.png" alt="m-127"></p>
<p>登陆从库31,32分别查看：</p>
<pre><code>cat /application/mysql/data/master.info
</code></pre><p>确保更新完毕，看看那个从库那个最快，经过测试没有延迟的情况POS差距很小，甚至是一致的</p>
<h3 id="授权同步用户和主库一样"><a href="#授权同步用户和主库一样" class="headerlink" title="授权同步用户和主库一样"></a>授权同步用户和主库一样</h3><p>1）确保所有relay log全部更新完毕</p>
<p>在每个从库执行stop slave io_thread; show processlist;<br>直到看到Has read all relay log;表示从库更新都执行完毕；</p>
<p>2）登陆要提升权限的从库</p>
<pre><code>stop slave;
retset master;
quit;
</code></pre><p>3）进到数据库数据目录</p>
<p>删除master.info relay-log.info</p>
<pre><code>cd /application/mysql/data
rm -f master.info relay-log.info
</code></pre><p>检查授权表，read-only等参数</p>
<p>4）提升从库为主库</p>
<pre><code>vi /etc/my.cnf
</code></pre><p>开启：</p>
<pre><code>log-bin = mysql-bin
</code></pre><p>如果存在log-slave-updates，read-only等一并注释</p>
<p>重启数据库<br>    /etc/init.d/mysqld restart</p>
<p>到此为止，提升主库完毕</p>
<p>5）如果主库服务器没有宕，需要去主库拉取binlog补全提升主库的从库</p>
<p>6）其他从库操作</p>
<p>已检查（同步user rep均存在）</p>
<p>登陆从库</p>
<pre><code>stop slave;
change master to master_host = &apos;192.168.0.31&apos;;   #如果不同步，就指定位置点
start slave；
show slave status\G
</code></pre><p>主库宕机切换到此完成</p>
<p>7）修理损坏的主库，完成后作从库使用或者切换</p>
<p>现在是主库意外宕机，假如我们又计划切换。怎么做？</p>
<p>a、主库锁表。</p>
<p>b、登陆所有的库查看同步状态，是否完成。</p>
<p>其他与前面的一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;h2 id=&quot;mysql主从同步配置步骤&quot;&gt;&lt;a href=&quot;#mysql主从同步配置步骤&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（五）：MySQL主从复制</title>
    <link href="http://yjscloud.site/2018/04/27/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://yjscloud.site/2018/04/27/MySQL系列（五）：MySQL主从复制/</id>
    <published>2018-04-27T10:51:07.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql主从复制介绍"><a href="#mysql主从复制介绍" class="headerlink" title="mysql主从复制介绍"></a>mysql主从复制介绍</h1><p>mysql支持单向、双向、链式级联、实时、异步复制。复制过程中，一台服务器充当主服务器（master），而一个或多个其他的服务器充当从服务器（slave）。复制可以是单向：M==&gt;S，也可以是双向M&lt;==&gt;M，当然也可以多M环状同步等。如果设置了链式级联复制，那么，从（slave）服务器本身除了充当从服务器外，也会同时充当其下面从服务器的主服务器。链式级联复制类似A–&gt;B–&gt;C–&gt;D的复制形式。</p>
<p>1）单向主从同步逻辑图：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-101.png" alt="m-101"></p>
<p>2）双向主主同步逻辑图：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-102.png" alt="m-102"></p>
<p>3）线性级联单向双主同步逻辑图：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-103.png" alt="m-103"></p>
<p>4）环状级联单向多主同步逻辑图：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-104.png" alt="m-104"></p>
<p>5）环状级联单向多主多从同步逻辑图：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-105.png" alt="m-105"></p>
<p>在当前的生产工作中，大多数应用的MySQL主从同步都是异步的复制方式，即不是严格实时的数据同步。</p>
<p>实时和异步：</p>
<p>当配置好主从复制后，所有对数据库内容的更新就必须在主服务器上进行，以避免用户对主服务器上数据库内容的更新与对从服务器上数据库内容的更新不一致而导致发生冲突。<br>那么，为什么所有的更新都要在主服务器上进行呢？我们又如何确保用户在主服务器上更新呢？</p>
<p>第一种防止数据写入库的方法：</p>
<p>生产环境中一般会采用忽略授权表方式的同步，然后对从服务器（slave）上的用户仅授权select读权限。不同步mysql库，这样我们就保证主库和从库相同的用户可以授权不同的权限。</p>
<p>第二种防止数据写入从库的方法：</p>
<p>除了上面再从库仅做select的授权外，还可以在slave服务器启动选项增加参数或在my.cnf配置文件中间read-only参数来确保从库只读，当然授权用户read-only从参数二者同时操作效果更佳，这也是我们生产环境中使用的方案。read-only参数可以让slave服务器只允许来自slave服务器线程或具体super权限用户的更新。可以确保slave服务器不接受来自普通用户的更新，slave服务器启动选项增加–read-only也是同样功能</p>
<h1 id="mysql主从复制的应用场景"><a href="#mysql主从复制的应用场景" class="headerlink" title="mysql主从复制的应用场景"></a>mysql主从复制的应用场景</h1><p>mysql主从复制有利于数据库架构的健壮性、提升访问速度和易于维护管理</p>
<p>1）主从服务器互为备份</p>
<p>主服务器架构的设置，可以大大的加强数据库架构健壮性，例如：当主服务器出现问题时，我们可以人工或自动切换到从服务器继续提供服务。这类似我们的nfs服务器存储数据通过inotify+rsync同步到备份的nfs非常类似，只不过mysql的同步方案，是其自带的工具。非人为的硬件，服务故障，对于人为的执行drop,delete无能为力。</p>
<p>2）主从服务器读写分离分担网站压力</p>
<p>主从服务器架构可以通过程序（php,java）或者代理软件（mysql-proxy,amoeba）对用户（客户端）的请求实现读写分离，即通过在从服务器上仅仅处理用户的select查询请求，降低用户查询响应时间及读写同时在主服务器带来的压力，对于更新的数据（update,insert,delete）乃然交给主服务器处理，确保主服务器和从服务器保持实时同步。如果网站是以非更新（以浏览为主）为业务为主的业务，如blog,www首页展示等业务，查询请求比较多，这是从服务器的读写分离负载均衡策略就很有效了，这就是传说中的读写分离数据库结构。</p>
<h1 id="mysql主从复制原理过程"><a href="#mysql主从复制原理过程" class="headerlink" title="mysql主从复制原理过程"></a>mysql主从复制原理过程</h1><p>简单描述下mysql replication的复制过程</p>
<p>1）slave服务器上执行start slave，开启主从复制开关。</p>
<p>2）此时，slave服务器的IO线程会通过在master上授权的复制用户权限请求连接master服务器，并请求从指定binlog日志文件的指定位置（日志文件名和位置就是在配置主从复制服务时执行change master命令时指定的）之后binlog日志内容；</p>
<p>3）master服务器接收到来自slave服务器的IO线程的请求后，master服务器上负责复制的IO线程根据slave服务器的IO线程请求的信息读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给slave端的IO线程。返回的信息中除了binlog日志内容外，还有本次返回日志内容后在master服务器端的新的binlog文件名称以及在binlog中的下一个指定更新位置；</p>
<p>4）当slave服务器的IO线程获取到来自master服务器上IO线程发送日志内容及日志文件及位置点后，将binlog日志内容依次写入slave端自身的relay log（即中继日志）文件（mysql-relay-bin.xxxxxx）的最末端，并将新的binlog文件名和位置记录到master-info文件中，以便下一次读取master端新binlog日志是能够告诉master服务器需要从新binglog日志的那个文件那个位置开始请求新的binlog日志内容。</p>
<p>5）slave服务器端的SQL线程会实时的检测本地relay log中新增加的日志内容，然后及时把log文件中的内容解析成在master端曾经执行的sql语句的内容，并在自身slave服务器上按语句的顺序执行应用这些sql语句，应用完毕后清理应用过的日志。</p>
<p>6）经过了上面的过程，就可以确保在master端和slave端执行了同样的sql语句，当复制状态正常的情况下，master端和slave端的数据完全一样的，mysql的同步机制是有一些特殊的情况的，具体请参考官方的说明。</p>
<p>注意：</p>
<p>1、同步的时候从库有两个线程来完成（IO、SQL），主库有一个线程来完成（IO）</p>
<p>2、要在从库上配置连接主库的ip，用户名，账号，密码，连接的位置已经host点</p>
<p>3、在开启开关之前确保主从数据是一致的</p>
<p>4、在开关之前在主库上建立专门给从库同步的账号</p>
<p>5、主库要打开binlog开关，否则无法实现同步</p>
<p>6、从库打开开关的过程实际上就是让两个线程工作的过程</p>
<h1 id="复制准备"><a href="#复制准备" class="headerlink" title="复制准备"></a>复制准备</h1><p>1）定义服务器角色</p>
<p>主库（mysql master）：[ip为192.168.0.30，端口为：3306]</p>
<p>从库（mysql slave）：[ip为192.168.0.31，端口为：3307]</p>
<p>提示：1、一般常规做主从复制，主从服务器多数在不同的机器上，并且监听的端口均为默认的3306。我的实验环境是克隆的虚拟机，相同端口会报错，所以我用了不同的端口。</p>
<p>2）数据库读法的约定</p>
<p>主库，也可称为master</p>
<p>从库，也可为slave</p>
<h1 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h1><p>首先打开binlog日志的功能，执行vi /etc/my.cnf配置文件，按如下两个参数内容修改：</p>
<pre><code>[mysqld]
server-id = 1
log-bin = mysql-bin
</code></pre><p>提示：</p>
<p>1、上面两个参数要放在my.cnf中的[mysqld]模块下，否则会出错。</p>
<p>2、server-id的值使用服务器ip地址的最后8位如19，目的是避免不同机器或实例ID重复（不适合多实例）。</p>
<p>3、要先在my.cnf配置文件中查找相关参数，并按要求修改。不存在时添加参数，切记参数不能重复。</p>
<p>4、修改my.cnf配置后需要重启数据库</p>
<p>检查配置后的结果：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-106.png" alt="m-106"></p>
<p>检查binlog记录</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-107.png" alt="m-107"></p>
<h2 id="建立用于同步的账号rep"><a href="#建立用于同步的账号rep" class="headerlink" title="建立用于同步的账号rep"></a>建立用于同步的账号rep</h2><p>登陆master主数据库，建立用于主从复制的账号rep:</p>
<pre><code>mysql&gt; grant replication slave on *.* to &apos;rep&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud123&apos;;
mysql&gt; flush privileges;

# replication slave 为mysql同步的必须权限，此处不要授权all.
# *.*表现所有库所有表，可以指定具体的库和表进行复制。
# &apos;rep&apos;@&apos;192.168.0.%&apos; rep为同步账号。192.168.0.%为授权主机网段，使用了%表示允许整个192.168.0.0网段一rep用户访问。
# identified by &apos;yjscloud123&apos;; yjscloud为密码，实际环境时复杂一点为好
</code></pre><h2 id="对数据库锁表只读（当前窗口不要关掉）"><a href="#对数据库锁表只读（当前窗口不要关掉）" class="headerlink" title="对数据库锁表只读（当前窗口不要关掉）"></a>对数据库锁表只读（当前窗口不要关掉）</h2><p>备份前锁表防止有新的数据写入</p>
<pre><code>mysql&gt; flush table with read lock;
</code></pre><p>提示：这个锁表命令的时间，在不同的引擎的情况，会受下面参数的控制，锁表时，如果超过设置时间不操作会自动解锁。</p>
<p>默认情况下的时长为：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-108.png" alt="m-108"></p>
<h2 id="查看主库状态"><a href="#查看主库状态" class="headerlink" title="查看主库状态"></a>查看主库状态</h2><p>查看备份点：查看主库状态，即当前binlog日志文件名和二进制binlog日志偏移量</p>
<pre><code>show master status; #命令显示的信息要记录在案，后面的从库复制时是从这个位置开始的
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-109.png" alt="m-109"></p>
<h2 id="导出数据库数据"><a href="#导出数据库数据" class="headerlink" title="导出数据库数据"></a>导出数据库数据</h2><p>打开新窗口，导出数据库数据，如果数据量很大（100G+），并且允许停机，可以停库直接打包数据文件迁移</p>
<pre><code>mysqldump -uroot -pyjscloud -A -B --events|gzip &gt;/opt/rep_bak.$(date +%F).sql.gz
</code></pre><p>注意-A 表示备份所有库。-B表示增加use DB和drop等（导库时会直接覆盖原有的）</p>
<p>导库后，解锁主库，恢复可写；</p>
<pre><code>mysql&gt;unlock tables;
</code></pre><h2 id="把主库导出的mysql数据迁移到从库"><a href="#把主库导出的mysql数据迁移到从库" class="headerlink" title="把主库导出的mysql数据迁移到从库"></a>把主库导出的mysql数据迁移到从库</h2><p>这步常用命令有scp,rsync等。操作这里不再略去</p>
<h1 id="从库上执行操作"><a href="#从库上执行操作" class="headerlink" title="从库上执行操作"></a>从库上执行操作</h1><h2 id="设置server-id值并关闭参数"><a href="#设置server-id值并关闭参数" class="headerlink" title="设置server-id值并关闭参数"></a>设置server-id值并关闭参数</h2><p>数据库的sever-id一般在LAN内是唯一的，这里的server-id要和主库及其他从库不同，注释掉从库的binlog参数配置。</p>
<p>执行vi /etc/my.cnf编辑my.cnf配置文件，按如下两个参数内容修改：</p>
<pre><code>[mysqld]
server-id = 3
#log-bin= mysql-bin
</code></pre><p>1、上面两个参数要放在my.cnf中的[mysqld]模块下，否则会出错。</p>
<p>2、server-id的值使用服务器ip地址的最后8位如19，目的是避免不同机器或实例ID重复（不适合多<br>实例）。</p>
<p>3、要先在my.cnf配置文件中查找相关参数，并按要求修改。不存在时添加参数，切记参数不能重复。</p>
<p>4、修改my.cnf配置后需要重启数据库</p>
<p>有两种情况需要打开log-bin，记录数据库更新的sql语句：</p>
<p>a、级联同步A–&gt;B–&gt;C那中间的B就要开启log-bin</p>
<p>b、在从库做数据库备份，数据库备份必须要有备份和binlog日志，才是完整的备份</p>
<p>检查配置后的结果</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-110.png" alt="m-110"></p>
<p>重启从数据库<br>/etc/init.d/mysqld restart</p>
<h2 id="还原主库导出的数据到从库"><a href="#还原主库导出的数据到从库" class="headerlink" title="还原主库导出的数据到从库"></a>还原主库导出的数据到从库</h2><pre><code>[root@slave-1 opt]# gzip -d rep_bak.2018-4-23.sql.gz   #解压目标数据库备份
[root@slave-1 opt]# mysql -uroot -pyjscloud &lt;rep_bak.2018-4-23.sql
</code></pre><h2 id="登陆从库配置同步参数"><a href="#登陆从库配置同步参数" class="headerlink" title="登陆从库配置同步参数"></a>登陆从库配置同步参数</h2><pre><code>mysql -uroot -pyjscloud

CHANGE MASTER TO
MASTER_HOST=&apos;192.168.0.30&apos;,     # 这是主库的ip
MASTER_PORT=3306,                  #这里是主库的端口，从库端口可以和主库不同
MASTER_USER=&apos;rep&apos;,                    # 这里是主库上建立的用于复制的用户rep
MASTER_PASSWORD=&apos;yjscloud123&apos;,     #这里是rep的密码
MASTER_LOG_FILE=&apos;mysql-bin.000005&apos;,     #这里是show master stauts时看到的二进制日志文件名称，注意不能多空格
MASTER_LOG_POS=338;         # 这里是show master status时看到的查看到的二进制日志偏移量，注意不能多空格
</code></pre><p>上述操作原理实际是把用户密码等信息写入从库的master.info</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-111.png" alt="m-111"></p>
<h2 id="启动从库同步开关"><a href="#启动从库同步开关" class="headerlink" title="启动从库同步开关"></a>启动从库同步开关</h2><p>启动从库同步开关，并查看同步状态</p>
<pre><code>mysql&gt; start slave;
</code></pre><p>查看从库状态</p>
<pre><code>mysql&gt; show slave status\G
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-112.png" alt="m-112"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-113.png" alt="m-113"></p>
<p>注释：</p>
<pre><code>Slave_IO_Running: Yes   #负责从库去主库读取BINLOG日志，并写入从库的中继日志中
Slave_SQL_Running：Yes   #负责读取并执行中继日志中的BINLOG，转换SQL语句应用到数据库
</code></pre><h1 id="测试复制结果"><a href="#测试复制结果" class="headerlink" title="测试复制结果"></a>测试复制结果</h1><p>在master上操作：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-114.png" alt="m-114"></p>
<p>在slave上查看同步结果</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-115.png" alt="m-115"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql主从复制介绍&quot;&gt;&lt;a href=&quot;#mysql主从复制介绍&quot; class=&quot;headerlink&quot; title=&quot;mysql主从复制介绍&quot;&gt;&lt;/a&gt;mysql主从复制介绍&lt;/h1&gt;&lt;p&gt;mysql支持单向、双向、链式级联、实时、异步复制。复制过程中，一台
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（四）：MySQL增量备份及数据恢复</title>
    <link href="http://yjscloud.site/2018/04/26/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AMySQL%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    <id>http://yjscloud.site/2018/04/26/MySQL系列（四）：MySQL增量备份及数据恢复/</id>
    <published>2018-04-26T07:31:33.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据库的备份"><a href="#MySQL数据库的备份" class="headerlink" title="MySQL数据库的备份"></a>MySQL数据库的备份</h1><h2 id="备份单个数据库练习多种参数使用"><a href="#备份单个数据库练习多种参数使用" class="headerlink" title="备份单个数据库练习多种参数使用"></a>备份单个数据库练习多种参数使用</h2><p>mysql数据库自带了一个很好用的备份命令，就是mysqldump，它的基本使用如下：</p>
<p>语法：</p>
<pre><code>mysqldump -u 用户名 -p 数据库名&gt; 备份的文件名
</code></pre><p>例1：备份名字为test2的库</p>
<p>1）查看备份前的数据</p>
<pre><code>mysql -uroot -pyjscloud -e &apos;use test;show tables;select * from student;&apos;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-77.png" alt="m-77"></p>
<p>2）执行备份命令 </p>
<pre><code>[root@mysql-1 ~]# mysqldump -uroot -pyjscloud test &gt;/opt/mysql_bak.sql
</code></pre><p>3）检查备份的结果</p>
<pre><code>egrep -v &quot;#|\*|--|^$&quot; /opt/mysql_bak.sql
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-78.png" alt="m-78"></p>
<p>例2：备份时加-B参数</p>
<pre><code>[root@mysql-1 ~]# mysqldump -uroot -pyjscloud -B test &gt;/opt/mysql_bak_B.sql
</code></pre><p>和前面备份的文件对比，看看-B参数的作用</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-79.png" alt="m-79"><br>提示：直观看，加-B参数的作用是增加创建数据库和连接数据库命令了，即如下两条语句：</p>
<pre><code>CREATE DATABASE /*!32312 IF NOT EXISTS*/ `test` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `test`;
</code></pre><p>利用上述加-B的备份进行恢复测试：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-80.png" alt="m-80"></p>
<p>例3：优化备份文件大小减少输出注释（debug调试）</p>
<p>利用mysqldump的–compact参数优化下备份结果</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-81.png" alt="m-81"><br>略去输出</p>
<p>带–compact参数备份    </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-82.png" alt="m-82"></p>
<p>–compact参数说明（测试是使用的比较多，也可以优化输出内容的大小，让容量更少，适合调试）：<br>参数说明：该选项使得输出内容更简洁，不包括默认选项中各种注释，有如下几个参数的功能：<br>–skip-add-drop-table –no-set-name –skip-disable-keys –skip-add-locks</p>
<p>例4：指定压缩命令压缩备份的mysql数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-83.png" alt="m-83"></p>
<p>压缩效率将近3倍。通过以上例子可以得出结论</p>
<p>1）导出数据用-B参数</p>
<p>2）用gzip对备份的数据压缩</p>
<h2 id="mysqldump的工作原理"><a href="#mysqldump的工作原理" class="headerlink" title="mysqldump的工作原理"></a>mysqldump的工作原理</h2><p>利用mysqldump命令备份数据库的过程，实际上就是把数据从mysql库里以逻辑的sql语句的形式直接输出或者生产备份的文件的过程。备份的数据过滤注释，都是sql语句，结果如下：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-84.png" alt="m-84"></p>
<h2 id="备份多个库及多个参数"><a href="#备份多个库及多个参数" class="headerlink" title="备份多个库及多个参数"></a>备份多个库及多个参数</h2><p>1）操作结果</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-85.png" alt="m-85"></p>
<p>2）-B参数说明</p>
<p>提示：-B参数是关键，表示接多个库，并且增加use db,和create database db的信息（生产环境常用）</p>
<p>参数说明：改参数用于导出若干个数据库，在备份结果中加入USE db_name 和CRETAE DATABASE ‘db_name’ -B后的参数都将被作为数据库名。该参数比较常用。当-B后的数据库列全时同-A参数</p>
<h2 id="如何做分库备份？"><a href="#如何做分库备份？" class="headerlink" title="如何做分库备份？"></a>如何做分库备份？</h2><p>分库备份实际上就是执行一个备份语句备份一个库，如果数据库里有多个库，就执行多条相同的备份单个库的备份语句就可以备份多个库了，注意每个库都可以用对应备份的库作为库名，结尾加.sql。备份多个库的命令如下：<br>分库备份：</p>
<pre><code>mysql -uroot -pyjscloud -e &apos;show databases;&apos;|grep -Evi &apos;database|infor|perfor&apos;|sed -r &apos;s#^([a-z].*$)#mysqldump -uroot -pyjscloud --events -B \1|gzip &gt;/opt/bak/\1.sql.gz#g&apos;|bash
</code></pre><h2 id="备份单个表"><a href="#备份单个表" class="headerlink" title="备份单个表"></a>备份单个表</h2><p>语法：</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 表名&gt;备份的文件名
mysqldump -u root -p test student&gt;/opt/table1.sql
</code></pre><p>执行结果：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-86.png" alt="m-86"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-87.png" alt="m-87"></p>
<h2 id="备份多个表"><a href="#备份多个表" class="headerlink" title="备份多个表"></a>备份多个表</h2><p>语法：</p>
<pre><code>mysqldump -u 用户名 -p 数据库名 表名1 表名2&gt;备份的文件名
</code></pre><p>操作结果：</p>
<pre><code>[root@mysql-1 opt]# mysqldump -uroot -pyjscloud test course &gt;/opt/two_tables.sql
</code></pre><p>一个库里有大有小的表，有时可能需要恢复某一个小表，上述的多表备份文件很难拆开，就会像没有分库那样导致恢复某一个小表很麻烦。那又如何进行分表备份呢？如下和分库是的思想一样，每执行一条语句备份一个表，生产不同的数据文件即可，</p>
<pre><code>mysqldump -uroot -pyjscloud test student &gt; test_student.sql
mysqldump -uroot -pyjscloud test course &gt; test_course.sql
</code></pre><p>当然这种做法是很土的</p>
<h2 id="备份数据库表结构（不包含数据）"><a href="#备份数据库表结构（不包含数据）" class="headerlink" title="备份数据库表结构（不包含数据）"></a>备份数据库表结构（不包含数据）</h2><p>利用mysqldump -d参数只备份表的结构，例：备份test库的所有表的结构</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-88.png" alt="m-88"></p>
<p>如果只希望导出数据则用-t参数</p>
<h2 id="mysqldump的关键参数说明"><a href="#mysqldump的关键参数说明" class="headerlink" title="mysqldump的关键参数说明"></a>mysqldump的关键参数说明</h2><h3 id="关键参数：mysqldump-–help"><a href="#关键参数：mysqldump-–help" class="headerlink" title="关键参数：mysqldump –help"></a>关键参数：mysqldump –help</h3><p>-A：导出全部数据库</p>
<pre><code>--all-databases Dump all the databases. This will be same as --databases with all databases selected.
</code></pre><p>-Y： 导出全部表空间</p>
<pre><code>--all-tablespaces Dump all the tablespaces.
</code></pre><p>-y：不导出任何表空间信息</p>
<pre><code>--no-tablespaces Do not dump any tablespace information.
</code></pre><p>–add-drop-database：每个数据库创建之前添加drop数据库语句</p>
<pre><code>Add a &apos;DROP DATABASE&apos; before each create.
</code></pre><p>–add-drop-table：每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用–skip-add-drop-table取消选项)</p>
<pre><code>Add a &apos;drop table&apos; before each create. 
</code></pre><p>–add-locks：在每个表导出之前增加LOCK TABLES并且之后UNLOCK  TABLE。(默认为打开状态，使用–skip-add-locks取消选项)</p>
<pre><code>Add locks around insert statements.   
</code></pre><p>–allow-keywords：允许创建是关键词的列名字。</p>
<pre><code>Allow creation of column names that are keywords.
</code></pre><p>–character-sets-dir=name：字符集文件的目录</p>
<pre><code>Directory where character sets are.
</code></pre><p>-i：附加注释信息。默认为打开，可以用–skip-comments取消 </p>
<pre><code>--comments Write additional information.
</code></pre><p>–compatible=name：导出的数据将和其它数据库或旧版本的MySQL 相兼容。值可以为ansi、mysql323、mysql40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_tables_options、no_field_options等。要使用几个值，用逗号将它们隔开。它并不保证能完全兼容，而是尽量兼容。</p>
<pre><code>Change the dump to be compatible with a given mode. By default tables are dumped in a format optimized for MySQL. Legal modes are: ansi, mysql323, mysql40, postgresql, oracle, mssql, db2, maxdb, no_key_options, no_table_options, no_field_options. One can use several modes separated by commas. Note: Requires MySQL server version 4.1.0 or higher. This option is ignored with earlier server versions.
</code></pre><p>–compact：导出更少的输出信息(用于调试)。去掉注释和头尾等结构。可以使用选项：–skip-add-drop-table  –skip-add-locks –skip-comments –skip-disable-keys</p>
<pre><code>Give less verbose output (useful for debugging). Disables structure comments and header/footer constructs.  Enables options --skip-add-drop-table --no-set-names --skip-disable-keys --skip-add-locks
</code></pre><p>-c：使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。</p>
<pre><code>--complete-insert Use complete insert statements.
</code></pre><p>-C：在客户端和服务器之间启用压缩传递所有信息 </p>
<pre><code>--compress Use compression in server/client protocol.
</code></pre><p>–create-options：在CREATE TABLE语句中包括所有MySQL特性选项。(默认为打开状态)</p>
<pre><code>Include all MySQL specific create options.
</code></pre><p>-B：导出数据库。参数后面所有名字参量都被看作数据库名。</p>
<pre><code>--databases To dump several databases. Note the difference in usage; In this case no tables are given. All name arguments are regarded as databasenames. &apos;USE db_name;&apos; will be included in the output.
</code></pre><p>-#：输出debug信息，用于调试</p>
<pre><code>--debug[=#] This is a non-debug version. Catch this and exit
</code></pre><p>–debug-check：检查内存和打开文件使用说明并退出。</p>
<pre><code>Check memory and open file usage at exit.
</code></pre><p>–debug-info：输出调试信息并退出</p>
<pre><code>Print some debug info at exit.
</code></pre><p>–default-character-set=name：设置默认字符集</p>
<pre><code>Set the default character set.
</code></pre><p>–delayed-insert：采用延时插入方式（INSERT DELAYED）导出数据</p>
<pre><code>Insert rows with INSERT DELAYED;
</code></pre><p>–delete-master-logs：master备份后删除日志. 这个参数将自动激活–master-data。</p>
<pre><code>Delete logs on master after backup. This automatically enables --master-data.
</code></pre><p>-K：对于每个表，用/*!40000 ALTER TABLE tbl_name DISABLE KEYS */;和/*!40000 ALTER TABLE tbl_name ENABLE KEYS */;语句引用INSERT语句。这样可以更快地导入dump出来的文件，因为它是在插入所有行后创建索引的。该选项只适合MyISAM表，默认为打开状态。</p>
<pre><code>--disable-keys  &apos;/*!40000 ALTER TABLE tb_name DISABLE KEYS */; and &apos;/*!40000 ALTER TABLE tb_name ENABLE KEYS */; will be put in the output.
</code></pre><p>-E：导出事件。</p>
<pre><code>--events Dump events.
</code></pre><p>-e：使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用–skip-extended-insert取消选项。</p>
<pre><code>--extended-insert Allows utilization of the new, much faster INSERT syntax.
</code></pre><p>–fields-terminated-by=name：导出文件中忽略给定字段。与–tab选项一起使用，不能用于–databases和–all-databases选项</p>
<pre><code>Fields in the textfile are terminated by ...
</code></pre><p>–fields-enclosed-by=name：输出文件中的各个字段用给定字符包裹。与–tab选项一起使用，不能用于–databases和–all-databases选项</p>
<pre><code>Fields in the importfile are enclosed by ...
</code></pre><p>–fields-optionally-enclosed-by=name：输出文件中的各个字段用给定字符选择性包裹。与–tab选项一起使用，不能用于–databases和–all-databases选项</p>
<pre><code>Fields in the i.file are opt. enclosed by ...
</code></pre><p>–fields-escaped-by=name：输出文件中的各个字段忽略给定字符。与–tab选项一起使用，不能用于–databases和–all-databases选项</p>
<pre><code>Fields in the i.file are escaped by ...
</code></pre><p>-F：开始导出之前刷新日志。</p>
<pre><code>--flush-logs  Flush logs file in server before starting dump. Note that if you dump many databases at once (using the option --databases= or --all-databases), the logs will be flushed for each database dumped. The exception is when using --lock-all-tables or --master-data: in this case the logs will be flushed only once, corresponding to the moment all tables are locked. So if you want your dump and the log flush to happen at the same exact moment you should use --lock-all-tables or --master-data with --flush-logs
</code></pre><p>–flush-privileges：在导出mysql数据库之后，发出一条FLUSH  PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。</p>
<pre><code>Emit a FLUSH PRIVILEGES statement after dumping the mysql database.  This option should be used any time the dump contains the mysql database and any other database that depends on the data in the mysql database for proper restore.
</code></pre><p>-f：在导出过程中忽略出现的SQL错误。</p>
<pre><code>--force Continue even if we get an sql-error.
</code></pre><p>-?：显示帮助信息并退出。</p>
<pre><code>--help Display this help message and exit.
</code></pre><p>–hex-blob：使用十六进制格式导出二进制字符串字段。如果有二进制数据就必须使用该选项。影响到的字段类型有BINARY、VARBINARY、BLOB。</p>
<pre><code>Dump binary strings (BINARY, VARBINARY, BLOB) in hexadecimal format.
</code></pre><p>-h：需要导出的主机信息</p>
<pre><code>--host=name  Connect to host.
</code></pre><p>–ignore-table=name：不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名。例如：–ignore-table=database.table1 –ignore-table=database.table2 ……</p>
<pre><code>Do not dump the specified table. To specify more than one table to ignore, use the directive multiple times, once for each table.  Each table must be specified with both database and table names, e.g. --ignore-table=database.table
</code></pre><p>–insert-ignore：在插入行时使用INSERT IGNORE语句.</p>
<pre><code>Insert rows with INSERT IGNORE.
</code></pre><p>–lines-terminated-by=name：输出文件的每行用给定字符串划分。与–tab选项一起使用，不能用于–databases和–all-databases选项。</p>
<pre><code>Lines in the i.file are terminated by ...
</code></pre><p>-x：提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭–single-transaction 和–lock-tables 选项。</p>
<pre><code>--lock-all-tables Locks all tables across all databases. This is achieved by taking a global read lock for the duration of the whole dump. Automatically turns --single-transaction and --lock-tables off.
</code></pre><p>-l：开始导出前，锁定所有表。用READ  LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，–single-transaction是一个更好的选择，因为它根本不需要锁定表。请注意当导出多个数据库时，–lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。</p>
<pre><code>--lock-tables Lock all tables for read.
</code></pre><p>–log-error=name：附加警告和错误信息到给定文件</p>
<pre><code>Append warnings and errors to given file.
</code></pre><p>–no-autocommit：使用autocommit/commit 语句包裹表</p>
<pre><code>Wrap tables with autocommit/commit statements.
</code></pre><p>-n：只导出数据，而不添加CREATE DATABASE 语句</p>
<pre><code>--no-create-db  &apos;CREATE DATABASE /*!32312 IF NOT EXISTS*/ db_name;&apos; will not be put in the output. The above line will be added otherwise, if --databases or --all-databases option was given.}.
</code></pre><p> -t：只导出数据，而不添加CREATE TABLE 语句</p>
<pre><code>--no-create-info Don&apos;t write table creation info.
</code></pre><p>-d：不导出任何数据，只导出数据库表结构</p>
<pre><code>--no-data No row information.
</code></pre><p>–opt：等同于–add-drop-table,  –add-locks, –create-options, –quick, –extended-insert, –lock-tables,  –set-charset, –disable-keys 该选项默认开启,  可以用–skip-opt禁用.</p>
<pre><code>Same as --add-drop-table, --add-locks, --create-options, --quick, --extended-insert, --lock-tables, --set-charset, and --disable-keys. Enabled by default, disable with --skip-opt.
</code></pre><p>–order-by-primary：如果存在主键，或者第一个唯一键，对每个表的记录进行排序。在导出MyISAM表到InnoDB表时有效，但会使得导出工作花费很长时间。</p>
<pre><code>Sorts each table&apos;s rows by primary key, or first unique key, if such a key exists.  Useful when dumping a MyISAM table to be loaded into an InnoDB table, but will make the dump itself take considerably longer.
</code></pre><p>-p：连接数据库密码</p>
<pre><code>--password[=name] Password to use when connecting to server. If password is not given it&apos;s solicited on the tty.
</code></pre><p>-W：使用命名管道连接mysql(windows系统可用)</p>
<pre><code>--pipe Use named pipes to connect to server.
</code></pre><p>-P：连接数据库端口号</p>
<pre><code>--port=# Port number to use for connection.
</code></pre><p>–protocol=name：使用的连接协议，包括：tcp, socket, pipe, memory.</p>
<pre><code>The protocol of connection (tcp,socket,pipe,memory).
</code></pre><p>-q：不缓冲查询，直接导出到标准输出。默认为打开状态，使用–skip-quick取消该选项</p>
<pre><code>--quick Don&apos;t buffer query, dump directly to stdout.
</code></pre><p>-Q：使用（`）引起表和列名。默认为打开状态，使用–skip-quote-names取消该选项。</p>
<pre><code>--quote-names Quote table and column names with backticks (`).
</code></pre><p>–replace：使用REPLACE INTO 取代INSERT INTO.</p>
<pre><code>Use REPLACE INTO instead of INSERT INTO.
</code></pre><p>-r：直接输出到指定文件中。该选项应该用在使用回车换行对（\r\n）换行的系统上（例如：DOS，Windows）。该选项确保只有一行被使用。</p>
<pre><code>--result-file=name Direct output to a given file. This option should be used in MSDOS, because it prevents new line &apos;\n&apos; from being converted to &apos;\r\n&apos; (carriage return + line feed).
</code></pre><p>-R：导出存储过程以及自定义函数。</p>
<pre><code>--routines Dump stored routines (functions and procedures).
</code></pre><p>–set-charset：添加’SET NAMES  default_character_set’到输出文件。默认为打开状态，使用–skip-set-charset关闭选项。</p>
<pre><code>Add &apos;SET NAMES default_character_set&apos; to the output. Enabled by default; suppress with --skip-set-charset.
</code></pre><p>-O：设置变量的值</p>
<pre><code>--set-variable=name Change the value of a variable. Please note that this option is deprecated; you can set variables directly with --variable-name=value.
</code></pre><p>–dump-date：添加DUMP时间到输出末尾</p>
<pre><code>Put a dump date to the end of the output.
</code></pre><p>–skip-opt：禁用–opt选项.</p>
<pre><code>Disable --opt. Disables --add-drop-table, --add-locks, --create-options, --quick, --extended-insert, --lock-tables, --set-charset, and --disable-keys.
</code></pre><p>-S：指定连接mysql的socket文件位置，默认路径/tmp/mysql.sock</p>
<pre><code>--socket=name Socket file to use for connection.
</code></pre><p>-T：为每个表在给定路径创建tab分割的文本文件。注意：仅仅用于mysqldump和mysqld服务器运行在相同机器上。</p>
<pre><code>--tab=name Creates tab separated textfile for each table to given path. (creates .sql and .txt files). NOTE: This only works if mysqldump is run on the same machine as the mysqld daemon.
</code></pre><p>–tables：覆盖–databases (-B)参数，指定需要导出的表名。</p>
<pre><code>Overrides option --databases (-B).
</code></pre><p>–triggers：导出触发器。该选项默认启用，用–skip-triggers禁用它。</p>
<pre><code>Dump triggers for each dumped table
</code></pre><p>–tz-utc： 在导出顶部设置时区TIME_ZONE=’+00:00’ ，以保证在不同时区导出的TIMESTAMP 数据或者数据被移动其他时区时的正确性。</p>
<pre><code>SET TIME_ZONE=&apos;+00:00&apos; at top of dump to allow dumping of TIMESTAMP data when a server has data in different time zones or data is being moved between servers with different time zones.
</code></pre><p>-u：指定连接的用户名。</p>
<pre><code>--user=name User for login if not current user.
</code></pre><p>-v：输出多种平台信息。</p>
<pre><code>--verbose Print info about the various stages.
</code></pre><p>-V：输出mysqldump版本信息并退出</p>
<pre><code>--version Output version information and exit.
</code></pre><p>-w：只转储给定的WHERE条件选择的记录。请注意如果条件包含命令解释符专用空格或字符，一定要将条件引用起来。</p>
<pre><code>--where=name Dump only selected records; QUOTES mandatory!
</code></pre><p>-X：导出XML格式.</p>
<pre><code>--xml   Dump a database as well formed XML.
</code></pre><p>–master-data：</p>
<p>  –master-data选项有3个可用值，0、1、2这三个值分别表示不同的含义</p>
<p>  此值为0：表示在使用mysqldump进行备份时，不记录对应二进制日志文件位置，将此值显示的设置为0与不使用此选项效果相同</p>
<p>  此值为1：表示在使用mysqldump进行备份时，记录二进制日志文件位置，此值为默认值，也就是说，使用–master-data与使用–master-data=1效果相同，如果将此选项的值设置为1，则会在备份文件生成对应的”CHANGE MASTER TO”，此语句中标明了备份开始时二进制日志的前缀名及其所处的位置</p>
<p>  此值为2：如果此值为2时，则会在备份文件中生成对应的”CHANGE MASTER TO”语句中添加注释（就是不生效呗），所以如果只是单纯的为备份记录二进制日志文件位置，那么将此选项设置为2即可。<br>这个参数会–lock-all-tables锁表，除非你指定了–single-transaction 这种情况下，锁表只会在dump开始的时候持续一小段时间,照理说在dump的时候，任何动作都会影响到binlog文件dump结束之后，选项会自动关闭锁表功能。简单的说，就是主从复制在做全量备份的时候，这个选项可以自动帮我们锁表和识别binlog临界文件，就不需要我们锁表，再看临界文件编号，再执行CHANGE MASTER填写binglong位置信息到从库master.info文件中了，提高了从库部署效率吧！    </p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>1）-B 指定多个库，增加建库语句和use语句</p>
<p>2）–compact 去掉注释，适合调色输出，生产不用</p>
<p>3）-A 备份所有库</p>
<p>4）-F 刷新binlog日志</p>
<p>5）–master-data 增加binlog日志文件名及对应的位置点</p>
<p>6）-x –lock-all-tables</p>
<p>7）-l –lock-tables</p>
<p>8）-d 只备份表结构</p>
<p>9）-t 只备份数据</p>
<p>10）–single-transaction 适合innodb事务数据库备份</p>
<p>innodb表在备份时，通常启用选项–single-transaction来保证备份的一致性，实际上它的工作原理是设定本次会话的隔离级别为：<br>REPEATABLE READ，以确保本次会话（dump）时，不会看到其他会话已经提交了的数据</p>
<p>myisam备份命令</p>
<pre><code>mysqldump -uroot -pyjscloud -A -B --master-data=2 -x --events|gzip &gt;/opt/all.sql.gz
</code></pre><p>innodb备份命令（推荐使用）</p>
<pre><code>mysqldump -uroot -pyjscloud -A -B --master-data=2 -x --events --single-transaction|gzip &gt;/opt/all.sql.gz
</code></pre><h1 id="MySQL数据库的恢复"><a href="#MySQL数据库的恢复" class="headerlink" title="MySQL数据库的恢复"></a>MySQL数据库的恢复</h1><h2 id="利用source命令恢复数据"><a href="#利用source命令恢复数据" class="headerlink" title="利用source命令恢复数据"></a>利用source命令恢复数据</h2><p>进入mysql数据库控制台，mysql -uroot -p 登陆后</p>
<pre><code>mysql&gt;use 数据库
</code></pre><p>然后使用source命令，后面参数为脚本文件（如这里用到的.sql）</p>
<pre><code>mysql&gt;source test_db.sql   #这个文件是系统路径，默认是登陆mysql前的系统路径
source /opt/test.sql
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-89.png" alt="m-89"><br>对于那些用gzip命令压缩的数据库文件要先解压再恢复到数据库，解压命令如下</p>
<pre><code>gzip -d [压缩的文件名]
</code></pre><h2 id="利用mysql命令恢复（标准）"><a href="#利用mysql命令恢复（标准）" class="headerlink" title="利用mysql命令恢复（标准）"></a>利用mysql命令恢复（标准）</h2><pre><code>[root@mysql-1 opt]# mysql -uroot -pyjscloud test &lt; /opt/test.sql
</code></pre><p>sql文件里面有use db这样的字样时，在导入时就有指定数据库名，否则会报错<br>如果在导出时指定了-B参数，恢复时无需指定库恢复，因为-B参数带了use test还会有create database test；而恢复时指定库就类似于use test；所以备份数据库时指定-B效果更好。</p>
<h2 id="mysql带-e参数实现非交互式对话"><a href="#mysql带-e参数实现非交互式对话" class="headerlink" title="mysql带-e参数实现非交互式对话"></a>mysql带-e参数实现非交互式对话</h2><p>1）恢复数据库</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-90.png" alt="m-90"><br>2）查看mysql状态</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-91.png" alt="m-91"><br>类似的常用命令</p>
<pre><code>show status  #查看当前会话的数据库状态信息
show global stauts;  #查看整个数据库运行状态信息，很重要，要分析并要做好监控。
showprocesslist;   #擦好看正在执行的SQL语句，看不全
show full processlist；   #查看正在执行的完整SQL语句，完整显示
set global key_buffer_size = 32777218   #不重启数据库调整数据库参数，直接生效，重启后失效。
show variables;  #查看数据库的参数信息，例如：my.cnf里参数的生效情况。
</code></pre><p>例：不重启数据库修改数据库的key_buffer参数    </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-92.png" alt="m-92"><br>这种状态下不重启就生效</p>
<p>要想重启生效要先在全局里面改，然后再修改配置文件</p>
<pre><code>vi /etc/my.cnf
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-93.png" alt="m-93">    </p>
<h1 id="mysqlbinlog的使用"><a href="#mysqlbinlog的使用" class="headerlink" title="mysqlbinlog的使用"></a>mysqlbinlog的使用</h1><p>mysqlbinlog是用来解析mysql的binlog日志</p>
<p>mysql的binlog日志是什么？</p>
<p>答：数据目录下的如下文件就是mysql的binlog日志</p>
<p>mysql-bin.000001</p>
<p>mysql-bin.000002</p>
<p>mysql-bin.000003</p>
<p>mysql-bin.000004</p>
<p>mysql的binlog日志作用是什么？</p>
<p>答：用来记录mysql内部增删改查等对mysql数据库有更新的内容记录。</p>
<h2 id="提取mysqlbinlog的几种方式"><a href="#提取mysqlbinlog的几种方式" class="headerlink" title="提取mysqlbinlog的几种方式"></a>提取mysqlbinlog的几种方式</h2><p>1）使用show binlog events方式可以获取当前以及指定binlog的日志，不适宜提取大量日志。<br>2）使用mysqlbinlog命令行提取(适宜批量提取日志)。</p>
<h2 id="演示show-binlog-events方式"><a href="#演示show-binlog-events方式" class="headerlink" title="演示show binlog events方式"></a>演示show binlog events方式</h2><p><img src="http://p924w4b7r.bkt.clouddn.com/m-94.png" alt="m-94"></p>
<p>1）只查看第一个binlog文件的内容(show binlog events)<br><img src="http://p924w4b7r.bkt.clouddn.com/m-95.png" alt="m-95"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-96.png" alt="m-96"><br>2）查看指定binlog文件的内容(show binlog events in ‘mysql-bin.000001’)</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-97.png" alt="m-97"></p>
<p>3）查看当前正在写入的binlog文件(show master status\G)<br><img src="http://p924w4b7r.bkt.clouddn.com/m-98.png" alt="m-98"><br>4）获取指定位置binlog的内容(show binlog events from)</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-99.png" alt="m-99"></p>
<h2 id="演示mysqlbinlog方式提取binlog"><a href="#演示mysqlbinlog方式提取binlog" class="headerlink" title="演示mysqlbinlog方式提取binlog"></a>演示mysqlbinlog方式提取binlog</h2><p>1）提取指定的binlog日志</p>
<pre><code>mysqlbinlog /application/mysql/data/mysql-bin.000001
mysqlbinlog /application/mysql/data/mysql-bin.000001|grep insert
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-100.png" alt="m-100"></p>
<p>2）提取指定position位置的binlog日志</p>
<pre><code>mysqlbinlog --start-position=&quot;6626&quot; --stop-position=&quot;6731&quot;  /application/mysql/data/mysql-bin.000001
</code></pre><p>3）提取指定position位置的binlog日志并输出到压缩文件 </p>
<pre><code># mysqlbinlog --start-position=&quot;6626&quot; --stop-position=&quot;6731&quot; /application/mysql/data/mysql-bin.000001 |gzip &gt;extra_01.sql.gz 
</code></pre><p>4）提取指定position位置的binlog日志导入数据库 </p>
<pre><code># mysqlbinlog --start-position=&quot;6626&quot; --stop-position=&quot;6731&quot; /application/mysql/data/mysql-bin.000001 | mysql -uroot -p 
</code></pre><p>5）提取指定开始时间的binlog并输出到日志文件 </p>
<pre><code># mysqlbinlog --start-datetime=&quot;2018-05-15 20:15:23&quot; /application/mysql/data/mysql-bin.000001 --result-file=extra02.sql 
</code></pre><p>6）提取指定位置的多个binlog日志文件 </p>
<pre><code># mysqlbinlog --start-position=&quot;6626&quot; --stop-position=&quot;6731&quot; /o/application/mysql/data/mysql-bin.000001/application/mysql/data/mysql-bin.000002|more 
</code></pre><p>7）提取指定数据库binlog并转换字符集到UTF8 </p>
<pre><code># mysqlbinlog --database=test --set-charset=utf8 /application/mysql/data/mysql-bin.000001 /application/mysql/data/mysql-bin.000002 &gt;test.sql 
</code></pre><p>8）远程提取日志，指定结束时间  </p>
<pre><code># mysqlbinlog -urobin -p -h192.168.0.40 -P3306 --stop-datetime=&quot;2018-05-15 20:30:23&quot; --read-from-remote-server mysql-bin.000001|more 
</code></pre><p>9）远程提取使用row格式的binlog日志并输出到本地文件 </p>
<pre><code># mysqlbinlog -urobin -p -P3606 -h192.168.0.41 --read-from-remote-server -vv inst3606bin.000005 &gt;row.sql
</code></pre><h2 id="获取mysqlbinlog的帮助信息-仅列出常用选项"><a href="#获取mysqlbinlog的帮助信息-仅列出常用选项" class="headerlink" title="获取mysqlbinlog的帮助信息(仅列出常用选项)"></a>获取mysqlbinlog的帮助信息(仅列出常用选项)</h2><p>-?：–help</p>
<p>   显示帮助消息并退出。</p>
<p>-d：–database=name</p>
<p>   截取指定库的binlog。</p>
<p>-f： –force-read</p>
<p>   使用该选项，如果mysqlbinlog读它不能识别的二进制日志事件，它会打印警告，忽略该事件并继续。没有该选项，如果mysqlbinlog读到此类事件则停止。</p>
<p>-h： –host=name</p>
<p>   获取给定主机上的MySQL服务器的二进制日志。</p>
<p>-l：–local-load=name</p>
<p>   为指定目录中的LOAD DATA INFILE预处理本地临时文件。</p>
<p>-o：–offset=#</p>
<p>   跳过前N个条目。</p>
<p>-p：–password[=name]</p>
<p>   当连接服务器时使用的密码。如果使用短选项形式(-p)，选项和密码之间不能有空格。<br>   如果在命令行中–password或-p选项后面没有密码值，则提示输入一个密码。</p>
<p>-P：–port=#</p>
<p>   用于连接远程服务器的TCP/IP端口号。</p>
<p>–protocol=name</p>
<p>   使用的连接协议。</p>
<p>-R：–read-from-remote-server|–read-from-remote-master=name</p>
<p>   从MySQL服务器读二进制日志。如果未给出该选项，任何连接参数选项将被忽略，即连接到本地。<br>   这些选项是–host、–password、–port、–protocol、–socket和–user。</p>
<p>-r：–result-file=name</p>
<p>   将输出指向给定的文件。</p>
<p>-s： –short-form</p>
<p>   只显示日志中包含的语句，不显示其它信息，该方式可以缩小生成sql文件的尺寸。</p>
<p>-S： –socket=name</p>
<p>   用于连接的套接字文件。</p>
<p>–start-datetime=name</p>
<p>   从二进制日志中读取等于或晚于datetime参量的事件，datetime值相对于运行mysqlbinlog的机器上的本地时区。该值格式应符合DATETIME或TIMESTAMP数据类型。例如：2004-12-25 11:25:56 ，建议使用引号标识。</p>
<p>–stop-datetime=name</p>
<p>   从二进制日志中读取小于或等于datetime的所有日志事件。关于datetime值的描述参见–start-datetime选项。</p>
<p>-j： –start-position=#</p>
<p>   从二进制日志中第1个位置等于N参量时的事件开始读。</p>
<p>–stop-position=#</p>
<p>   从二进制日志中第1个位置等于和大于N参量时的事件起停止读。</p>
<p>–server-id=#  </p>
<p>   仅仅提取指定server_id的binlog日志</p>
<p>–set-charset=name</p>
<p>   添加SET NAMES character_set到输出     </p>
<p>-t： –to-last-log</p>
<p>   在MySQL服务器中请求的二进制日志的结尾处不停止，而是继续打印直到最后一个二进制日志的结尾。如果将输出发送给同一台MySQL服务器，会导致无限循环。该选项要求–read-from-remote-server。</p>
<p>-D： –disable-log-bin</p>
<p>   禁用二进制日志。如果使用–to-last-logs选项将输出发送给同一台MySQL服务器，可以避免无限循环。该选项在崩溃恢复时也很有用，可以避免复制已经记录的语句。注释：该选项要求有SUPER权限。</p>
<p>-u：–user=name</p>
<p>   连接远程服务器时使用的MySQL用户名。</p>
<p>-v： –verbose</p>
<p>   用于输出基于row模式的binlog日志，-vv为列数据类型添加注释</p>
<p>-V： –version</p>
<p>   显示版本信息并退出     </p>
<h1 id="常用mysqladmin命令"><a href="#常用mysqladmin命令" class="headerlink" title="常用mysqladmin命令"></a>常用mysqladmin命令</h1><p>与mysql不同的是，mysqladmin是MySQL官方提供的shell命令行工具(mysql是连接工具)，其参数都需要在shell命令行上执行。mysqladmin提供了两类参数：连接参数和命令参数，连接参数用来指定连接信息，命令参数则是服务命令。</p>
<p>mysqladmin 工具的使用格式：</p>
<pre><code>mysqladmin [option] command [command option] command ......
</code></pre><p>参数选项：</p>
<p>-c number 自动运行次数统计，必须和 -i 一起使用</p>
<p>-i number 间隔多长时间重复执行</p>
<p>0）每个两秒查看一次服务器的状态，总共重复5次。</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p -i 2 -c 5 status
</code></pre><p>1）查看服务器的状况：status</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p status
</code></pre><p>2）修改root 密码：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -u root -p原密码 password &apos;newpassword&apos;
</code></pre><p>3）检查mysqlserver是否可用：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p ping
</code></pre><p>4）查询服务器的版本</p>
<pre><code>[rroot@mysql-1 ~]# mysqladmin -uroot -p version
</code></pre><p>5）查看服务器状态的当前值：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p extended-status
</code></pre><p>6）查询服务器系统变量值：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p variables
</code></pre><p>7）显示服务器所有运行的进程：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p processlist
[root@mysql-1 ~]# mysqladmin -uroot -p-i 1 processlist        //每秒刷新一次
</code></pre><p>8）创建数据库</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p create daba-test
</code></pre><p>9）显示服务器上的所有数据库</p>
<pre><code>[root@mysql-1 ~]# mysqlshow -uroot -p
</code></pre><p>10）显示数据库daba-test下有些什么表：</p>
<pre><code>[root@mysql-1 ~]# mysqlshow -uroot -p daba-test
</code></pre><p>11）统计daba-test 下数据库表列的汇总</p>
<pre><code>[root@mysql-1 ~]# mysqlshow -uroot -p daba-test -v
</code></pre><p>12）统计daba-test 下数据库表的列数和行数</p>
<pre><code>[root@mysql-1 ~]# mysqlshow -uroot -p daba-test -v -v
</code></pre><p>13）删除数据库 daba-test</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p drop daba-test
</code></pre><p>14）重载权限信息</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p reload
</code></pre><p>15）刷新所有表缓存，并关闭和打开log</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p refresh
</code></pre><p>16）使用安全模式关闭数据库</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p shutdown
</code></pre><p>17）刷新命令mysqladmin flush commands</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-hosts
[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-logs
[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-privileges
[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-status
[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-tables
[root@mysql-1 ~]# mysqladmin -u root -ptmppassword flush-threads
</code></pre><p>18）mysqladmin 执行kill 进程：</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -uroot -p processlist
[root@mysql-1 ~]# mysqladmin -uroot -p kill idnum
</code></pre><p>19）停止和启动MySQL replication on a slave server</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -u root -p stop-slave
[root@mysql-1 ~]# mysqladmin -u root -p start-slave
</code></pre><p>20）同时执行多个命令</p>
<pre><code>[root@mysql-1 ~]# mysqladmin -u root -p process status version
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL数据库的备份&quot;&gt;&lt;a href=&quot;#MySQL数据库的备份&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库的备份&quot;&gt;&lt;/a&gt;MySQL数据库的备份&lt;/h1&gt;&lt;h2 id=&quot;备份单个数据库练习多种参数使用&quot;&gt;&lt;a href=&quot;#备份
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（三）：MySQL乱码及字符集实战</title>
    <link href="http://yjscloud.site/2018/04/25/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AMySQL%E4%B9%B1%E7%A0%81%E5%8F%8A%E5%AD%97%E7%AC%A6%E9%9B%86%E5%AE%9E%E6%88%98/"/>
    <id>http://yjscloud.site/2018/04/25/MySQL系列（三）：MySQL乱码及字符集实战/</id>
    <published>2018-04-25T06:21:03.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL插入中文数据乱码问题"><a href="#MySQL插入中文数据乱码问题" class="headerlink" title="MySQL插入中文数据乱码问题"></a>MySQL插入中文数据乱码问题</h1><h2 id="MySQL数据库插入中文数据乱码"><a href="#MySQL数据库插入中文数据乱码" class="headerlink" title="MySQL数据库插入中文数据乱码"></a>MySQL数据库插入中文数据乱码</h2><p>1）MySQL中添加中文数据乱码演示</p>
<p>1、创建一个test2测试数据库并查看建表语句</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-63.png" alt="m-63"></p>
<p>我在编译安装mysql的时候已经指定了utf8为默认字符集，这里创建数据库字符集就是utf8，为了下面演示乱码问题，建表时我指定latin1为字符集</p>
<p>2、在test2库下创建一个student表，并查看表结构和建表语句。</p>
<pre><code>create table student(     
id int(4) not null auto_increment,           
name char(20) not null, 
primary key(id) 
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-64.png" alt="m-64"></p>
<p>查看表：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-65.png" alt="m-65"></p>
<p>插入数据：</p>
<pre><code>insert into student values (1,&apos;lufei&apos;),(2,&apos;suolong&apos;),(3,&apos;namei&apos;),(4,&apos;wusuopu&apos;),(5,&apos;xiangjishu&apos;);
</code></pre><p>提示：数字和英文的数据都是正常的，不会有乱码问题。</p>
<p>3、在插入一条中文数据看看</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-66.png" alt="m-66"></p>
<h2 id="MySQL命令行插入中文数据不乱码实战"><a href="#MySQL命令行插入中文数据不乱码实战" class="headerlink" title="MySQL命令行插入中文数据不乱码实战"></a>MySQL命令行插入中文数据不乱码实战</h2><p>1）查看建表语句，要特别注意表语句结尾的latin1</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-67.png" alt="m-67"></p>
<p>2）设置mysql客户端的字符集和建表字符集latin1一致</p>
<pre><code>mysql&gt; set names latin1;    #设置字符集插入数据的表的字符集，然后再插入中文语句测试。
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>3）继续插入一条中数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-68.png" alt="m-68"></p>
<p>这个就是mysql命令行插入数据确保不乱码的方法，如果是要更新的数据很多，就需要通过执行sql文件的方式更新数据了，那么，如果保证执行sql文件也不乱码呢？</p>
<h2 id="执行sql文件插入中文数据不乱码实战"><a href="#执行sql文件插入中文数据不乱码实战" class="headerlink" title="执行sql文件插入中文数据不乱码实战"></a>执行sql文件插入中文数据不乱码实战</h2><p>1）将要更新的多个sql语句放到文本文件里如test2.sql所示</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-69.png" alt="m-69"></p>
<p>这个步骤也是先执行set字符集操作，然后再执行更新语句，值不过是通过source加载文件执行的。</p>
<p>小结：DQL,DML语句之前set name系统及库表的字符集！</p>
<h2 id="通过MySQL命令加字符集参数导入数据解决乱码"><a href="#通过MySQL命令加字符集参数导入数据解决乱码" class="headerlink" title="通过MySQL命令加字符集参数导入数据解决乱码"></a>通过MySQL命令加字符集参数导入数据解决乱码</h2><p>1）把要更新的多个sql语句放入文本文件中，注意，此处语句里面不带set names latin1;</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-70.png" alt="m-70"></p>
<p>2）通过MySQL命令加上字符集参数指定latin1字符集导入test2.sql</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-71.png" alt="m-71"></p>
<h2 id="MySQL插入中文不乱码5种方法小结"><a href="#MySQL插入中文不乱码5种方法小结" class="headerlink" title="MySQL插入中文不乱码5种方法小结"></a>MySQL插入中文不乱码5种方法小结</h2><p>方法（1）：登陆mysql，先做“set names latin1;”，然后再执行更新语句或执行语句文件。</p>
<pre><code>mysql&gt; set names latin1;   
Query OK, 0 rows affected (0.00 sec)

mysql&gt; source test2.sql; 
Query OK, 1 rows affected (0.00 sec)
</code></pre><p>方法（2）：在sql文件中指定set names latin1;然后登陆mysql，通过如下命令执行。</p>
<pre><code>mysql&gt; source test2.sql; 
Query OK, 1 rows affected (0.00 sec)
</code></pre><p>方法（3）：在sql文件中指定set names latin1;然后通过mysql命令导入数据</p>
<pre><code>[root@mysql-1]# mysql -uroot -pyjscloud test2 &lt; test2.sql
[root@mysql-1]# mysql -uroot -pyjscloud test2 -e &apos;set names latin1;select * from test2.student&apos;
</code></pre><p>方法（4）：通过指定mysql命令的字符集参数实现–default-character-set=latin1 test2 &lt;test2.sql</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-72.png" alt="m-72"></p>
<p>方法（5）：在配置文件里设置客服端及服务端相关参数</p>
<p>更改my.cnf客服端模块的参数，可以实现set names latin1的效果，并且永久生效。</p>
<pre><code>[client]
default=character-set=latin1
</code></pre><p>提示：无需重启服务，退出重新登录就生效，相当与set names latin1;</p>
<p>更改服务端字符集简单的办法</p>
<p>更改my.cnf参数</p>
<pre><code>[mysqld]
default-character-set=latin1 #适合5.1以以及前版本
default-set-server=latin1  #适合5.5
</code></pre><h2 id="不乱码的思想"><a href="#不乱码的思想" class="headerlink" title="不乱码的思想"></a>不乱码的思想</h2><p>处理好：linux，客服端，服务端，库，表，程序！</p>
<p>1）linux系统</p>
<pre><code>cat /etc/locale.conf
LANG=&quot;zh_CN.utf8&quot;
</code></pre><p>2）MySQL客服端</p>
<p>临时：</p>
<pre><code>set names utf8
</code></pre><p>永久：</p>
<p>更改my.cnf客服端模块的参数，可以实现set names utf8的效果，并且永久生效。</p>
<pre><code>[client]
default-character-set=latin1
</code></pre><p>3）MySQL服务端</p>
<p>更改my.cnf参数</p>
<pre><code>[mysqld]
default-character-set=latin1 #适合5.1以以及前版本
default-set-server=latin1  #适合5.5
</code></pre><p>4）MySQL库表</p>
<pre><code>create database test3 default character set utf8 collate utf8_general_ci;

create table student(     
id int(4) not null auto_increment,           
name char(20) not null, 
primary key(id) 
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre><p>需要了解的内容:<br><a href="http://hejiajunsh.iteye.com/blog/1955696" target="_blank" rel="external">show variables与show global status;参考博客</a></p>
<h1 id="mysql数据库字符集知识"><a href="#mysql数据库字符集知识" class="headerlink" title="mysql数据库字符集知识"></a>mysql数据库字符集知识</h1><h2 id="mysql数据库字符集介绍"><a href="#mysql数据库字符集介绍" class="headerlink" title="mysql数据库字符集介绍"></a>mysql数据库字符集介绍</h2><p>简单地说，字符集就是一套文字符号及其编码、比较规则的集合，第一个计算机字符集ASC2!<br>mysql数据库字符集包括字符集（CHARCTER）和校对规则（COLLATION）两个概念，其中，字符集是用来定义mysql数据字符串的存储方式。而校对规则则是定义比较字符串的方式。在上面命令查看已建立的test2库的语句中，CHARATER SET latin1即为数据库字符集，而COLLATE latin1_swedish_ci为校对规则。</p>
<h2 id="mysql数据库常见字符集介绍"><a href="#mysql数据库常见字符集介绍" class="headerlink" title="mysql数据库常见字符集介绍"></a>mysql数据库常见字符集介绍</h2><p>在互联网环境中，使用mysql时常用的字符集有：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-73.png" alt="m-73"></p>
<h2 id="mysql如何选择合适的字符集"><a href="#mysql如何选择合适的字符集" class="headerlink" title="mysql如何选择合适的字符集"></a>mysql如何选择合适的字符集</h2><p>1）如果处理各种各样的文字，发布到不同语言国家地区，应选Unicode字符集，对<br>mysql来说就是UTF-8（每个汉字三个字节），如果应用处理英文，仅有少量汉字UTF-8更好。</p>
<p>2）如只需支持中文，并且数据量很大，性能要求也很高，可选GBK（定长每个汉字占双字节，英文也占双字节），如果需要大量运算，比较排序等，定长排序等，定长字符集，更快，性能高。</p>
<p>3）处理移动互联网业务，可能需要使用utf8mb4字符集</p>
<h2 id="查看当前mysql系统支持的字符集"><a href="#查看当前mysql系统支持的字符集" class="headerlink" title="查看当前mysql系统支持的字符集"></a>查看当前mysql系统支持的字符集</h2><p>mysql可支持多种字符集，同一台机器，库或表的不同字段都可以指定不同的字符集。<br>查看mysql支持的字符集</p>
<pre><code>mysql -uroot -pyjscloud -e &apos;show character set;&apos;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-74.png" alt="m-74"></p>
<p>其中，最常见的字符集为如下4种：</p>
<pre><code>mysql -uroot -pyjscloud -e &apos;show character set;&apos;|egrep &apos;gbk|utf8|latin1&apos;|awk &apos;{print $0}&apos;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-75.png" alt="m-75"></p>
<p>查看mysql当前的字符集设置情况</p>
<pre><code>show variables like &apos;character_set%&apos;;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-76.png" alt="m-76"></p>
<p>提示：默认情况下</p>
<pre><code>character_set_client,character_set_connection,character_set_results三者的字符集和系统的字符集一致即可
</code></pre><p>不同字符集参数的含义：</p>
<pre><code>| character_set_client     | utf8           #客服端字符集
| character_set_connection | utf8      #连接字符集
| character_set_database   | utf8       #数据库字符集，配置文件指定或建库表指定
| character_set_results    | utf8         #返回结果字符集    
| character_set_server     | utf8          #服务器字符集，配置文件指定或建库建表指定
</code></pre><h2 id="如何更改生产MYSQL数据库库表的字符集"><a href="#如何更改生产MYSQL数据库库表的字符集" class="headerlink" title="如何更改生产MYSQL数据库库表的字符集"></a>如何更改生产MYSQL数据库库表的字符集</h2><p>数据字符集修改步骤</p>
<p>对于已有的数据库想修改字符集不能直接通过“alter database character set *” 或 “alter table tablename set *” ,这两个命令都没有更新已有记录的字符集，而只是对新创建的表或者记录生效。已经有记录的字符的调整，必须先将数据导出，经过修改字符集后重新导入后才可以完成。修改数据库默认编码：</p>
<pre><code>alter database [your db name] charset [your character setting]
</code></pre><p>模拟latin1字符集的数据库修改成GBK字符集的实际过程。</p>
<p>1）导出表结构</p>
<pre><code>mysqldump -uroot -pyjscloud --default-character-set=latin1 -d test2 &gt; alltable.sql --default-character-set=gbk
</code></pre><p>表示已GBK字符集进行连接 -d 只导表结构</p>
<p>2）编辑alltable.sql将latin1改成GBK</p>
<p>3）确保数据库不再更新，导出所有数据</p>
<pre><code>mysqldump -uroot -pyjscloud --quick --no-create-info --extended-insert --default-character-set=latin1 test2 &gt; alldata.sql
</code></pre><p>参数说明：</p>
<p>–quick：用于转储大的表，强制mysqldump从服务器一次一行的检索数据而不是检索所有行，并输出前CACHE到内存中。</p>
<p>–no-create-info：不创建CRATE TABLE语句。</p>
<p>–extended–insert：使用包括几个VALUES列表的多行INSERT语法，这样文件更小，IO也小，导入数据时会非常快</p>
<p>–default-character-set=latin1按照原有字符集导出数据，这样导出的文件中，所有中文都是可见，不会保存成乱码。</p>
<p>4）打开allsdata.sql将set names latin1修改成set names gbk;（或者修改系统的服务端和客户端）</p>
<p>5）建库</p>
<pre><code>create database test3 default charset gbk;
</code></pre><p>6）创建表，执行alltable.sql</p>
<pre><code>mysql -uroot -pyjscloud test3&lt;alltable.sql
</code></pre><p>7）导入数据</p>
<pre><code>mysql -uroot -pyjscloud test3&lt;alldata.sql
</code></pre><p>注意：选择目标字符集时，要注意最好大于源字符集（字库更大），否则可能会丢失不被支持的数据</p>
<p>总结：latin1-&gt;utf8</p>
<p>1、建库及建表的语句导出，sed批量修改为utf8</p>
<p>2、导出所有mysql数据</p>
<p>3、修改mysql服务端和客户端编码为utf8</p>
<p>4、删除原有的库表及数据</p>
<p>5、导入新的建库及建表的语句</p>
<p>6、导入mysql的所有数据</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL插入中文数据乱码问题&quot;&gt;&lt;a href=&quot;#MySQL插入中文数据乱码问题&quot; class=&quot;headerlink&quot; title=&quot;MySQL插入中文数据乱码问题&quot;&gt;&lt;/a&gt;MySQL插入中文数据乱码问题&lt;/h1&gt;&lt;h2 id=&quot;MySQL数据库插入中文数
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（二）：MySQL常用基础命令</title>
    <link href="http://yjscloud.site/2018/04/23/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AMySQL%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://yjscloud.site/2018/04/23/MySQL系列（二）：MySQL常用基础命令/</id>
    <published>2018-04-23T04:02:52.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动与关闭MySQL"><a href="#启动与关闭MySQL" class="headerlink" title="启动与关闭MySQL"></a>启动与关闭MySQL</h1><h2 id="单实例MySQL启动与关闭方法"><a href="#单实例MySQL启动与关闭方法" class="headerlink" title="单实例MySQL启动与关闭方法"></a>单实例MySQL启动与关闭方法</h2><p>常规启动关闭数据库方式（推荐）</p>
<p>1）启动MySQL命令：</p>
<pre><code>[root@mysql-1 ~]# /etc/init.d/mysqld start
Starting MySQL SUCCESS!
</code></pre><p>2）查看MySQL端口：</p>
<pre><code>[root@mysql-1 ~]# ss -lnt|grep 3306
LISTEN     0      50           *:3306                     *:*
</code></pre><p>3）查看MySQL进程：</p>
<p> <img src="http://p924w4b7r.bkt.clouddn.com/m-10.png" alt="m-10"></p>
<p>4）MySQL启动基本原理说明：<br>/etc/init.d/mysqld是一个shell启动脚本，启动后终会调用mysqld_safe脚本，最后调用mysqld服务启动mysql，如下，/etc/init.d/mysqld脚本中调用mysql_safe的程序</p>
<pre><code>$bindir/mysql_safr --datadir=&quot;$datadir&quot;  --pid-file=&quot;$mysql_pid_file_path&quot; $ other_args &gt;/dev/null 2&gt;&amp;1 &amp;
</code></pre><h2 id="初始化MySQL时输出提示的启动方法"><a href="#初始化MySQL时输出提示的启动方法" class="headerlink" title="初始化MySQL时输出提示的启动方法"></a>初始化MySQL时输出提示的启动方法</h2><pre><code>mysql_safe --user=mysql &amp;
</code></pre><p>提示：</p>
<p>（1）当忘记mysql的root密码是，会经常使用mysqld_safe –user=mysql &amp; 带参数启动。</p>
<p>（2）我们自己开发脚本启动数据库是可能会用到这个启动方法。</p>
<p>（3）/etc/init.d/mysqld和mysqld_safe –user=mysql &amp;的启动实质是一样的。</p>
<h2 id="常规方法关闭数据库"><a href="#常规方法关闭数据库" class="headerlink" title="常规方法关闭数据库"></a>常规方法关闭数据库</h2><p>（1）关闭MySQL命令</p>
<pre><code>[root@mysql-1 ~]# /etc/init.d/mysqld stop
Shutting down MySQL. SUCCESS!
[root@mysql-1 ~]# ss -lnt|grep 3306
</code></pre><p>提示：使用编译及二进制安装的mysql，mysql的启动脚本由mysql-xx/support-files/mysql.server 复制而来。</p>
<p>（2）强制关闭数据库方法：</p>
<pre><code>killall mysqld
pkill mysqld
killall -9 mysqld
mysql: no process killed
kill pid
</code></pre><p>提示：</p>
<p>用killall关闭，要直到出现mysqld: no process killed表示完成关闭操作。强制关闭命令不建议在生产环境使用，尽量不要野蛮粗鲁杀死数据库，生产高并发环境可能会引起数据丢失。</p>
<p>（3）优雅关闭数据库方法</p>
<p>第一种mysqladmin方法：</p>
<pre><code>mysqladmin -uroot -pyjscloud shutdown
</code></pre><p>第二种自带的脚本</p>
<pre><code>/etc/init.d/mysqld stop
</code></pre><p>第三种kill信号的方法</p>
<pre><code>kill -USE2 &apos;cat path/pid&apos;
</code></pre><p>提示：推荐前两种方法，自己写脚本启动停止就用第一个</p>
<h1 id="登陆MySQL方法"><a href="#登陆MySQL方法" class="headerlink" title="登陆MySQL方法"></a>登陆MySQL方法</h1><h2 id="单实例MySQL登陆的方法"><a href="#单实例MySQL登陆的方法" class="headerlink" title="单实例MySQL登陆的方法"></a>单实例MySQL登陆的方法</h2><pre><code>mysql     #刚刚安装mysql无密码情况的登陆方式
mysql -uroot    #刚刚安装mysql无密码情况的登陆方式
mysql -uroot -p    #这是标准的dba命令行登陆命令
mysql -uroot -pyjscloud    #非脚本里一般不这样用。密码明文会泄露密码，可以掩饰history功能解决
</code></pre><p>强制linux不记录敏感历史命令</p>
<pre><code>HISTCONTROL=ignorespace
history -c
history -d 5
</code></pre><p>登陆后默认提示符是：mysql&gt;，这个提示符也是可以改的，就像linux命令行提示符也可以改一样。<br>更改MySQL数据库登陆提示（了解即可）方法如下：</p>
<pre><code>mysql&gt; prompt \u%yjscloud \r:\m:\s-&gt;
PROMPT set to &apos;\u%yjscloud \r:\m:\s-&gt;&apos;
root%yjscloud 08:04:07-&gt;
</code></pre><p>配置文件修改登陆提示提示符：</p>
<p>在my.cnf配置文件中[mysql]模块下添加如下内容（注意，不是[mysqld]），保存后，无需重启mysql，退出当前session，重新登录即可如果my.cnf配置文件中加，可用\，避免转义带来的问题。</p>
<pre><code>[mysql]
prompt=\\u%yjscloud \\r:\\m:\\s-&gt;
</code></pre><h2 id="善用MySQL的帮助命令help"><a href="#善用MySQL的帮助命令help" class="headerlink" title="善用MySQL的帮助命令help"></a>善用MySQL的帮助命令help</h2><p>linux的帮助man，help</p>
<p>mysql中的help命令和linux命令行的man是类似的，和linux下查看内置命令的help是同名的。要想查看mysql中的命令使用语法，就需要用help，help后面接相关命令及命令组合即可，例如：help create ，默认情况mysql中的命令执行不区分大小写，这点和linux命令行严格区分大小写是有区别的。</p>
<p>排错的几点建议：</p>
<p>1、一般解决故障问题，一定要先看故障日志，根据报错输出或者日志文件自行排查下，别忘了这是上帝给你的难得的提示的机会，一旦错过提示机会就让给了别人！</p>
<p>2、实在解决不了，然后再搜索（g&gt;b）好些，搜索关键字要精练，且尽量唯一。</p>
<p>3、对于知识点的学习、用法，查看软件的帮助或官方手册最好，直接的一手资料。</p>
<p>4、实在看不懂英文的，可以先搜索中文资料，然后边对照边学习英文软件的帮助或官方手册，习惯了就会看英文了。网上大部分中文资料都是不全甚至是有问题的，没有变通能力的菜鸟很难搞定的。培养自身的学习习惯很重要，掌握了学习方法，思维方式，锻炼了学习能力，才会举一反三，真正的成长起来。</p>
<h1 id="退出MySQL数据库方法"><a href="#退出MySQL数据库方法" class="headerlink" title="退出MySQL数据库方法"></a>退出MySQL数据库方法</h1><pre><code>mysql&gt;quit
</code></pre><p>或</p>
<pre><code>eixt 
</code></pre><h1 id="设置及修改mysql-root用户密码"><a href="#设置及修改mysql-root用户密码" class="headerlink" title="设置及修改mysql root用户密码"></a>设置及修改mysql root用户密码</h1><h2 id="MySQL数据库用户安全策略介绍"><a href="#MySQL数据库用户安全策略介绍" class="headerlink" title="MySQL数据库用户安全策略介绍"></a>MySQL数据库用户安全策略介绍</h2><p>安装mysql数据库后，默认的管理员root密码为空，这很不安全。因此需要设置一个密码。其实在安装MySQL单实例后，我们已经做了一些安全措施；例如：</p>
<p>a、为root设置密码</p>
<p>b、删除无用的mysql库内的用户账户</p>
<p>c、删除默认存在的test数据库</p>
<p>除了上面的方法，针对MySQL数据库的用户处理，我们还是有严格的做法如下。</p>
<p>更安全的措施例如删除root,添加新的管理员用户</p>
<p>1）删除所有mysql中的用户，包括root超级用户。</p>
<pre><code>mysql&gt; delete from mysql.user;
Query OK, 7 rows affected (0.01 sec)
</code></pre><p>提示：root可以保留，然后修改为其他用户也可以</p>
<p>2）增加system并提升为超级管理员，即和root等价的用户，只是名字不同。</p>
<pre><code>mysql&gt; grant all privileges on *.* to system@&apos;localhost&apos; identified by&apos;yjscloud&apos; with grant option;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)
</code></pre><h2 id="为管理员root用户设置密码方法"><a href="#为管理员root用户设置密码方法" class="headerlink" title="为管理员root用户设置密码方法"></a>为管理员root用户设置密码方法</h2><pre><code>mysqladmin -uroot password &apos;yjscloud123&apos;   #没有密码的用户设置密码命令，这个是linux命令行不是mysql命令行
</code></pre><h2 id="修改管理员root密码"><a href="#修改管理员root密码" class="headerlink" title="修改管理员root密码"></a>修改管理员root密码</h2><p>1）方法一：命令行外修改</p>
<pre><code>mysqladmin -uroot -p&apos;yjscloud123&apos; password &apos;yjscloud456&apos;
</code></pre><p>2)方法二：sql语句修改</p>
<pre><code>mysql&gt; update mysql.user set password=password(&quot;yjscloud789&quot;) where user=&apos;system&apos;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.01 sec)
</code></pre><p>提示：此方法合适密码丢失后通过–skip-grant-tables参数启动数据库后修改密码。</p>
<pre><code>mysql&gt; select user,host from mysql.user;
+----------+----------------+
| user     | host           |
+----------+----------------+
| yjscloud | 192.168.0.0/24 |
| root     | localhost      |
| system   | localhost      |
+----------+----------------+
3 rows in set (0.00 sec)

mysql&gt; update mysql.user set password=password(&quot;yjscloud123&quot;) where user=&apos;root&apos; and host=&quot;localhost&quot;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>提示：</p>
<p>1、必须指定where条件</p>
<p>2、必须使用password（）函数来加密更改密码</p>
<h1 id="找回丢失的mysql-root用户密码"><a href="#找回丢失的mysql-root用户密码" class="headerlink" title="找回丢失的mysql root用户密码"></a>找回丢失的mysql root用户密码</h1><h2 id="启动修改丢失的MySQL实例root密码方法"><a href="#启动修改丢失的MySQL实例root密码方法" class="headerlink" title="启动修改丢失的MySQL实例root密码方法"></a>启动修改丢失的MySQL实例root密码方法</h2><p>1）首先停止mysql</p>
<pre><code>[root@mysql-1 ~]# /etc/init.d/mysqld stop
Shutting down MySQL. SUCCESS!
</code></pre><p>2）使用–skip-grant-tables启动mysql，忽略授权登陆验证</p>
<pre><code>mysqld_safe --skip-grant-tables --user=mysql &amp;
mysql -uroot -p  #登陆时密码为空
</code></pre><p>3）无需密码即可登陆MySQL</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-11.png" alt="m-11"></p>
<p> 4）修改root密码为新密码</p>
<pre><code>mysql&gt; update mysql.user set password=password(&apos;yjscloud000&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0
#需要指定修改的用户，不知道用户是无法修改的，因为数据库中可能存在多个用户
mysql&gt; flush privileges;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; quit
Bye
</code></pre><p>5）重启服务再登陆</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-12.png" alt="m-12"></p>
<h1 id="SQL结构化查询语言"><a href="#SQL结构化查询语言" class="headerlink" title="SQL结构化查询语言"></a>SQL结构化查询语言</h1><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><p>SQL，英文全称Structured Query Langyuage，中文意思是结构化查询语言，它是一种对关系数据库中的数据进行定义和操作的语言方法，是大多数关系数据库管理系统所支持的工业标准。结构化查询语言SQL是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。结构化查询语言是高级的非过程化编程语言，允许用户在高层数据存放方式，所以，具有完全不同于底层结构的，不同数据库系统可以使用相同的结构化查询语言作为数据输入与管理的接口。结构化查询语言语句可以嵌套，这使得它具有极大的灵活性和强大的功能。不同的数据库系统的SQL语言会有一些差别。</p>
<h2 id="SQL结构化查询语言包含6个部分"><a href="#SQL结构化查询语言包含6个部分" class="headerlink" title="SQL结构化查询语言包含6个部分"></a>SQL结构化查询语言包含6个部分</h2><p>1）数据查询语言(DQL):</p>
<p>DQL全称Data Query Language,其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎么在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得多的动词，其他DQL常用的保留字有WHERE,ORDER BY,GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起用。具体语句例如：</p>
<pre><code>mysql&gt; select user,host from mysql.user order by user;
+----------+----------------+
| user     | host           |
+----------+----------------+
| root     | localhost      |
| system   | localhost      |
| yjscloud | 192.168.0.0/24 |
+----------+----------------+
3 rows in set (0.00 sec)
</code></pre><p>2）数据操作语言（DML）</p>
<p>DML全称Data Manipulation Language,其语句包括动词INSERT,UPDATE和DELETE。它们分别用于添加，修改和删除表中的行（数据）。也称为查询语言。具体语句例如：</p>
<pre><code>mysql&gt; delete from mysql.user where user=&apos;yjscloud&apos;;
Query OK, 1 row affected (0.00 sec)
</code></pre><p>3）事务处理语言（TPL）</p>
<p>它的语句能确保被DML语句影响的表所有行及时得以更新。TPL语句BEGIN,TRANSACTION,COMMIT和ROLLBACK。</p>
<p>4）数据控制语言（DCL）</p>
<p>DCL全称（Data Control Language），它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列表的访问。</p>
<p>5）数据定义语言（DDL）<br>全称，（Data Definition Language），其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREATE TABLE或DROP TABLE）;为表加入索引等。DDL包括许多与数据库目录中获得数据有关的保留字。它也是动作查询的一部分。</p>
<p>6）指针控制语言（CCL）<br>全称CURSOR Control Language，它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独的操作。</p>
<p>小结：SQL语句最常见的分类一般就是3类：</p>
<p>DDL——数据定义语言（CREATE,ALTER,DROP） &lt;—-运维</p>
<p>DML——数据操作语言（SELECT,INSERT,DELETE,UPDATE）&lt;—-开发</p>
<p>DCL——数据控制语言（GRANT,REVOKE,COMMIT,ROLLBACK）&lt;—-运维</p>
<h1 id="MySQL数据常见管理应用"><a href="#MySQL数据常见管理应用" class="headerlink" title="MySQL数据常见管理应用"></a>MySQL数据常见管理应用</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>命令语法：create database &lt;数据库名&gt;     #注意库名不能数字开头</p>
<p>在MySQL默认字符集情况下建立数据库测试如下：</p>
<p>a、建立名为yjscloud和yjscloud1的数据库（我在安装数据库时指定了utf-8为默认的字符集）</p>
<pre><code>mysql&gt; create database yjscloud;
Query OK, 1 row affected (0.00 sec)

mysql&gt; create database yjscloud1;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show databases like &apos;yjscloud%&apos;;
+----------------------+
| Database (yjscloud%) |
+----------------------+
| yjscloud             |
| yjscloud1            |
+----------------------+
2 rows in set (0.00 sec)

mysql&gt; show create database yjscloud;
+----------    +-------------------------------------------------------------------+
| Database | Create Database                                                   |
+----------+-------------------------------------------------------------------+
| yjscloud | CREATE DATABASE `yjscloud` /*!40100 DEFAULT CHARACTER SET utf8 */ |
+----------+-------------------------------------------------------------------+
1 row in set (0.00 sec)
</code></pre><p>b、建立一个名为yjscloud_gbk的GBK字符集数据库</p>
<pre><code>mysql&gt; create database yjscloud_gbk default character set gbk collate gbk_chinese_ci;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show create database yjscloud_gbk;
+--------------+----------------------------------------------------------------------+
| Database     | Create Database                                                      |
+--------------+----------------------------------------------------------------------+
| yjscloud_gbk | CREATE DATABASE `yjscloud_gbk` /*!40100 DEFAULT CHARACTER SET gbk */ |
+--------------+----------------------------------------------------------------------+
1 row in set (0.00 sec)
</code></pre><p>提示：字符集的不一致时数据库中文内容乱码的罪魁祸首，在编译安装的时候指定了字符集则以后创建对应的数据库就不需要指定字符集了。</p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.5.32 \
-DMYSQL_DATADIR=/application/mysql-5.5.32/data \
-DMYSQL_UNIX_ADDR=/application/mysql-5.5.32/tmp/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
</code></pre><p>如果在编译的时候没有指定字符集或者指定了不同的字符集，如何解决？我们只需要指定字符集创建数据库即可</p>
<pre><code>create database yjscloud_gbk default character set gbk collate gbk_chinese_ci;    #创建gbk字符集数据库
create database yjscloud_utf8 default character set utf8 collate utf8_chinese_ci;   #创建utf8字符集数据库
</code></pre><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p>命令：show databases;</p>
<pre><code>mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| yjscloud           |
| yjscloud1          |
| yjscloud_gbk       |
+--------------------+
6 rows in set (0.00 sec)

mysql&gt; show databases like &apos;%yjscloud%&apos;;   #   %为通配符，匹配所有内容。
+----------------------+
| Database (yjscloud%) |
+----------------------+
| yjscloud             |
| yjscloud1            |
| yjscloud_gbk         |
+----------------------+
3 rows in set (0.00 sec)
</code></pre><p> <img src="http://p924w4b7r.bkt.clouddn.com/m-13.png" alt="m-13"></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>命令：drop database &lt;数据库名&gt;</p>
<p>例如删除yjscloud的数据库</p>
<pre><code>mysql&gt; drop database yjscloud;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| yjscloud1          |
| yjscloud_gbk       |
+--------------------+
5 rows in set (0.00 sec)
</code></pre><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>命令：use &lt;数据库名&gt;   #use相当与linux命令行下的cd命令，use用于切换数据库</p>
<pre><code>mysql&gt; use yjscloud1
Database changed
</code></pre><h2 id="查看当前数据库包含的表信息"><a href="#查看当前数据库包含的表信息" class="headerlink" title="查看当前数据库包含的表信息"></a>查看当前数据库包含的表信息</h2><p>切到数据库里面去查看：</p>
<pre><code>mysql&gt; show tables;
Empty set (0.00 sec)    #空表，因为是新库，还没有建表

mysql&gt; show tables like &apos;user&apos;;
Empty set (0.00 sec)

mysql&gt; show tables from yjscloud_gbk;   #查看指定库中的表。
Empty set (0.00 sec)

mysql&gt; show tables in yjscloud_gbk;
Empty set (0.01 sec)
</code></pre><h1 id="删除MySQL系统多余账号"><a href="#删除MySQL系统多余账号" class="headerlink" title="删除MySQL系统多余账号"></a>删除MySQL系统多余账号</h1><p>语法：drop user “user”@”主机域”   #注意引号，可以是单或双引号，但是不能不加。</p>
<pre><code>mysql&gt; select user,host from mysql.user;
+----------+-----------+
| user     | host      |
+----------+-----------+
| cloud    | localhost |
| root     | localhost |
| system   | localhost |
| yjscloud | localhost |
+----------+-----------+
4 rows in set (0.00 sec)

mysql&gt; drop user &apos;cloud&apos;@&apos;localhost&apos;;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select user,host from mysql.user;
+----------+-----------+
| user     | host      |
+----------+-----------+
| root     | localhost |
| system   | localhost |
| yjscloud | localhost |
+----------+-----------+
3 rows in set (0.00 sec)
</code></pre><p>注意：删除后的结果如上面返回的结果如果drop删除不了（一般是特殊字符或大写），可以用下面方式删除（以root用户，yjscloud主机为例）</p>
<pre><code>delete from mysql.user where user=&apos;root&apos; and host=&apos;yjscloud&apos;;
flush privileges;
</code></pre><h1 id="创建MySQL用户及赋予用户权限"><a href="#创建MySQL用户及赋予用户权限" class="headerlink" title="创建MySQL用户及赋予用户权限"></a>创建MySQL用户及赋予用户权限</h1><h2 id="通过help查看grant命令帮助"><a href="#通过help查看grant命令帮助" class="headerlink" title="通过help查看grant命令帮助"></a>通过help查看grant命令帮助</h2><pre><code>...省略部分...
CREATE USER &apos;jeffrey&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;mypass&apos;;
GRANT ALL ON db1.* TO &apos;jeffrey&apos;@&apos;localhost&apos;;
GRANT SELECT ON db2.invoice TO &apos;jeffrey&apos;@&apos;localhost&apos;;
GRANT USAGE ON *.* TO &apos;jeffrey&apos;@&apos;localhost&apos; WITH MAX_QUERIES_PER_HOUR 90;
...省略部分...
</code></pre><p>通过查看grant的命令帮助，可以很容易的找到创建用户并授权的例子！</p>
<p>1、使用grant命令在创建用户的同时进行权限授权：</p>
<pre><code>GRANT ALL ON db1.* TO &apos;jeffrey&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;mypass&apos;;
</code></pre><p>2、上述grant命令帮助里还提供了一个先用create命令创建用户，然后再用grant授权的方法，即创建用户和授权权限分开进行，</p>
<p>例：</p>
<pre><code>CREATE USER &apos;jeffrey&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;mypass&apos;;
GRANT ALL ON db1.* TO &apos;jeffrey&apos;@&apos;localhost&apos;;
</code></pre><p>以上两条命令相当于：</p>
<pre><code>GRANT ALL ON db1.* TO &apos;jeffrey&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;mypass&apos;;
</code></pre><h2 id="通过grant命令创建用户并授权"><a href="#通过grant命令创建用户并授权" class="headerlink" title="通过grant命令创建用户并授权"></a>通过grant命令创建用户并授权</h2><p>grant命令简单语法如下：</p>
<pre><code>grant all privileges on dbname.* to username@localhost identified by &apos;passwd&apos;;
</code></pre><p>列表说明： </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-15.png" alt="m-15"> </p>
<p>说明：上述命令是授权localhost主机上通过用户username管理dbname数据库的所有权限，密码为passwd。其中username，dbname，passwd可根据业务的情况修改。</p>
<h2 id="create和grant配合法"><a href="#create和grant配合法" class="headerlink" title="create和grant配合法"></a>create和grant配合法</h2><p>1）首先创建用户username及密码passwd，授权主机localhost</p>
<pre><code>create user &apos;username&apos;@&apos;localhost&apos; identified by &apos;passwd&apos;;
</code></pre><p>2）然后授权localhost主机上通过username管理dbname数据库的所有权限，无需密码。</p>
<pre><code>grant all on dbname.* to &apos;username&apos;@&apos;localhost&apos;;
</code></pre><p>3）实战操作：创建mycloud用户。对yjscloud库具备所有权限，允许从localhost主机登陆管理数据库，密码是mycloud123</p>
<p>1、查看当前数据库用户情况，然后执行对应命令创建用户：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-16.png" alt="m-16">  </p>
<p>查看用户mycloud的具体权限</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-17.png" alt="m-17">  </p>
<p>开始对mycloud用户授权，并查看授权的权限细明</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-18.png" alt="m-18">  </p>
<p>提示：可以看到默认权限是useage，即连接权限，后面又增加了all权限。 </p>
<h2 id="授权局域网内主机远程连接数据库"><a href="#授权局域网内主机远程连接数据库" class="headerlink" title="授权局域网内主机远程连接数据库"></a>授权局域网内主机远程连接数据库</h2><p>根据grant命令语法，我们知道yjscloud@’localhost’位置为授权访问数据库的主机，localhost可以用域名，ip地址或ip段来替代，因此，要授权局域网内主机可以通过如下方法实现：</p>
<p>1）百分号匹配法</p>
<pre><code>mysql&gt; grant all on *.* to yjscloud@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>2）子网掩码配置法</p>
<pre><code>mysql&gt; grant all on *.* to yjscloud@&apos;192.168.0.0/255.255.255.0&apos; identified by &apos;yjscloud&apos;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>最后要刷新权限</p>
<pre><code>mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>3）通过mysql客服端连接异地数据库服务：</p>
<p>1、本地mysql -uroot -pyjscloud 连接数据库相当与mysql -uroot -pyjscloud -h localhost</p>
<p>2、要远程连接192.168.0.30的数据库，命令为mysql -uyjscloud -pyjscloud -h 192.168.0.30，如果要能连接成功，还需要在192.168.0.30的数据库服务器上通过如下命令授权：</p>
<pre><code>grant all on *.* to yjscloud@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>提示：上述命令意思是授权192.168.0.%，匹配这个字符串ip地址的的所有主机连接数据库，百分号%匹配所有192.168.0.0/24内的主机</p>
<h2 id="MySQL用户可以授权的权限有哪些"><a href="#MySQL用户可以授权的权限有哪些" class="headerlink" title="MySQL用户可以授权的权限有哪些"></a>MySQL用户可以授权的权限有哪些</h2><p>1）先看看前面授权通过的mycloud的权限</p>
<pre><code>mysql&gt; show grants for &apos;mycloud&apos;@&apos;localhost&apos;;
+----------------------------------------------------------------------------------------------------------------+
| Grants for mycloud@localhost                                                                                   |
+----------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO &apos;mycloud&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*5135EBEA729E32C95756AE6F914F901D66D2641D&apos; |
| GRANT ALL PRIVILEGES ON `yjscloud`.* TO &apos;mycloud&apos;@&apos;localhost&apos;                                                  |
+----------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)


#取消mycloud的选择权限
mysql&gt; REVOKE SELECT ON yjscloud.* from &apos;mycloud&apos;@&apos;localhost&apos;;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show grants for &apos;mycloud&apos;@&apos;localhost&apos;;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for mycloud@localhost                                                                                                                                                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO &apos;mycloud&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*5135EBEA729E32C95756AE6F914F901D66D2641D&apos;                                                                                                                      |
| GRANT INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `yjscloud`.* TO &apos;mycloud&apos;@&apos;localhost&apos; |
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
</code></pre><p>提示：此时我们再查看oldboy用户权限，ALL PRIVILEGES权限已经被细分了，但是没有select权限了。在授权时，可以授权用户最小的满足业务需求的业务，而不是一味的授权ALL PRIVILEGES </p>
<h2 id="企业生产环境如何授权用户权限"><a href="#企业生产环境如何授权用户权限" class="headerlink" title="企业生产环境如何授权用户权限"></a>企业生产环境如何授权用户权限</h2><p>1）博客、CMS等产品的数据库授权</p>
<p>对于web连接用户授权尽量采用最小化原则，很多开源软件都是web界面安装，因此，在安装期间除了select，insert，update，delete4个权限外，还需要create，drop等比较危险的权限。</p>
<pre><code>mysql&gt; grant select,insert,update,delete,create,drop on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>常规情况下授权select，insert，update，delete4个权限即可，有的开源软件，例如discuz bbs，还需要create，drop等比较危险的权限。</p>
<p>2）生成数据库表后，要收回create，drop授权</p>
<pre><code>mysql&gt; show grants for &apos;blog&apos;@&apos;192.168.0.%&apos;;
+---------------------------------------------------------------------------------------------------------------+
| Grants for blog@192.168.0.%                                                                                   |
+---------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO &apos;blog&apos;@&apos;192.168.0.%&apos; IDENTIFIED BY PASSWORD &apos;*7C9FFD5B56F6DEE1126BC972C97B1DFEC8E4E089&apos; |
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP ON `blog`.* TO &apos;blog&apos;@&apos;192.168.0.%&apos;                        |
+---------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)

#收回create，drop授权
mysql&gt; revoke create,drop on blog.* from &apos;blog&apos;@&apos;192.168.0.%&apos;;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; show grants for &apos;blog&apos;@&apos;192.168.0.%&apos;;
+---------------------------------------------------------------------------------------------------------------+
| Grants for blog@192.168.0.%                                                                                   |
+---------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO &apos;blog&apos;@&apos;192.168.0.%&apos; IDENTIFIED BY PASSWORD &apos;*7C9FFD5B56F6DEE1126BC972C97B1DFEC8E4E089&apos; |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `blog`.* TO &apos;blog&apos;@&apos;192.168.0.%&apos;                                      |
+---------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
</code></pre><p>3）生产环境针对主库（写为主读为辅）用户的授权：</p>
<p>普通的环境：</p>
<p>本机：lnmp，lamp环境数据库授权</p>
<pre><code>grant all privileges on blog.* to &apos;blog&apos;@&apos;localhost&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>应用服务器和数据库服务器不在一个主机上的授权：</p>
<pre><code>grant all privileges on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>严格的授权：重视安全，忽略方便</p>
<pre><code>grant select,insert,update,delete on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>4）生产环境从库（只读）用户的授权：</p>
<pre><code>grant select on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>说明：这里表示给192.168.0.0/24的用户blog管理blog数据的所有表（*表示所有表）只读权限（select），密码为yjscloud</p>
<p>5）生产场景授权的具体命令为：</p>
<pre><code>grant select,insert,update,delete on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>从库授权用户的命令：</p>
<pre><code>grant select on blog.* to &apos;blog&apos;@&apos;192.168.0.%&apos; identified by &apos;yjscloud&apos;;
</code></pre><p>当然从库除了做select的授权外，还可以加入read-only等只读从参数，严格控制web用户写从库。</p>
<p>6）这里还有一个比较重要的问题：</p>
<p>就是主从库的mysql库和表示同步的，无法针对同一个用户授权不同的权限，因为主库授权后会自动同步到从库上，导致从库的授权只读失败。</p>
<p>解决方法：</p>
<p>a、取消mysql库的同步</p>
<p>b、授权主库权限后，从库执行收回增删改权限。</p>
<p>c、不在授权上控制增删改，而是用read-only参数，控制普通用户更新从库，注意，read-only参数对超级用户无效。</p>
<h1 id="查看mysql数据库的用户及授权"><a href="#查看mysql数据库的用户及授权" class="headerlink" title="查看mysql数据库的用户及授权"></a>查看mysql数据库的用户及授权</h1><p>1）查看mysql数据库的用户及授权</p>
<pre><code>mysql&gt; select user,host from mysql.user;
+----------+---------------------------+
| user     | host                      |
+----------+---------------------------+
| blog     | 192.168.0.%               |
| yjscloud | 192.168.0.%               |
| yjscloud | 192.168.0.0/255.255.255.0 |
| mycloud  | localhost                 |
| root     | localhost                 |
| system   | localhost                 |
| yjscloud | localhost                 |
+----------+---------------------------+
7 rows in set (0.00 sec)
</code></pre><p>注意：</p>
<p>1、由于安全原因，上面的用户是经过处理过的</p>
<p>2、mysql的用户由“用户名@主机名”构成，所以在用户列表有相同的用户，不要奇怪</p>
<p>2）查看授权用户yjscloud的具体授权权限</p>
<pre><code>mysql&gt; show grants for &apos;yjscloud&apos;@&apos;localhost&apos;;
+--------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for yjscloud@localhost                                                                                                              |
+--------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO &apos;yjscloud&apos;@&apos;localhost&apos; IDENTIFIED BY PASSWORD &apos;*7C9FFD5B56F6DEE1126BC972C97B1DFEC8E4E089&apos; WITH GRANT OPTION |
+--------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec) 
</code></pre><h1 id="mysql数据库操作"><a href="#mysql数据库操作" class="headerlink" title="mysql数据库操作"></a>mysql数据库操作</h1><h2 id="指定字符集建库"><a href="#指定字符集建库" class="headerlink" title="指定字符集建库"></a>指定字符集建库</h2><p>指定字符集建库</p>
<pre><code>mysql&gt; create database yjscloud;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show create database yjscloud\G
*************************** 1. row ***************************
   Database: yjscloud
Create Database: CREATE DATABASE `yjscloud` /*!40100 DEFAULT CHARACTER SET utf8 */
1 row in set (0.00 sec)
</code></pre><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>基本语法：</p>
<pre><code>create table &lt;表名&gt;（
&lt;字段名1&gt;&lt;类型1&gt;，
...
&lt;字段名n&gt;&lt;类型n&gt;，
</code></pre><p>提示：其中create table 是关键字，不能更改，但是大小写可以变化。</p>
<p>建表语句：下面是人工写法设计的建表语句例子，表名student，</p>
<pre><code>create table student(     
id int(4) not null,           
name char(20) not null,     
age tinyint(2) not null default &apos;0&apos;,     
dept varchar(16) default null           
);
</code></pre><p>第二种mysql生成的建表语句student表例子</p>
<pre><code>CREATE TABLE `student` (       #create table表示创建表的固定关键字，student为表名
`id` int(4) NOT NULL,              #学号列，数字类型，长度为4，不为空值
`name` char(20) NOT NULL,      #名字列，定长字符类型，长度20，不为空值
`age` tinyint(2) NOT NULL DEFAULT &apos;0&apos;,    #年龄列，很小的数字类型，长度为2，不为空，默认为0值，
`dept` varchar(16) DEFAULT NULL      #系别列，变长字符类型，长度16，默认为空
) ENGINE=InnoDB DEFAULT CHARSET=utf8     #引擎和字符集，引擎默认为InnoDB,字符集继承库的utf8
</code></pre><h2 id="实战操作"><a href="#实战操作" class="headerlink" title="实战操作"></a>实战操作</h2><p>下面是实战操作</p>
<pre><code>mysql&gt; create database test_stu;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show create database test_stu\G
*************************** 1. row ***************************
   Database: test_stu
Create Database: CREATE DATABASE `test_stu` /*!40100 DEFAULT CHARACTER SET utf8 */
1 row in set (0.00 sec)

mysql&gt; use test_stu;
Database changed
mysql&gt; create table student(    
    -&gt; id int(4) not null,          
    -&gt; name char(20) not null,    
    -&gt; age tinyint(2) not null default &apos;0&apos;,    
    -&gt; dept varchar(16) default null          
    -&gt; );
Query OK, 0 rows affected (0.02 sec)

mysql&gt; show create table student\G
*************************** 1. row ***************************
       Table: student
Create Table: CREATE TABLE `student` (
    `id` int(4) NOT NULL,
    `name` char(20) NOT NULL,
    `age` tinyint(2) NOT NULL DEFAULT &apos;0&apos;,
    `dept` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)

mysql&gt;
</code></pre><p>查看表结构：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-19.png" alt="m-19">  </p>
<h2 id="mysql表的字段类型"><a href="#mysql表的字段类型" class="headerlink" title="mysql表的字段类型"></a>mysql表的字段类型</h2><p>1）数字类型 </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-20.png" alt="m-20">   </p>
<p>2）日期和时间类型（DATE日期类型：支持的范围是1000-01-01到9999-12-31。mysql以YYYY-MM-DD格式来显示DATE值，但是允许你使用字符串或数字把值赋给DATE列）</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-21.png" alt="m-21">    </p>
<p>3）串类型</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-22.png" alt="m-22">  </p>
<p>char和varchar之间的差别<br>m</p>
<h2 id="生产环境标准的UTF8G格式表结构语句"><a href="#生产环境标准的UTF8G格式表结构语句" class="headerlink" title="生产环境标准的UTF8G格式表结构语句"></a>生产环境标准的UTF8G格式表结构语句</h2><p>某sns生产正式建表语句</p>
<pre><code>use sns;
set names gbk;
CREATE TABLE `subject_comment_manager` (
`subject_comment_manager_id` bigint(12) NOT NULL auto_increment COMMENT &apos;主键&apos;,
`subject_type` tinyint(2) NOT NULL COMMENT &apos;素材类型&apos;,
`subject_primary_key` varchar(255) NOT NULL COMMENT &apos;素材的主键&apos;,
`subject_title` varchar(255) NOT NULL COMMENT &apos;素材的名称&apos;,
`edit_user_nick` varchar(64) default NULL COMMENT &apos;修改人&apos;,
`edit_user_time` timestamp NULL default NULL COMMENT &apos;修改时间&apos;,
`edit_comment` varchar(255) default NULL COMMENT &apos;修改的理由&apos;,
`state` tinyint(1) NOT NULL default &apos;1&apos; COMMENT &apos;0代表关闭，1代表正常&apos;,
PRIMARY KEY  (`subject_comment_manager_id`),
KEY `IDX_PRIMARYKEY` (`subject_primary_key`(32)), #&lt;==括号内的32表示对前32个字符做前缀索引。
KEY `IDX_SUBJECT_TITLE` (`subject_title`(32))
KEY `index_nick_type` (`edit_user_nick`(32),`subject_type`)#&lt;==联合索引，此行为新加的，用于给大家讲解的。实际表语句内没有此行。
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 
</code></pre><h2 id="查看建立的表结构"><a href="#查看建立的表结构" class="headerlink" title="查看建立的表结构"></a>查看建立的表结构</h2><p>查看表结构命令：</p>
<pre><code>desc表名或者show columns from 表名
</code></pre><p>例：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-23.png" alt="m-23"> </p>
<h2 id="查看已建立表的语句"><a href="#查看已建立表的语句" class="headerlink" title="查看已建立表的语句"></a>查看已建立表的语句</h2><p>查看建表的语句（可以看见索引及创建表的相关信息）：</p>
<pre><code>mysql&gt; show create table student\G
*************************** 1. row ***************************
       Table: student
Create Table: CREATE TABLE `student` (
    `id` int(4) NOT NULL,
    `name` char(20) NOT NULL,
    `age` tinyint(2) NOT NULL DEFAULT &apos;0&apos;,
    `dept` varchar(16) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec) 
</code></pre><h2 id="为表的字段创建索引"><a href="#为表的字段创建索引" class="headerlink" title="为表的字段创建索引"></a>为表的字段创建索引</h2><p>索引就象书的目录一样，如果在字段上建立了索引，那么以索引为查询条件时可以加快查询数据的速度.创建主键索引查询数据库，按主键查询是最快的，每个表只有一个主键列，但是可以用多个普通索引列。主键列要求列的所有内容必须唯一，而普通索引不要求内容必须唯一。主键就类似我们在学校学习时的学号一样，班级内是唯一的，整个表的每一条记录的主键值在表内都是唯一的，用来唯一标识一条记录。</p>
<h3 id="建立主键索引的方法"><a href="#建立主键索引的方法" class="headerlink" title="建立主键索引的方法"></a>建立主键索引的方法</h3><p>1）在建表时，可以增加建立主键索引的语句如下</p>
<pre><code>create table student(
id int(4) not null AUTO_INCREMENT,
name char(20) not null,
age tinyint(2)  NOT NULL default &apos;0&apos;,
dept varchar(16)  default NULL,
primary key(id),
KEY index_name(name)
); 
</code></pre><p>提示：</p>
<p>primary key(id)   #主键</p>
<p>KEY index_name(name)   #name字段普通索引</p>
<p>建表时附带建立主键语句操作演示：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-24.png" alt="m-24"> </p>
<p>提示：PRI为主键的标示，MUL为普通索引的标示</p>
<h3 id="建立后通过alter命令增加主键索引（不这么干）"><a href="#建立后通过alter命令增加主键索引（不这么干）" class="headerlink" title="建立后通过alter命令增加主键索引（不这么干）"></a>建立后通过alter命令增加主键索引（不这么干）</h3><p>1）主键列不能重复创建，必须先删除上面配置</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-25.png" alt="m-25">  </p>
<p>利用alter命令修改id列为自增主键列</p>
<pre><code>alter table student change id id int primary key auto_increment;
</code></pre><p>提示：只有int类型且为primary key才可以使用auto_increment </p>
<h3 id="对字段的前N个字符创建普通索引"><a href="#对字段的前N个字符创建普通索引" class="headerlink" title="对字段的前N个字符创建普通索引"></a>对字段的前N个字符创建普通索引</h3><p>当遇到表中比较大的列时，列内容的前N个字符在所有内容中已经接近唯一时，这时可以对列的前N个字符建立索引，而无需对整个列建立索引，这样可以节省创建索引占用的系统空间，以及降低读取和更新维护索引消耗的系统资源。对字段的前N个字符创建普通索引的语法：</p>
<pre><code>create index index_name on test(name(8));   #条件列前N个字符创建所索引
</code></pre><p>操作实践：</p>
<p>在dept系列上，前8个字符创建索引，此列总长度为16个 </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-26.png" alt="m-26"> </p>
<p>为指定字段的前N个字符建立索引语句</p>
<pre><code>mysql&gt; create index index_dept on student(dept(8));
Query OK, 0 rows affected (0.21 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre><p>这个语句等同于alter table student add index index_dept(dept(8));</p>
<pre><code>mysql&gt; alter table student drop index index_dept;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; alter table student add index index_dept(dept(8));
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre><p>查看执行结果： </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-27.png" alt="m-27">  </p>
<h3 id="为表的多个字段创建联合索引"><a href="#为表的多个字段创建联合索引" class="headerlink" title="为表的多个字段创建联合索引"></a>为表的多个字段创建联合索引</h3><p>如果查询数据的条件是多列时，我们可以为多个查询的列创建联合索引，甚至可以为多列的前N个字符创建联合索引。</p>
<p>实践演示：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-28.png" alt="m-28">   </p>
<p>可以为多列的前N个字符列创建联合索引，实践演示：</p>
<pre><code>mysql&gt; create index ind_name_dept1 on student(name(8),dept(10));
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre><h3 id="创建唯一索引（非主键）"><a href="#创建唯一索引（非主键）" class="headerlink" title="创建唯一索引（非主键）"></a>创建唯一索引（非主键）</h3><pre><code>create unique index index_age on student(age);
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-29.png" alt="m-29">  </p>
<h3 id="索引列的创建及生效条件"><a href="#索引列的创建及生效条件" class="headerlink" title="索引列的创建及生效条件"></a>索引列的创建及生效条件</h3><p>问题1、既然索引可以加快查询速度，那么就给所有的列建索引吧？</p>
<p>答：因为索引不但占用系统空间，更新数据库是还需要维护索引数据的，因此索引是一把双刃剑，并不是越多越好，</p>
<p>例如：数十到几百行的小表上无需建立索引，更新频繁，读取比较少的表 要少建立索引。</p>
<p>问题2、需要在哪些列上创建索引呢？</p>
<p>select user,host from mysql where host=…，索引一定要创建在where后的条件列上，<br>而不是select后的选择数据的列。另外，我们要尽量选择在唯一值多的大表上的列建立索引。</p>
<h3 id="创建索引命令集合小结"><a href="#创建索引命令集合小结" class="headerlink" title="创建索引命令集合小结"></a>创建索引命令集合小结</h3><p>1）创建索引相关命令集合</p>
<p>创建主键索引：</p>
<pre><code>alter table student chage id id int primary key auto_increment;
</code></pre><p>删除主键索引（主键列不能自增）：</p>
<pre><code>alter table student drop primary key;
</code></pre><p>添加普通索引：</p>
<pre><code>alter table student add index index_dept(dept);
</code></pre><p>根据的前n个字符创建索引：</p>
<pre><code>create index index_dept on student(dept(8));
</code></pre><p>根据多个列创建联合索引：</p>
<pre><code>create index index_name_dept on student(name,dept);
</code></pre><p>创建唯一索引：</p>
<pre><code>create unique index uni_ind_name on student(name);
</code></pre><p>删除普通索引与唯一索引：</p>
<pre><code>alter table student drop index index_dept;
drop index index_dept on student;
</code></pre><p>基本索引：</p>
<p>1、要在表的列上创建索引</p>
<p>2、索引会加快查询速度，但是会影响更新的速度，因此要维护索引。</p>
<p>3、索引不是越多越好，要在频繁查询的where后的条件列上创建索引。</p>
<p>4、小表或唯一值极少的列上不建索引，要在大表以及不同内容多的列上创建索引。</p>
<h3 id="往表中插入数据"><a href="#往表中插入数据" class="headerlink" title="往表中插入数据"></a>往表中插入数据</h3><p>1）命令语法：</p>
<pre><code>insert into &lt;表名&gt;[(&lt;字段名&gt;[,..&lt;字段名n&gt;])] values (值 1 )[,(值n)]
</code></pre><p>2）新建一个简单的测试表test</p>
<p>3）往表中插入数据的不同的语法例子：</p>
<p>1、按规矩指定所有列名，并且每列都插入值</p>
<pre><code>insert into test1(id,name) values(1,&apos;xwq&apos;);
</code></pre><p>2、由于id列为自增的，所以，可以只在name列插入值</p>
<pre><code>insert int test1(name) values(&apos;xdf&apos;)
</code></pre><p>3、如果不指定列，就要按规矩为每列都插入恰当的值。</p>
<pre><code>insert into test1 values(3,&apos;inca&apos;,21);
</code></pre><p>4、批量插入数据方法，提升效率</p>
<pre><code>insert into test1 values(3,&apos;lufei&apos;,20),(4,&apos;suolong&apos;,23);
</code></pre><p>4）插入数据实践演示：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-30.png" alt="m-30">  </p>
<p>插入数据：</p>
<pre><code>mysql&gt; insert into test1(id,name) values(1,&apos;xwq&apos;);
Query OK, 1 row affected (0.01 sec)

mysql&gt; insert into test1 values(2,&quot;lufei&quot;,12);
Query OK, 1 row affected (0.00 sec)

mysql&gt; insert into test1 values(3,&apos;inca&apos;,21);
Query OK, 1 row affected (0.01 sec)
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-31.png" alt="m-31">  </p>
<p>5）测试完毕，退出数据库然后备份上述数据库，留着备用：</p>
<pre><code>mysql&gt; exit
Bye
[root@mysql-1 ~]# mysqldump -uroot -pyjscloud000 -B test_yjs &gt;/opt/test_yjs_bak.sql
[root@mysql-1 ~]# ls -l /opt/test_yjs_bak.sql
-rw-r--r-- 1 root root 2014 May 11 21:39 /opt/test_yjs_bak.sql
</code></pre><p>6）备份后检查备份的sql数据内容：过滤无用信息</p>
<pre><code>grep -E -v &quot;#|\/|^$|--&quot; /opt/test_yjs_bak.sql
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-32.png" alt="m-32"> </p>
<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>select &lt;字段1,字段2，…&gt; from &lt;表名&gt; where &lt;表达式&gt;
</code></pre><p>其中，select,from,where是不能随便改的，是关键字，支持大小写</p>
<h2 id="查看表test1中所有数据"><a href="#查看表test1中所有数据" class="headerlink" title="查看表test1中所有数据"></a>查看表test1中所有数据</h2><p>1）进入指定库后查询</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-33.png" alt="m-33"> </p>
<p>查看mysql库的用户</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-34.png" alt="m-34"> </p>
<h2 id="根据指定条件查询表的部分数据"><a href="#根据指定条件查询表的部分数据" class="headerlink" title="根据指定条件查询表的部分数据"></a>根据指定条件查询表的部分数据</h2><p>1）例：查看表test1中第一行数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-35.png" alt="m-35"> </p>
<p>2）指定固定条件查询数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-36.png" alt="m-36"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-37.png" alt="m-37">  </p>
<p>注意：字符类型的查询条件的值要带引号 </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-38-1.png" alt="m-38"></p>
<p>3）指定固定条件范围查询数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-38.png" alt="m-39"></p>
<p>4）其他查询功能</p>
<p>排序功能：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-39.png" alt="m-40"> </p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="建立几个关联表"><a href="#建立几个关联表" class="headerlink" title="建立几个关联表"></a>建立几个关联表</h3><p>要实现多表连表查询，就需要关联表及数据，表名及字段内容如下：</p>
<pre><code>学生表：Student(Sno,Sname,Ssex,Sage,Sdept)
-------(学号-主键，姓名，性别，年龄，所在系）

课程表：Course(Cno,Cname,Cpno,Ccredit)
-------(课程号-主键，课程名，选课，学分)


选课表：SC(Sno,Cno,Grade)
-------(学号-主键，课程号-主键，成绩)
</code></pre><h3 id="创建关联表语句"><a href="#创建关联表语句" class="headerlink" title="创建关联表语句"></a>创建关联表语句</h3><p>1）创建学生表</p>
<pre><code>drop table student;
create table student(
Sno int(10) NOT NULL COMMENT &apos;学号&apos;,
Sname varchar(16) NOT NULL COMMENT &apos;姓名&apos;,
Ssex char(2) NOT NULL COMMENT &apos;性别&apos;,
Sage tinyint(2)  NOT NULL default &apos;0&apos; COMMENT &apos;学生年龄&apos;,
Sdept varchar(16)  default NULL  COMMENT &apos;学生所在系别&apos;,
PRIMARY KEY  (Sno) ,
key index_Sname (Sname)
);
</code></pre><p>2）创建课程表</p>
<pre><code>create table course(
Cno int(10) NOT NULL COMMENT &apos;课程号&apos;,
Cname varchar(64) NOT NULL COMMENT &apos;课程名&apos;,
Ccredit tinyint(2) NOT NULL COMMENT &apos;学分&apos;,
PRIMARY KEY  (Cno)
);
</code></pre><p>3）创建选课表</p>
<pre><code>CREATE TABLE `SC` (
    SCid int(12) NOT NULL auto_increment COMMENT &apos;主键&apos;,
    `Cno` int(10) NOT NULL COMMENT &apos;课程号&apos;,
    `Sno` int(10) NOT NULL COMMENT &apos;学号&apos;,
    `Grade` tinyint(2) NOT NULL COMMENT &apos;学生成绩&apos;,
    PRIMARY KEY  (`SCid`)
);
</code></pre><h3 id="往关联表中填充数据"><a href="#往关联表中填充数据" class="headerlink" title="往关联表中填充数据"></a>往关联表中填充数据</h3><p>1）学生表插入数据：</p>
<pre><code>INSERT INTO student values(0001,&apos;路飞&apos;,&apos;男&apos;,17,&apos;计算机网络&apos;);
INSERT INTO student values(0002,&apos;索隆&apos;,&apos;男&apos;,19,&apos;网络安全&apos;);
INSERT INTO student values(0003,&apos;乌索普&apos;,&apos;男&apos;,18,&apos;网络媒体&apos;);
INSERT INTO student values(0004,&apos;娜美&apos;,&apos;女&apos;,17,&apos;旅游管理&apos;);
INSERT INTO student values(0005,&apos;香吉士&apos;,&apos;男&apos;,22,&apos;新东方厨校&apos;);
INSERT INTO student values(0006,&apos;妮可罗宾&apos;,&apos;女&apos;,28,&apos;古代历史&apos;);
</code></pre><p>2）课程表插入数据</p>
<pre><code>INSERT INTO course values(1001,&apos;Linux中高级运维&apos;,3);
INSERT INTO course values(1002,&apos;Linux高级架构师&apos;,5);
INSERT INTO course values(1003,&apos;MySQL高级Dba&apos;,4);
INSERT INTO course values(1004,&apos;Python运维开发&apos;,4);
INSERT INTO course values(1005,&apos;Java web开发&apos;,3);
</code></pre><p>3）选课表插入数据</p>
<pre><code>INSERT INTO SC(Sno,Cno,Grade)  values(0001,1001,4);
INSERT INTO SC(Sno,Cno,Grade) values(0001,1002,3);
INSERT INTO SC(Sno,Cno,Grade)  values(0001,1003,1);
INSERT INTO SC(Sno,Cno,Grade)  values(0001,1004,6);
INSERT INTO SC(Sno,Cno,Grade)  values(0002,1001,3);
INSERT INTO SC(Sno,Cno,Grade)  values(0002,1002,2);
INSERT INTO SC(Sno,Cno,Grade)  values(0002,1003,2);
INSERT INTO SC(Sno,Cno,Grade)  values(0002,1004,8);
INSERT INTO SC(Sno,Cno,Grade)  values(0003,1001,4);
INSERT INTO SC(Sno,Cno,Grade)  values(0003,1002,4);
INSERT INTO SC(Sno,Cno,Grade)  values(0003,1003,2);
INSERT INTO SC(Sno,Cno,Grade)  values(0003,1004,8);
INSERT INTO SC(Sno,Cno,Grade)  values(0004,1001,1);
INSERT INTO SC(Sno,Cno,Grade)  values(0004,1002,1);
INSERT INTO SC(Sno,Cno,Grade)  values(0004,1003,2);
INSERT INTO SC(Sno,Cno,Grade)  values(0004,1004,3);
INSERT INTO SC(Sno,Cno,Grade)  values(0005,1001,5);
INSERT INTO SC(Sno,Cno,Grade)  values(0005,1002,3);
INSERT INTO SC(Sno,Cno,Grade)  values(0005,1003,2);
INSERT INTO SC(Sno,Cno,Grade)  values(0005,1004,9);
</code></pre><p>查询SC表结果：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-40.png" alt="m-40"> </p>
<p>连表查询：</p>
<pre><code>select student.Sno,student.Sname,course.Cname,SC.Grade from student,course,SC where student.Sno=SC.Sno and course.Cno=SC.Cno;
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-41.png" alt="m-41">  </p>
<h3 id="查询语句执行计划"><a href="#查询语句执行计划" class="headerlink" title="查询语句执行计划"></a>查询语句执行计划</h3><p>使用explain查询select查询语句执行计划，即使用索引情况</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-42.png" alt="m-42"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-43.png" alt="m-43"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-44.png" alt="m-44">  </p>
<h1 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据"></a>修改表中数据</h1><h2 id="修改表中指定条件固定列的数据"><a href="#修改表中指定条件固定列的数据" class="headerlink" title="修改表中指定条件固定列的数据"></a>修改表中指定条件固定列的数据</h2><p>1）命令语法：</p>
<pre><code>update 表名 set 字段=新值，... where 条件
</code></pre><p>2）修改指定的行字段内容</p>
<p> 1、查看要修改的表</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-45.png" alt="m-45">  </p>
<p>2、修改id为3的行的名字为xiangjishi</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-46.png" alt="m-46"> </p>
<h2 id="修改表中所有行的数据"><a href="#修改表中所有行的数据" class="headerlink" title="修改表中所有行的数据"></a>修改表中所有行的数据</h2><p>为了演示效果我们往多插入几行数据</p>
<pre><code>INSERT INTO test1 values(1,&apos;wusuopu&apos;,19);
INSERT INTO test1 values(2,&apos;namei&apos;,18);
INSERT INTO test1 values(5,&apos;lubing&apos;,28); 
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-47.png" alt="m-47">  </p>
<p>1、不带条件更改所有表的记录</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-48.png" alt="m-48"><br>update一个记录，结果忘了加where，于是悲剧发生了！ </p>
<h2 id="防止误操作mysql数据库的例子"><a href="#防止误操作mysql数据库的例子" class="headerlink" title="防止误操作mysql数据库的例子"></a>防止误操作mysql数据库的例子</h2><p>1、mysql帮助说明</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-49.png" alt="m-49"> </p>
<p>2、指定-U登录测试</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-50.png" alt="m-50"> </p>
<p>提示：不加条件无法删除，目的达到。</p>
<p>3、做成别名防止DBA误操作</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-51.png" alt="m-51"> </p>
<p>结论：在mysql命令加上选项-U后，当发出没有WHERE或LIMIT关键字的UPDATE或DELETE时，mysql程序拒绝执行</p>
<h1 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h1><h2 id="实践删除表中的数据"><a href="#实践删除表中的数据" class="headerlink" title="实践删除表中的数据"></a>实践删除表中的数据</h2><p>1）语法命令：</p>
<pre><code>delete from 表名 where 表达式
</code></pre><p>1、实践，例如：删除表test1 中name等于lufei的记录</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-52.png" alt="m-52"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-53.png" alt="m-53"> </p>
<p>命令：</p>
<pre><code>truncate table 表名
truncate table test1;    #清空表中所有内容
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-54.png" alt="m-54"> </p>
<p>truncate table test1;和delete from test1;区别</p>
<p>1、truncate table test1;更快。清空物理文件</p>
<p>2、delete from test1;逻辑清除，按行删。</p>
<h1 id="增删改表的字段"><a href="#增删改表的字段" class="headerlink" title="增删改表的字段"></a>增删改表的字段</h1><h2 id="命令语法及默认添加演示"><a href="#命令语法及默认添加演示" class="headerlink" title="命令语法及默认添加演示"></a>命令语法及默认添加演示</h2><p>1）命令语法：</p>
<pre><code>alter table 表名 add 字段 类型 其他；
</code></pre><p>2）测试表数据</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-55.png" alt="m-55"> </p>
<p>3）实践案例<br>例：在表test1中添加字段sex，age，qq，类型分别为char(4),int(4),varchar(15)</p>
<p>4）执行的命令演示<br>1、添加性别列，默认语句</p>
<pre><code>alter table test1 add sex char(4); 
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-56.png" alt="m-56">  </p>
<p>提示：默认增加列增加到所有字段的结尾</p>
<h2 id="指定添加列在表里的位置"><a href="#指定添加列在表里的位置" class="headerlink" title="指定添加列在表里的位置"></a>指定添加列在表里的位置</h2><p>1、定添加年龄列到name列后面的位置</p>
<pre><code>alter table test1 add age int(4) after name;     #在name列后增加age列
</code></pre><p>2、在第一列添加qq字段</p>
<pre><code>alter table test1 add qq varchar(15) first; 
</code></pre><p><img src="http://p924w4b7r.bkt.clouddn.com/m-57.png" alt="m-57">  </p>
<h3 id="生产案例"><a href="#生产案例" class="headerlink" title="生产案例"></a>生产案例</h3><p>生产环境多个复杂添加修改多字段信息的案例</p>
<p>1）增加1个字段：</p>
<pre><code>alter table &apos;etiantian&apos; add &apos;firstphoto_url&apos; varchar(255) default null comment &apos;第一张图片url&apos;;
</code></pre><p>2）增2个字段：</p>
<pre><code>alter table &apos;basic&apos; add &apos;adtml_top&apos; varchar(1024) default null comment &apos;顶部广告html&apos;, and  &apos;adtml_right&apos; varchar(1024) default null comment &apos;右侧广告html&apos;;
</code></pre><p>3）修改字段类型：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-58.png" alt="m-58"> </p>
<p>4）修改字段名称 </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-59.png" alt="m-59"> </p>
<h1 id="mysql的重命名"><a href="#mysql的重命名" class="headerlink" title="mysql的重命名"></a>mysql的重命名</h1><h2 id="命令语法："><a href="#命令语法：" class="headerlink" title="命令语法："></a>命令语法：</h2><pre><code>rename table 原表名 to 新表名；
</code></pre><p>例如： 在表test1名字更改为 test1_change</p>
<p>执行结果：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-60.png" alt="m-60"> </p>
<h2 id="alter法"><a href="#alter法" class="headerlink" title="alter法"></a>alter法</h2><p><img src="http://p924w4b7r.bkt.clouddn.com/m-61.png" alt="m-61">  </p>
<h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p>命令语法： </p>
<pre><code>drop table &lt;表名&gt;
</code></pre><p>例如：删除表名为test的表</p>
<p>执行结果： </p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-62.png" alt="m-62">   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动与关闭MySQL&quot;&gt;&lt;a href=&quot;#启动与关闭MySQL&quot; class=&quot;headerlink&quot; title=&quot;启动与关闭MySQL&quot;&gt;&lt;/a&gt;启动与关闭MySQL&lt;/h1&gt;&lt;h2 id=&quot;单实例MySQL启动与关闭方法&quot;&gt;&lt;a href=&quot;#单实例MyS
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL系列（一）：MySQL源码安装</title>
    <link href="http://yjscloud.site/2018/04/22/MySQL%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AMySQL%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"/>
    <id>http://yjscloud.site/2018/04/22/MySQL系列（一）：MySQL源码安装/</id>
    <published>2018-04-22T02:35:14.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><pre><code>[root@mysql-1 ~]# uname -r
3.10.0-693.el7.x86_64
[root@mysql-1 ~]# cat /etc/redhat-release
CentOS Linux release 7.4.1708 (Core)
[root@mysql-1 ~]#
</code></pre><p>这里我用的是CentOS7.4最小化安装，对此我们还需要安装一下基础rpm包</p>
<pre><code>yum -y install  gcc*  vim wget
</code></pre><h1 id="安装相关包"><a href="#安装相关包" class="headerlink" title="安装相关包"></a>安装相关包</h1><p>（1）将我们需要用到合适的目录下<br><img src="http://p924w4b7r.bkt.clouddn.com/m-1.png" alt="m-1"></p>
<p>（2）解压cmake软件并安装</p>
<pre><code>tar xf cmake-2.8.8.tar.gz
cd cmake-2.8.8.tar.gz
./configure
gmake
gmake install
cd ../
</code></pre><p>（3）安装依赖包</p>
<pre><code>yum -y install ncurses-devel
</code></pre><h1 id="开始安装mysql"><a href="#开始安装mysql" class="headerlink" title="开始安装mysql"></a>开始安装mysql</h1><p>（1）首先我们先创建用户组</p>
<pre><code>groupadd mysql
useradd mysql -s /sbin/nologin -M -g mysql
</code></pre><p>（2）解压编译mysql</p>
<pre><code>tar zxf mysql-5.5.32.tar.gz
cd mysql-5.5.32/
</code></pre><p>（3）在终端执行如下命令配置mysql:</p>
<pre><code>cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.5.32 \
-DMYSQL_DATADIR=/application/mysql-5.5.32/data \
-DMYSQL_UNIX_ADDR=/application/mysql-5.5.32/tmp/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \
-DENABLED_LOCAL_INFILE=ON \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_FEDERATED_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
-DWITHOUT_PARTITION_STORAGE_ENGINE=1 \
-DWITH_FAST_MUTEXES=1 \
-DWITH_ZLIB=bundled \
-DENABLED_LOCAL_INFILE=1 \
-DWITH_READLINE=1 \
-DWITH_EMBEDDED_SERVER=1 \
-DWITH_DEBUG=0
</code></pre><p>输出：Build files have  been written to :/root/tools/mysql-5.5.32则说明编译过程没有出错，编译过程可以配置很多选项，具体可以参考官方文档。</p>
<p>（4）然后执行：</p>
<pre><code>make
</code></pre><p>此过程会比较慢，编译过程输出的警告信息可以忽略</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-2.png" alt="m-2"></p>
<pre><code>make install
ln -s /application/mysql-5.5.32/ /application/mysql
</code></pre><p>如果上述操作没有出现错误，则mysql5.5.32软件cmake方式的安装就算成功了。</p>
<p>（5）选择配置文件</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-3.png" alt="m-3"></p>
<p>注意要在tools目录下执行这个命令</p>
<pre><code>/bin/cp mysql-5.5.32/support-files/my-small.cnf /etc/my.cnf
</code></pre><p>（6）配置环境变量</p>
<pre><code>echo &apos;export PATH=/application/mysql/bin:$PATH&apos; &gt;&gt;/etc/profile
tail -l /etc/profile
source /etc/profile
echo $PATH
</code></pre><p>（7）初始化数据文件（容易出错的步骤）</p>
<pre><code>mkdir -p /application/mysql/data  #查看一下是否存在这个目录，如果没有就建这个立mysql数据文件目录
chown -R mysql.mysql /application/mysql/  #授权mysql用户访问mysql的安装目录
chmod -R 1777 /tmp   #调整/tmp权限，否则初始化会错误
cd /application/mysql/scripts/ #进入相关目录
./mysql_install_db --basedir=/application/mysql --datadir=/application/mysql/data --user=mysql #安装mysql数据库文件，注意命令路径
</code></pre><p>输出的正确提示，两个ok表示成功，有警告可以忽略，有ERROR要处理。</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-4.png" alt="m-4"></p>
<p>（8）设置常规方式启动关闭脚本</p>
<pre><code>cd /root/tools/mysql-5.5.32/
cp support-files/mysql.server /etc/init.d/mysqld  #拷贝mysql启动脚本到/etc/init.d/下
chmod 700 /etc/init.d/mysqld   #授权700权限，即脚本可执行
</code></pre><p>启动mysql</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-5.png" alt="m-5"></p>
<p>设置mysql开机自启</p>
<pre><code>chkconfig mysqld on
</code></pre><h1 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h1><p>为数据库设置密码：</p>
<pre><code>/application/mysql/bin/mysqladmin -u root password &apos;yjscloud&apos;
</code></pre><p>（1）删除test库：</p>
<p><img src="http://p924w4b7r.bkt.clouddn.com/m-6.png" alt="m-6"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-7.png" alt="m-7"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-8.png" alt="m-8"><br><img src="http://p924w4b7r.bkt.clouddn.com/m-9.png" alt="m-9"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查看系统信息&quot;&gt;&lt;a href=&quot;#查看系统信息&quot; class=&quot;headerlink&quot; title=&quot;查看系统信息&quot;&gt;&lt;/a&gt;查看系统信息&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;[root@mysql-1 ~]# uname -r
3.10.0-693.el7.x86_
    
    </summary>
    
      <category term="数据库学习笔记" scheme="http://yjscloud.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL系列" scheme="http://yjscloud.site/tags/MySQL%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Kolla容器化部署OpenStack：多节点部署</title>
    <link href="http://yjscloud.site/2018/04/21/Kolla%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2OpenStack%EF%BC%9A%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://yjscloud.site/2018/04/21/Kolla容器化部署OpenStack：多节点部署/</id>
    <published>2018-04-21T13:59:18.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们已经部署了单节点的OpenStack环境，这次我们尝试部署一个多节点的环境(包括1个controller节点，1个compute节点，1个storage节点)，之前的单节点因为已经安装了kolla-ansible和docker registry，我们把它当做部署节点。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>准备三台服务器，分别作为controller节点，compute节点，storage节点。其中controller节点3张网卡，compute、storage节点2张网卡。操作系统为centos7.4</p>
<p>1）关闭Selinux </p>
<pre><code>vi /etc/sysconfig/selinux
SELINUX=disabled
</code></pre><p>2）关闭firewalld</p>
<pre><code>systemctl stop firewalld
systemctl disable firewalld
</code></pre><p>3）设置主机名，hosts文件 </p>
<pre><code>vi /etc/hosts
172.16.31.130 control01 
172.16.31.131 controller 
172.16.31.132 compute 
172.16.31.133 storage
</code></pre><p>4）storage节点加盘 </p>
<p>为storage节点划分磁盘，作为cinder的lvm后端，storage节点有13tb的硬盘采用parted分区，分区过程略去</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-17.png" alt="k-17"></p>
<p>创建pv、vg</p>
<pre><code>[root@storage ~]# pvcreate /dev/sdb
Physical volume &quot;/dev/sdb&quot; successfully created.
[root@storage ~]# vgcreate cinder-volumes /dev/sdb
Volume group &quot;cinder-volumes&quot; successfully created
</code></pre><p>修改配置 </p>
<pre><code>vi /etc/lvm/lvm.conf
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/k-18.png" alt="k-18"></p>
<p>重启lvm服务</p>
<pre><code>systemctl restart lvm2-lvmetad.service
</code></pre><p>5）确认节点配置</p>
<p>controller 3 张网卡 </p>
<p>compute 2 张网卡 </p>
<p>storage 2 张网卡(其实一张即可，因为不需要tunnel网络) </p>
<p>storage 磁盘已经分区</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-19.png" alt="k-19"></p>
<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1）下载相关docker rpm包</p>
<p>这里我已经到docker把docker的rpm下载下来了，我们上传的相关的目录下，当然还是需要配centos和epel的源才能正常安装的</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-20.png" alt="k-20"></p>
<p>2）安装Docker 1.12.6（三台服务器都要安装）</p>
<pre><code>yum install docker-engine-* -y
</code></pre><p>在各个节点安装</p>
<pre><code>yum install python-docker-py -y
</code></pre><p>3）设置Docker</p>
<pre><code>mkdir /etc/systemd/system/docker.service.d
tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; &apos;EOF&apos;
[Service]
MountFlags=shared
EOF
</code></pre><p>4）重启相关服务</p>
<pre><code>systemctl daemon-reload
systemctl enable docker
systemctl restart docker
</code></pre><p>5）编辑/usr/lib/systemd/system/docker.service文件</p>
<pre><code>ExecStart=/usr/bin/dockerd --insecure-registry 172.16.31.130:4000
</code></pre><p>6）重启Docker服务</p>
<pre><code>systemctl daemon-reload
systemctl restart docker
</code></pre><h1 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h1><p>部署节点和其他节点免密登陆</p>
<pre><code>[root@control01 ~]# ssh-keygen 
[root@control01 ~]# ssh-copy-id controller 
[root@control01 ~]# ssh-copy-id compute 
[root@control01 ~]# ssh-copy-id storage
</code></pre><h1 id="部署OpenStack"><a href="#部署OpenStack" class="headerlink" title="部署OpenStack"></a>部署OpenStack</h1><p>1）停止部署节点容器</p>
<p>因为部署节点之前已经部署了All in One的OpenStack，为了降低资源占用，我们可以先停止本节的OpenStack相关容器。</p>
<pre><code>[root@control01 ~]# cd /root/kolla-ansible-4.0.3.dev36/tools/
[root@control01 tools]# . kolla-ansible stop
</code></pre><p>2）修改multinode文件</p>
<pre><code>[root@control01 ~]# cd /root/kolla-ansible-4.0.3.dev36/
[root@control01 kolla-ansible-4.0.3.dev36]# cp ansible/inventory/* /home/
[root@control01 ~]# cd /home
[root@control01 home]# ls
all-in-one  multinode
[root@control01 home]# cp multinode mymultinode
[root@control01 home]# vi mymultinode

[control]
controller  
[network]
controller
[compute]
compute
[monitoring]
controller
[storage]
storage
......
</code></pre><p>里面的内容很好理解，表示一个控制节点 controller，网络节点也安装到控制节点，一个计算节点 compute ，一个存储节点 storage，后面的部分不用修改</p>
<p>3）修改global和password配置文件</p>
<pre><code>[root@control01 ~]# cd /etc/kolla/
[root@control01 kolla]# vi globals.yml
</code></pre><p>————————————分割线———————————————</p>
<pre><code>kolla_internal_vip_address: &quot;172.16.31.131&quot;    外部访问地址，如果是非HA环境，是控制节点IP

docker_registry: &quot;172.16.31.130:4000&quot;   镜像库，用部署节点的镜像库
docker_namespace: &quot;99cloud&quot;                 

network_interface: &quot;eno1&quot;   网络接口，默认就这一个接口，这里我们以eth0作为API网络                    
api_interface: &quot;{{ network_interface }}&quot;   用的是eno2
tunnel_interface: &quot;eno2&quot;                   eno2作为vxlan的承载网络
neutron_external_interface: &quot;eno3&quot;          eno3作为外部网络

enable_cinder: &quot;yes&quot;                启用cinder
enable_cinder_backend_lvm: &quot;yes&quot;    cinder后端用lvm
cinder_volume_group: &quot;cinder-volumes&quot;  

enable_haproxy: &quot;no&quot;   不启用haproxy
</code></pre><p>————————————分割线———————————————</p>
<pre><code>[root@control01 kolla]# vi passwords.yml
keystone_admin_password: admin  admin用户登录密码
</code></pre><p>4）部署前检查</p>
<pre><code>[root@control01 ~]# cd /root/kolla-ansible-4.0.3.dev36/tools/
[root@control01 ~]# . kolla-ansible prechecks -i /home/mymultinode
</code></pre><p>没有报错即可正常部署</p>
<p>5）部署</p>
<pre><code>[root@control01 tools]# . kolla-ansible deploy -i /home/mymultinode
</code></pre><p>开始部署，等待大约20分钟，部署完成，一般不会有什么问题，如果有问题，则需要根据报错及容器日志查找原因</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-21.png" alt="k-21"></p>
<p>登录dashboard<br><a href="http://172.16.31.131" target="_blank" rel="external">http://172.16.31.131</a></p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-22.png" alt="k-22"></p>
<p>登录系统，查看各个服务正常，表明部署成功。</p>
<p>可以通过docker ps命令查看各个节点运行的容器</p>
<p>controller节点：</p>
<pre><code>[root@controller ~]# docker ps
CONTAINER ID        IMAGE                                                                        COMMAND             CREATED             STATUS              PORTS               NAMES
1ecab1b4246e        172.16.31.130:4000/99cloud/centos-source-horizon:4.0.2.1                     &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             horizon
b264ea5467ff        172.16.31.130:4000/99cloud/centos-source-heat-engine:4.0.2.1                 &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             heat_engine
08ab0aa8603c        172.16.31.130:4000/99cloud/centos-source-heat-api-cfn:4.0.2.1                &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             heat_api_cfn
6f6aba4804a2        172.16.31.130:4000/99cloud/centos-source-heat-api:4.0.2.1                    &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             heat_api
67729f946b23        172.16.31.130:4000/99cloud/centos-source-neutron-metadata-agent:4.0.2.1      &quot;kolla_start&quot;       24 hours ago        Up 24 hours                      neutron_metadata_agent
f8f8d9f766e9        172.16.31.130:4000/99cloud/centos-source-neutron-l3-agent:4.0.2.1            &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             neutron_l3_agent
fd3a8ca63fdf        172.16.31.130:4000/99cloud/centos-source-neutron-dhcp-agent:4.0.2.1          &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             neutron_dhcp_agent
c9f9f72090a4        172.16.31.130:4000/99cloud/centos-source-neutron-openvswitch-agent:4.0.2.1   &quot;kolla_start&quot;       24 hours ago        Up 24 hours                  neutron_openvswitch_agent
9f19bca0759c        172.16.31.130:4000/99cloud/centos-source-neutron-server:4.0.2.1              &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             neutron_server
e1286083b3f7        172.16.31.130:4000/99cloud/centos-source-openvswitch-vswitchd:4.0.2.1        &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             openvswitch_vswitchd
dd4986364575        172.16.31.130:4000/99cloud/centos-source-openvswitch-db-server:4.0.2.1       &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             openvswitch_db
a6692acea93f        172.16.31.130:4000/99cloud/centos-source-nova-novncproxy:4.0.2.1             &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_novncproxy
cd704f0bc2c7        172.16.31.130:4000/99cloud/centos-source-nova-consoleauth:4.0.2.1            &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_consoleauth
105978eda1a9        172.16.31.130:4000/99cloud/centos-source-nova-conductor:4.0.2.1              &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_conductor
9d9e7571d7dd        172.16.31.130:4000/99cloud/centos-source-nova-scheduler:4.0.2.1              &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_scheduler
7436ca003817        172.16.31.130:4000/99cloud/centos-source-nova-api:4.0.2.1                    &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_api
ae8d830091d3        172.16.31.130:4000/99cloud/centos-source-nova-placement-api:4.0.2.1          &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             placement_api
f053087cfde5        172.16.31.130:4000/99cloud/centos-source-cinder-scheduler:4.0.2.1            &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cinder_scheduler
8c849182ee63        172.16.31.130:4000/99cloud/centos-source-cinder-api:4.0.2.1                  &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cinder_api
129996bd76ee        172.16.31.130:4000/99cloud/centos-source-glance-registry:4.0.2.1             &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             glance_registry
fcc184936be5        172.16.31.130:4000/99cloud/centos-source-glance-api:4.0.2.1                  &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             glance_api
06a35ba7eb7f        172.16.31.130:4000/99cloud/centos-source-keystone:4.0.2.1                    &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             keystone
6821886162bc        172.16.31.130:4000/99cloud/centos-source-rabbitmq:4.0.2.1                    &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             rabbitmq
04b556da8365        172.16.31.130:4000/99cloud/centos-source-mariadb:4.0.2.1                     &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             mariadb
859a1d8d0137        172.16.31.130:4000/99cloud/centos-source-cron:4.0.2.1                        &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cron
4e7230af5339        172.16.31.130:4000/99cloud/centos-source-kolla-toolbox:4.0.2.1               &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             kolla_toolbox
50be20c91704        172.16.31.130:4000/99cloud/centos-source-fluentd:4.0.2.1                     &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             fluentd
72b2538e1beb        172.16.31.130:4000/99cloud/centos-source-memcached:4.0.2.1                   &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             memcached
</code></pre><p>compute节点：</p>
<pre><code>[root@compute ~]# docker ps
CONTAINER ID        IMAGE                                                                        COMMAND             CREATED             STATUS              PORTS               NAMES
0f954ef9095e        172.16.31.130:4000/99cloud/centos-source-neutron-openvswitch-agent:4.0.2.1   &quot;kolla_start&quot;       24 hours ago        Up 24 hours                  neutron_openvswitch_agent
8f62c376e2b5        172.16.31.130:4000/99cloud/centos-source-openvswitch-vswitchd:4.0.2.1        &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             openvswitch_vswitchd
005c3dd582a9        172.16.31.130:4000/99cloud/centos-source-openvswitch-db-server:4.0.2.1       &quot;kolla_start&quot;       24 hours ago        Up 24 hours                             openvswitch_db
d6a9b676c0ad        172.16.31.130:4000/99cloud/centos-source-nova-compute:4.0.2.1                &quot;kolla_start&quot;       36 hours ago        Up 36 hours                             nova_compute
fbc66c3f40ba        172.16.31.130:4000/99cloud/centos-source-nova-libvirt:4.0.2.1                &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             nova_libvirt
6f942f376c83        172.16.31.130:4000/99cloud/centos-source-nova-ssh:4.0.2.1                    &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             nova_ssh
4872cfb2b025        172.16.31.130:4000/99cloud/centos-source-iscsid:4.0.2.1                      &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             iscsid
c55ec16b0752        172.16.31.130:4000/99cloud/centos-source-cron:4.0.2.1                        &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cron
426d77add095        172.16.31.130:4000/99cloud/centos-source-kolla-toolbox:4.0.2.1               &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             kolla_toolbox
5f959b2372f0        172.16.31.130:4000/99cloud/centos-sourc
</code></pre><p>stroage节点：</p>
<pre><code>[root@cinder ~]# docker ps
CONTAINER ID        IMAGE                                                            COMMAND             CREATED             STATUS              PORTS               NAMES
7eca045eeff1        172.16.31.130:4000/99cloud/centos-source-cinder-backup:4.0.2.1   &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cinder_backup
bcdf196510f2        172.16.31.130:4000/99cloud/centos-source-cinder-volume:4.0.2.1   &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cinder_volume
d59fc8ec7716        172.16.31.130:4000/99cloud/centos-source-tgtd:4.0.2.1            &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             tgtd
7a8d9dab2755        172.16.31.130:4000/99cloud/centos-source-iscsid:4.0.2.1          &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             iscsid
ea471af172de        172.16.31.130:4000/99cloud/centos-source-cron:4.0.2.1            &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             cron
4b41ebf3ea62        172.16.31.130:4000/99cloud/centos-source-kolla-toolbox:4.0.2.1   &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             kolla_toolbox
91c086f63421        172.16.31.130:4000/99cloud/centos-source-fluentd:4.0.2.1         &quot;kolla_start&quot;       37 hours ago        Up 37 hours                             fluentd
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们已经部署了单节点的OpenStack环境，这次我们尝试部署一个多节点的环境(包括1个controller节点，1个compute节点，1个storage节点)，之前的单节点因为已经安装了kolla-ansible和docker registry，我们把它当做部署节点
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Kolla自动化部署" scheme="http://yjscloud.site/tags/Kolla%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Kolla容器化部署OpenStack：单点部署</title>
    <link href="http://yjscloud.site/2018/04/20/Kolla%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2OpenStack%EF%BC%9A%E5%8D%95%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://yjscloud.site/2018/04/20/Kolla容器化部署OpenStack：单点部署/</id>
    <published>2018-04-20T12:37:32.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>陈沙克老师发布了一个kolla的Ocata的ISO,这个ISO把所有需要的软件及Docker镜像都集成起来，安装应该非常方便，所以决定试一试。<br>首先我在一台16g的戴尔服务器上面安装这个iso，配置2块网卡，一块为em1(隧道网络，网段为192.168.0.0/24)，一块为em2(作为作为管理和外部网络，网段为172.16.31.0/24)。<br>注意硬盘至少需要200G(安装完成后实际占用空间为25G以内)，否则无法进行安装。</p>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>（1）使用iso引导，选择 install centos7.3 and kolla</p>
<p>可以使用tab键，修改ip地址和主机名，默认ip地址为10.99.0.2，主机名为control01</p>
<p>这里需要注意，安装完成后，需要设置好网卡1、网卡2的IP地址，最好固定ip地址！网卡名称分别为em1和em2，IP地址分别为192.168.0.130和172.16.31.130</p>
<p>（2）安装系统后，登录系统(root密码为99cloud)，首先要进行如下修改：</p>
<p>1）/etc/hosts 文件需要修改<br>10.99.0.2 control01 改为 172.16.31.0.130 control01 </p>
<p>2）/etc/kolla/globals.yml 文件里面2个IP地址由10.99.0.2替换为172.16.31.130</p>
<p>3）/etc/kolla/globals.yml 文件中  neutron_external_interface: “docker0” 改为neutron_external_interface: “em2”</p>
<p>然后进行部署：</p>
<pre><code>/root/kolla-ansible-4.0.3.dev36/tools/kolla-ansible deploy
</code></pre><p>部署过程中，如果发现下面类似的错误，则需要进入容器，查看日志进行排错。<br>下面这个错误原因就是RabbitMQ容器中的服务没有正常启动(问题1造成)而导致nova-compute服务无法启动。 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-1.png" alt="k-1"></p>
<p>遇到的最后一个问题，就是  neutron_openvswitch_agent 容器无法正常启动，排查的结果是  openvswitch_vswitchd 容器里面的 br-ex 下面的port应该由docker0改为em2(外网网卡)</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-2.png" alt="k-2"></p>
<p>dashboard访问地址  <a href="http://172.16.31.130/" target="_blank" rel="external">http://172.16.31.130/</a> </p>
<p>username admin </p>
<p>password 99cloud</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-3.png" alt="k-3"></p>
<h1 id="后续测试"><a href="#后续测试" class="headerlink" title="后续测试"></a>后续测试</h1><p>1）上传镜像cirros </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-4.png" alt="k-4"></p>
<p>2）创建flavor </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-5.png" alt="k-5"></p>
<p>3）创建一个vxlan网络 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-6.png" alt="k-6"></p>
<p>4）创建一个外部网络 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-7.png" alt="k-7"></p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-8.png" alt="k-8"></p>
<p>5）添加路由router1，可以让内部网络连接到外网</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-9.png" alt="k-9"></p>
<p>6）启动2个实例，其中给test1添加浮动IP </p>
<p>如果实例无法启动的话进行如下修改（物理机环境不会出现这个情况） </p>
<p>问题描述： </p>
<p>VMware虚拟机作为OpenStack计算节点，如果安装的操作系统是CentOS7.3，则在此计算节点放置的虚拟机无法正常启动，报如下错误： </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-10.png" alt="k-10"></p>
<p>在创建计算节点时，为了能让 KVM 能创建嵌套的虚机，要把 CPU 的虚拟化功能打开。如下图在 VMWare 中设置以下 CPU 的模式。</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-11.png" alt="k-11"></p>
<p>用以下命令确认 CPU 支持虚拟化。 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-12.png" alt="k-12"></p>
<p>nova的配置如下：</p>
<pre><code>/etc/nova/nova.conf
[libvirt]
virt_type = kvm
</code></pre><p>已经验证，如果计算节点安装的是CentOS7.2或Ubuntu操作系统，则不会报上面的错误。</p>
<p>解决方案： </p>
<p>修改nova的配置：</p>
<pre><code>/etc/nova/nova.conf
[libvirt]
virt_type = qemu
cpu_mode = none
</code></pre><p>重启 nova-compute即可。</p>
<p>就算CPU支持虚拟化，也得设置 virt_type = qemu ，否则还是报错。</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-13.png" alt="k-13"></p>
<p>7) 默认安全组添加两条规则，支持外部ping通内部、ssh登陆内部 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-14.png" alt="k-14"></p>
<p>8）ping测试</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-15.png" alt="k-15"></p>
<p>虚拟机之间可以互相通信</p>
<p>绑定浮动ip后ping外网ip</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/k-16.png" alt="k-16"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;陈沙克老师发布了一个kolla的Ocata的ISO,这个ISO把所有需要的软件及Docker镜像都集成起来，安装应该非常方便，所以决定试一试。&lt;br&gt;首先我在一台16g的戴尔服务器上面安装这个iso，配置2块网卡，一块为em1(隧道网络，网段为192.168.0.0/24)
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Kolla自动化部署" scheme="http://yjscloud.site/tags/Kolla%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack排错（一）：Cinder僵尸卷删除</title>
    <link href="http://yjscloud.site/2018/04/12/OpenStack%E6%8E%92%E9%94%99-%E4%B8%80-cinder%E5%83%B5%E5%B0%B8%E5%8D%B7%E5%88%A0%E9%99%A4/"/>
    <id>http://yjscloud.site/2018/04/12/OpenStack排错-一-cinder僵尸卷删除/</id>
    <published>2018-04-12T12:14:21.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理报错的大致思路"><a href="#处理报错的大致思路" class="headerlink" title="处理报错的大致思路"></a>处理报错的大致思路</h1><p>(1)到数据库cinder表中找到volumes，将其中对应要删除的卷的状态由error_deleting改为deleted；</p>
<p>(2)针对lvm，可以用命令lvdisplay列出所有卷的信息，如果现在应用命令lvremove来删除相应的卷，则会提示要删除的卷正在使用中，所以我们使用命令lsof查看相应卷所占用的进程，然后kill这个进程；</p>
<p>(3)应用命令lvremove来删除相应的卷；</p>
<p>(4)此时问题貌似已经解决，因为已经可以正确地执行cinder中命令，要删除的卷的记录也已经删除。但是这里还有个问题，默认的建立卷的最大数目为10，如果之前删除的僵尸卷的数目为1，但是此时当你建立卷的数目为9个时，再尝试建立新卷时，就会提示已经达到卷的数目的最大值。解决方法就是到cinder数据表中找到quota_usages，将其中in_use中的数据减少相应的删除的僵尸卷的数目即可。</p>
<p>备注：fuser命令在psmisc包中</p>
<h1 id="第一种情况的僵尸卷"><a href="#第一种情况的僵尸卷" class="headerlink" title="第一种情况的僵尸卷"></a>第一种情况的僵尸卷</h1><p><img src="http://oxysobnip.bkt.clouddn.com/err-1.png" alt="err-1"></p>
<p><img src="http://oxysobnip.bkt.clouddn.com/err-2.png" alt="err-2"></p>
<p><img src="http://oxysobnip.bkt.clouddn.com/err-3.png" alt="err-3"></p>
<p><img src="http://oxysobnip.bkt.clouddn.com/err-4.png" alt="err-4"></p>
<p>执行完上面的操作后进入云平台系统，更改需要删除云硬盘状态为“可用配额”，然后“删除云硬盘”，如果再界面上删除依旧没有执行成功或者依旧一直再删除中，就采用比较暴力的方式，修改云硬盘再数据库中的状态，因为此时云硬盘再存储设备（物理机）上已经删除了，仅仅还有数据库中还有该记录信息，但不能直接删除这条记录，数据库有外键依赖，而是要把cinder盘的deleted改成“1”,“1”即为删除，0为不删除。</p>
<p>进入数据库：</p>
<pre><code>mysql -uxxxx -pxxxx
</code></pre><p>选择数据库表：</p>
<pre><code>use cinder;
</code></pre><p>关闭数据库的键外查询：</p>
<pre><code>set foreign_key_checks=0;
</code></pre><p>select找到出错的数据：</p>
<pre><code>select id, status, display_name from volumes where id=&quot;af3e36ce-10ab-4daa-80e3-b71f16836a3b&quot;
</code></pre><p>修改数据库记录状体：</p>
<pre><code>update volumes set deleted=1 where id=&quot;af3e36ce-10ab-4daa-80e3-b71f16836a3b&quot;
</code></pre><p>操作完成后开启数据库的键外查询：</p>
<pre><code>set foreign_key_checks=0;
</code></pre><p>此时如果dashboard界面卷存储还没有恢复正常就需要进行如下操作！！！</p>
<p>（1）use cinder;</p>
<p>（2）select  *  from volumes;</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/err-5.png" alt="err-5"></p>
<p>在删除数据条目之前要临时关闭键值检查，否则删除操作无法进行：set foreign_key_checks=0;</p>
<p>删除操作完成后再运行此命令开启键值检查，确保数据库安全</p>
<p>找到之前出问题的卷并删除条目信息：</p>
<pre><code>delete from volumes where id=&apos;f0a030a6-7ff0-4765-ac47-1f1eed3c7582&apos;;
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/err-6.png" alt="err-6"></p>
<p>然后把in_use的数值修改为0即可</p>
<p>这里我就很暴力了直接删除了了条目：</p>
<pre><code>delete from quota_usages where project_id=&apos;232b14de024647159470ed97873ce774&apos;;
</code></pre><p>等下新建卷的时候就会恢复的，不建议这么做哦。</p>
<h1 id="第二种情况的僵尸卷"><a href="#第二种情况的僵尸卷" class="headerlink" title="第二种情况的僵尸卷"></a>第二种情况的僵尸卷</h1><p>思路和第一中情况差不多；</p>
<p>（1）通过lvdisplay |grep查询cinder对应的卷地址。</p>
<pre><code>root@compute:~# lvdisplay | grep &quot;8580f464-02e1-411c-bd94-a4af35e499a3&quot;
LV Path                /dev/cinder-volumes/volume-8580f464-02e1-411c-bd94-a4af35e499a3
LV Name                volume-8580f464-02e1-411c-bd94-a4af35e499a3
</code></pre><p>（2）通过lsof | grep查询占用cinder卷的端口</p>
<pre><code>lsof| grep &quot;8580f464-02e1-411c-bd94-a4af35e499a3&quot;
kill -9 76568
</code></pre><p>（3）通过lvremove删除相应的卷</p>
<pre><code>lvremove /dev/cinder-volumes/volume-8580f464-02e1-411c-bd94-a4af35e499a3
</code></pre><p>（4）报错处理<br>报错：device-mapper: remove ioctl on failed: Deviceor resource busy。设备繁忙</p>
<p>查看是否被打开：</p>
<pre><code>dmsetup info -c /dev/cinder-volumes/volume-8580f464-02e1-411c-bd94-a4af35e499a3 #查看是否被打开,如果看到open为4或者数字说明它被打开了，所以remove不掉。
</code></pre><p>查看被谁打开：</p>
<pre><code>fuser -m /dev/cinder-volumes/volume-8580f464-02e1-411c-bd94-a4af35e499a3 #查看是谁打开的，显示产用进程号
</code></pre><p>把占用设备的进程杀掉：</p>
<pre><code>kill -9 xxxx xxxx xxxx xxxx
</code></pre><p>重新执行上面验证的几个步骤，验证是否还有进程占用，如果看到open为0，表示现在没有进程占用，再执行lvremove删除相应的卷</p>
<p>（5）验证是否已经删除</p>
<pre><code>root@compute:~# lvdisplay | grep &quot;8580f464-02e1-411c-bd94-a4af35e499a3&quot;
</code></pre><p>（6）进入云平台系统，更改需要删除云硬盘状态为“可用配额”，然后“删除云硬盘”，如果再界面上删除依旧没有执行成功或者依旧一直再删除中，就采用比较暴力的方式，修改云硬盘再数据库中的状态，因为此时云硬盘再存储设备（物理机）上已经删除了，仅仅还有数据库中还有该记录信息，但不能直接删除这条记录，数据库有外键依赖，而是要把cinder盘的deleted改成“1”,“1”即为删除，0为不删除。</p>
<p>进入数据库：</p>
<pre><code>mysql -uxxxx -pxxxx
</code></pre><p>选择数据库表</p>
<pre><code>use cinder;
</code></pre><p>select找到出错的数据:</p>
<pre><code>select id, status, display_name from volumes where id=&apos;2d5d206d-0720-42aa-b178-3f3238177583&apos;;
</code></pre><p>修改数据库记录状体：</p>
<pre><code>update volumes set deleted=1 where id=&apos;2d5d206d-0720-42aa-b178-3f3238177583&apos;;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;处理报错的大致思路&quot;&gt;&lt;a href=&quot;#处理报错的大致思路&quot; class=&quot;headerlink&quot; title=&quot;处理报错的大致思路&quot;&gt;&lt;/a&gt;处理报错的大致思路&lt;/h1&gt;&lt;p&gt;(1)到数据库cinder表中找到volumes，将其中对应要删除的卷的状态由err
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack技能" scheme="http://yjscloud.site/tags/OpenStack%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>制作OpenStack镜像模板</title>
    <link href="http://yjscloud.site/2018/04/04/%E5%88%B6%E4%BD%9Copenstack%E9%95%9C%E5%83%8F%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yjscloud.site/2018/04/04/制作openstack镜像模板/</id>
    <published>2018-04-04T11:57:11.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在kvm服务器上安装一个虚拟机，然后进行如下配置：</p>
<h1 id="模板默认配置"><a href="#模板默认配置" class="headerlink" title="模板默认配置"></a>模板默认配置</h1><p>制作模版要配置yum源，安装常用软件，yum源可以配置为阿里的源，163的源最好有自己的源<br>需要安装的常用软件：</p>
<pre><code>yum install net-tools wget vim ntpdate bash-completion -y
</code></pre><h1 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h1><p>删除网卡配置文件中的UUID，网卡设为DHCP（如果内网有DHCP服务器）</p>
<p>（1）网卡配置文件一般如下</p>
<pre><code>TYPE=Ethernet
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp
NM_CONTROLLED=no
</code></pre><p>（2）centos6需要执行rm -rf /etc/udev/rules.d/70-persistent-net.rules（centos7不用）</p>
<p>（3）vim /etc/sysconfig/network<br>    添加如下内容：</p>
<pre><code>NOZERCONF=yes
</code></pre><p>NOZERCONF=yes的意思是禁用ZERCONF路由，ZERCONF又被叫做IPv4 Link-Local和Automatic Private IP Addressing。它是一个动态配置协议，系统可以通过它来连接到网络。很多linux发行版本都默认安装该服务，当系统无法连接DHCP server的时候，就会尝试通过ZERCONF来获取IP，一般这个IP地址段为169.254.0.0，我们在做openstack镜像的时候，这个需要禁用，因为VM如果DHCP获取不到IP就让它获取不到，别让它获取其他IP段的地址，所以这里我们禁用。</p>
<h1 id="安装cloud服务"><a href="#安装cloud服务" class="headerlink" title="安装cloud服务"></a>安装cloud服务</h1><pre><code>yum -y install cloud-utils cloud-init parted
</code></pre><h1 id="编辑cloud的配置文件"><a href="#编辑cloud的配置文件" class="headerlink" title="编辑cloud的配置文件"></a>编辑cloud的配置文件</h1><pre><code>vim /etc/cloud/cloud.cfg    
修改如下内容：
ssh_pwauth:    1
在cloud_init_modules:下面添加一个参数
 - resolv-conf                                                     
</code></pre><h1 id="配置脚本文件"><a href="#配置脚本文件" class="headerlink" title="配置脚本文件"></a>配置脚本文件</h1><pre><code>vim /etc/rc.d/rc.local
覆盖配置这个脚本（Netron配置文件）
chmod +x /etc/rc.d/rc.local
systemctl enable cloud-config.service cloud-final.service cloud-init-local.service cloud-init.service
</code></pre><p>最后重启系统</p>
<pre><code>reboot
</code></pre><h1 id="尝试运行命令检查服务"><a href="#尝试运行命令检查服务" class="headerlink" title="尝试运行命令检查服务"></a>尝试运行命令检查服务</h1><pre><code>systemctl list-dependencies
</code></pre><p>出现四个（cloud-）开头的服务且是绿色的就说明cloud-init安装成功</p>
<h1 id="关机和压缩"><a href="#关机和压缩" class="headerlink" title="关机和压缩"></a>关机和压缩</h1><p>找到刚才创建的镜像压缩一下</p>
<p>这里我们进入cd /opt目录压缩（ps：不能在镜像目录下压缩）</p>
<pre><code>virt-sparsify --compress /var/lib/libvirt/images/CentOS7.1 CentOS7.1.qcow2
</code></pre><p>原大小是2.5g压缩后是500mb左右（特别费时间）</p>
<pre><code>du -sh CentOS7.1.qcow2    #查看镜像大小
</code></pre><h1 id="安装windows模版"><a href="#安装windows模版" class="headerlink" title="安装windows模版"></a>安装windows模版</h1><p>安装windows的步骤就不再赘述</p>
<p>需要注意的两点是：</p>
<p>网卡选择 virtio模式</p>
<p>usb模式选择Hypervisor default </p>
<p>然后配置一下远程桌面</p>
<p>安装cloud-init（版本为0.99.dev26）,安装步骤较为简单不再赘述</p>
<p>要设置用户下一次登陆要修改密码，这是为了安全着想。</p>
<p>最后对cloud Initialization service Properties服务属性设置为 local system account</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在kvm服务器上安装一个虚拟机，然后进行如下配置：&lt;/p&gt;
&lt;h1 id=&quot;模板默认配置&quot;&gt;&lt;a href=&quot;#模板默认配置&quot; class=&quot;headerlink&quot; title=&quot;模板默认配置&quot;&gt;&lt;/a&gt;模板默认配置&lt;/h1&gt;&lt;p&gt;制作模版要配置yum源，安装常用软件，yu
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack技能" scheme="http://yjscloud.site/tags/OpenStack%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack O版搭建（四）：Cinder节点部署</title>
    <link href="http://yjscloud.site/2018/03/25/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ACinder%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://yjscloud.site/2018/03/25/OpenStack-O版搭建（四）：Cinder节点部署/</id>
    <published>2018-03-25T14:28:38.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在controller节点上配置"><a href="#在controller节点上配置" class="headerlink" title="在controller节点上配置"></a>在controller节点上配置</h1><h2 id="创建数据库用户并赋予权限"><a href="#创建数据库用户并赋予权限" class="headerlink" title="创建数据库用户并赋予权限"></a>创建数据库用户并赋予权限</h2><pre><code>CREATE DATABASE cinder;
GRANT ALL PRIVILEGES ON cinder.* TO &apos;cinder&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON cinder.* TO &apos;cinder&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
</code></pre><h2 id="创建cinder用户并赋予admin权限"><a href="#创建cinder用户并赋予admin权限" class="headerlink" title="创建cinder用户并赋予admin权限"></a>创建cinder用户并赋予admin权限</h2><pre><code>source /root/admin-openrc
openstack user create --domain default cinder --password devops
openstack role add --project service --user cinder admin
</code></pre><h2 id="创建volume服务"><a href="#创建volume服务" class="headerlink" title="创建volume服务"></a>创建volume服务</h2><pre><code>openstack service create --name cinder --description &quot;OpenStack Block Storage&quot; volume
openstack service create --name cinderv2 --description &quot;OpenStack Block Storage&quot; volumev2
</code></pre><h2 id="创建endpoint"><a href="#创建endpoint" class="headerlink" title="创建endpoint"></a>创建endpoint</h2><pre><code>openstack endpoint create --region RegionOne volume public http://controller:8776/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne volume internal http://controller:8776/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne volume admin http://controller:8776/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne volumev2 public http://controller:8776/v2/%\(tenant_id\)s
openstack endpoint create --region RegionOne volumev2 internal http://controller:8776/v2/%\(tenant_id\)s
openstack endpoint create --region RegionOne volumev2 admin http://controller:8776/v2/%\(tenant_id\)s
</code></pre><h2 id="安装cinder相关服务"><a href="#安装cinder相关服务" class="headerlink" title="安装cinder相关服务"></a>安装cinder相关服务</h2><pre><code>yum install openstack-cinder -y
</code></pre><h2 id="配置cinder配置文件"><a href="#配置cinder配置文件" class="headerlink" title="配置cinder配置文件"></a>配置cinder配置文件</h2><pre><code>cp /etc/cinder/cinder.conf /etc/cinder/cinder.conf.bak
&gt;/etc/cinder/cinder.conf
openstack-config --set /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/cinder/cinder.conf DEFAULT my_ip 10.1.1.120
openstack-config --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:devops@controller/cinder
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_type password
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_name service
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken username cinder
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken password devops
openstack-config --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp
</code></pre><h2 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h2><pre><code>su -s /bin/sh -c &quot;cinder-manage db sync&quot; cinder
</code></pre><h2 id="在controller上启动cinder服务，并设置开机启动"><a href="#在controller上启动cinder服务，并设置开机启动" class="headerlink" title="在controller上启动cinder服务，并设置开机启动"></a>在controller上启动cinder服务，并设置开机启动</h2><pre><code>systemctl enable openstack-cinder-api.service openstack-cinder-scheduler.service
systemctl restart openstack-cinder-api.service openstack-cinder-scheduler.service
systemctl status openstack-cinder-api.service openstack-cinder-scheduler.service
</code></pre><h1 id="在cinder节点上配置"><a href="#在cinder节点上配置" class="headerlink" title="在cinder节点上配置"></a>在cinder节点上配置</h1><p>Cinder节点这里我们需要额外的添加一个硬盘（/dev/sdb)用作cinder的存储服务 (注意！这一步是在cinder节点操作的）</p>
<pre><code>yum install lvm2 -y
</code></pre><p>启动服务并设置为开机自启 (注意！这一步是在cinder节点操作的）</p>
<pre><code>systemctl enable lvm2-lvmetad.service
systemctl start lvm2-lvmetad.service
systemctl status lvm2-lvmetad.service
</code></pre><p>创建lvm, 这里的/dev/sdb就是额外添加的硬盘 (注意！这一步是在cinder节点操作的）</p>
<pre><code>fdisk -l
pvcreate /dev/vdb
vgcreate cinder-volumes /dev/vdb
</code></pre><p>编辑存储节点lvm.conf文件 (注意！这一步是在cinder节点操作的）</p>
<pre><code>vim /etc/lvm/lvm.conf
</code></pre><p>在devices 下面添加 filter = [ “a/vda/“, “a/vdb/“, “r/.*/“] ，130行 </p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-25.png" alt="o-25"></p>
<p>然后重启下lvm2服务：</p>
<pre><code>systemctl restart lvm2-lvmetad.service
systemctl status lvm2-lvmetad.service
</code></pre><p>安装openstack-cinder、targetcli (注意！这一步是在cinder节点操作的）</p>
<pre><code>yum install openstack-cinder openstack-utils targetcli python-keystone ntpdate -y
</code></pre><p>配置cinder配置文件 (注意！这一步是在cinder节点操作的）</p>
<pre><code>cp /etc/cinder/cinder.conf /etc/cinder/cinder.conf.bak
&gt;/etc/cinder/cinder.conf
openstack-config --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/cinder/cinder.conf DEFAULT my_ip 10.1.1.122
openstack-config --set /etc/cinder/cinder.conf DEFAULT enabled_backends lvm
openstack-config --set /etc/cinder/cinder.conf DEFAULT glance_api_servers http://controller:9292
openstack-config --set /etc/cinder/cinder.conf DEFAULT glance_api_version 2
openstack-config --set /etc/cinder/cinder.conf DEFAULT enable_v1_api True
openstack-config --set /etc/cinder/cinder.conf DEFAULT enable_v2_api True
openstack-config --set /etc/cinder/cinder.conf DEFAULT enable_v3_api True
openstack-config --set /etc/cinder/cinder.conf DEFAULT storage_availability_zone nova
openstack-config --set /etc/cinder/cinder.conf DEFAULT default_availability_zone nova
openstack-config --set /etc/cinder/cinder.conf DEFAULT os_region_name RegionOne
openstack-config --set /etc/cinder/cinder.conf DEFAULT api_paste_config /etc/cinder/api-paste.ini
openstack-config --set /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:devops@controller/cinder
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_type password
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_name service
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken username cinder
openstack-config --set /etc/cinder/cinder.conf keystone_authtoken password devops
openstack-config --set /etc/cinder/cinder.conf lvm volume_driver cinder.volume.drivers.lvm.LVMVolumeDriver
openstack-config --set /etc/cinder/cinder.conf lvm volume_group cinder-volumes
openstack-config --set /etc/cinder/cinder.conf lvm iscsi_protocol iscsi
openstack-config --set /etc/cinder/cinder.conf lvm iscsi_helper lioadm
openstack-config --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp
</code></pre><p>启动openstack-cinder-volume和target并设置开机启动 (注意！这一步是在cinder节点操作的）</p>
<pre><code>systemctl enable openstack-cinder-volume.service target.service
systemctl restart openstack-cinder-volume.service target.service
systemctl status openstack-cinder-volume.service target.service
</code></pre><p>验证cinder服务是否正常</p>
<pre><code>source /root/admin-openrc
cinder service-list
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-26.png" alt="o-26"></p>
<p>至此手动搭建openstack ocata分布式集群完成部署（ps：适用于实验和教学环境，企业还需修改更多参数）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在controller节点上配置&quot;&gt;&lt;a href=&quot;#在controller节点上配置&quot; class=&quot;headerlink&quot; title=&quot;在controller节点上配置&quot;&gt;&lt;/a&gt;在controller节点上配置&lt;/h1&gt;&lt;h2 id=&quot;创建数据库用户并赋
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack O版搭建" scheme="http://yjscloud.site/tags/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack O版搭建（三）：Compute节点部署</title>
    <link href="http://yjscloud.site/2018/03/25/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ACompute%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://yjscloud.site/2018/03/25/OpenStack-O版搭建（三）：Compute节点部署/</id>
    <published>2018-03-25T14:16:51.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装相关依赖包"><a href="#安装相关依赖包" class="headerlink" title="安装相关依赖包"></a>安装相关依赖包</h1><pre><code>yum install openstack-selinux python-openstackclient yum-plugin-priorities openstack-nova-compute openstack-utils ntpdate -y
</code></pre><h2 id="配置nova-conf"><a href="#配置nova-conf" class="headerlink" title="配置nova.conf"></a>配置nova.conf</h2><pre><code>cp /etc/nova/nova.conf /etc/nova/nova.conf.bak
&gt;/etc/nova/nova.conf
openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/nova/nova.conf DEFAULT my_ip 10.1.1.121
openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True
openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set /etc/nova/nova.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password
openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service
openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova
openstack-config --set /etc/nova/nova.conf keystone_authtoken password devops
openstack-config --set /etc/nova/nova.conf placement auth_uri http://controller:5000
openstack-config --set /etc/nova/nova.conf placement auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf placement memcached_servers controller:11211
openstack-config --set /etc/nova/nova.conf placement auth_type password
openstack-config --set /etc/nova/nova.conf placement project_domain_name default
openstack-config --set /etc/nova/nova.conf placement user_domain_name default
openstack-config --set /etc/nova/nova.conf placement project_name service
openstack-config --set /etc/nova/nova.conf placement username placement
openstack-config --set /etc/nova/nova.conf placement password devops
openstack-config --set /etc/nova/nova.conf placement os_region_name RegionOne
openstack-config --set /etc/nova/nova.conf vnc enabled True
openstack-config --set /etc/nova/nova.conf vnc keymap en-us
openstack-config --set /etc/nova/nova.conf vnc vncserver_listen 0.0.0.0
openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address 10.1.1.121
openstack-config --set /etc/nova/nova.conf vnc novncproxy_base_url http://192.168.0.120:6080/vnc_auto.html
openstack-config --set /etc/nova/nova.conf glance api_servers http://controller:9292
openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
openstack-config --set /etc/nova/nova.conf libvirt virt_type qemu
</code></pre><h2 id="设置libvirtd-service-和openstack-nova-compute-service开机启动"><a href="#设置libvirtd-service-和openstack-nova-compute-service开机启动" class="headerlink" title="设置libvirtd.service 和openstack-nova-compute.service开机启动"></a>设置libvirtd.service 和openstack-nova-compute.service开机启动</h2><pre><code>systemctl enable libvirtd.service openstack-nova-compute.service
systemctl restart libvirtd.service openstack-nova-compute.service
systemctl status libvirtd.service openstack-nova-compute.service
</code></pre><h2 id="到controller上执行验证"><a href="#到controller上执行验证" class="headerlink" title="到controller上执行验证"></a>到controller上执行验证</h2><pre><code>source /root/admin-openrc
openstack compute service list
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-23.png" alt="o-23">    </p>
<h1 id="安装Neutron"><a href="#安装Neutron" class="headerlink" title="安装Neutron"></a>安装Neutron</h1><h2 id="安装相关软件包"><a href="#安装相关软件包" class="headerlink" title="安装相关软件包"></a>安装相关软件包</h2><pre><code>yum install openstack-neutron-linuxbridge ebtables ipset -y
</code></pre><h2 id="配置neutron-conf"><a href="#配置neutron-conf" class="headerlink" title="配置neutron.conf"></a>配置neutron.conf</h2><pre><code>cp /etc/neutron/neutron.conf /etc/neutron/neutron.conf.bak
&gt;/etc/neutron/neutron.conf
openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/neutron/neutron.conf DEFAULT advertise_mtu True
openstack-config --set /etc/neutron/neutron.conf DEFAULT dhcp_agents_per_network 2
openstack-config --set /etc/neutron/neutron.conf DEFAULT control_exchange neutron
openstack-config --set /etc/neutron/neutron.conf DEFAULT nova_url http://controller:8774/v2
openstack-config --set /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password devops
openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp
</code></pre><h2 id="配置-etc-neutron-plugins-ml2-linuxbridge-agent-ini"><a href="#配置-etc-neutron-plugins-ml2-linuxbridge-agent-ini" class="headerlink" title="配置/etc/neutron/plugins/ml2/linuxbridge_agent.ini"></a>配置/etc/neutron/plugins/ml2/linuxbridge_agent.ini</h2><pre><code>openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip 10.2.2.121
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
</code></pre><h2 id="配置nova-conf-1"><a href="#配置nova-conf-1" class="headerlink" title="配置nova.conf"></a>配置nova.conf</h2><pre><code>openstack-config --set /etc/nova/nova.conf neutron url http://controller:9696
openstack-config --set /etc/nova/nova.conf neutron auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf neutron auth_type password
openstack-config --set /etc/nova/nova.conf neutron project_domain_name default
openstack-config --set /etc/nova/nova.conf neutron user_domain_name default
openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne
openstack-config --set /etc/nova/nova.conf neutron project_name service
openstack-config --set /etc/nova/nova.conf neutron username neutron
openstack-config --set /etc/nova/nova.conf neutron password devops
</code></pre><h2 id="重启和enable相关服务"><a href="#重启和enable相关服务" class="headerlink" title="重启和enable相关服务"></a>重启和enable相关服务</h2><pre><code>systemctl restart libvirtd.service openstack-nova-compute.service
systemctl enable neutron-linuxbridge-agent.service
systemctl restart neutron-linuxbridge-agent.service
systemctl status libvirtd.service openstack-nova-compute.service neutron-linuxbridge-agent.service
</code></pre><h1 id="计算节点结合Cinder"><a href="#计算节点结合Cinder" class="headerlink" title="计算节点结合Cinder"></a>计算节点结合Cinder</h1><p>1）计算节点要是想用cinder,那么需要配置nova配置文件 (注意！这一步是在计算节点操作的）</p>
<pre><code>openstack-config --set /etc/nova/nova.conf cinder os_region_name RegionOne
systemctl restart openstack-nova-compute.service
</code></pre><p>2）然后在controller上重启nova服务</p>
<pre><code>systemctl restart openstack-nova-api.service
systemctl status openstack-nova-api.service
</code></pre><h1 id="在controler上执行验证"><a href="#在controler上执行验证" class="headerlink" title="在controler上执行验证"></a>在controler上执行验证</h1><pre><code>source /root/admin-openrc
neutron agent-list
nova-manage cell_v2 discover_hosts
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-24.png" alt="o-24"></p>
<p>到此，Compute节点搭建完毕，运行nova host-list可以查看新加入的compute1节点<br>如果需要再添加另外一个compute节点，只要重复下第二大部即可，记得把计算机名和IP地址改下。</p>
<p>附-创建配额命令</p>
<pre><code>openstack flavor create m1.tiny --id 1 --ram 512 --disk 1 --vcpus 1
openstack flavor create m1.small --id 2 --ram 2048 --disk 20 --vcpus 1
openstack flavor create m1.medium --id 3 --ram 4096 --disk 40 --vcpus 2
openstack flavor create m1.large --id 4 --ram 8192 --disk 80 --vcpus 4
openstack flavor create m1.xlarge --id 5 --ram 16384 --disk 160 --vcpus 8
openstack flavor list
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装相关依赖包&quot;&gt;&lt;a href=&quot;#安装相关依赖包&quot; class=&quot;headerlink&quot; title=&quot;安装相关依赖包&quot;&gt;&lt;/a&gt;安装相关依赖包&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;yum install openstack-selinux python-opens
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack O版搭建" scheme="http://yjscloud.site/tags/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack O版搭建（二）：Controller节点部署</title>
    <link href="http://yjscloud.site/2018/03/25/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AController%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>http://yjscloud.site/2018/03/25/OpenStack-O版搭建（二）：Controller节点部署/</id>
    <published>2018-03-25T14:15:37.000Z</published>
    <updated>2018-08-30T04:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Mariadb和RabbitMQ"><a href="#安装Mariadb和RabbitMQ" class="headerlink" title="安装Mariadb和RabbitMQ"></a>安装Mariadb和RabbitMQ</h1><h2 id="搭建Mariadb"><a href="#搭建Mariadb" class="headerlink" title="搭建Mariadb"></a>搭建Mariadb</h2><h3 id="安装mariadb数据库"><a href="#安装mariadb数据库" class="headerlink" title="安装mariadb数据库"></a>安装mariadb数据库</h3><pre><code>yum install -y MariaDB-server MariaDB-client
</code></pre><h3 id="配置mariadb"><a href="#配置mariadb" class="headerlink" title="配置mariadb"></a>配置mariadb</h3><pre><code>vim /etc/my.cnf.d/mariadb-openstack.cnf
</code></pre><p>在mysqld区块添加如下内容：</p>
<pre><code>[mysqld]
default-storage-engine = innodb
innodb_file_per_table
collation-server = utf8_general_ci
init-connect = &apos;SET NAMES utf8&apos;
character-set-server = utf8
bind-address = 10.1.1.120
</code></pre><h3 id="启动数据库及设置mariadb开机启动"><a href="#启动数据库及设置mariadb开机启动" class="headerlink" title="启动数据库及设置mariadb开机启动"></a>启动数据库及设置mariadb开机启动</h3><pre><code>systemctl enable mariadb.service
systemctl restart mariadb.service
systemctl status mariadb.service
systemctl list-unit-files |grep mariadb.service
</code></pre><h3 id="配置mariadb，给mariadb设置密码"><a href="#配置mariadb，给mariadb设置密码" class="headerlink" title="配置mariadb，给mariadb设置密码"></a>配置mariadb，给mariadb设置密码</h3><pre><code>mysql_secure_installation
</code></pre><p>先按回车，然后按Y，设置mysql密码，然后一直按y结束<br>这里我们设置的密码是devops</p>
<h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><h3 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h3><pre><code>yum install -y erlang
</code></pre><h3 id="安装RabbitMQ-1"><a href="#安装RabbitMQ-1" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><pre><code>yum install -y rabbitmq-server
</code></pre><h3 id="启动rabbitmq及设置开机启动"><a href="#启动rabbitmq及设置开机启动" class="headerlink" title="启动rabbitmq及设置开机启动"></a>启动rabbitmq及设置开机启动</h3><pre><code>systemctl enable rabbitmq-server.service
systemctl restart rabbitmq-server.service
systemctl status rabbitmq-server.service
systemctl list-unit-files |grep rabbitmq-server.service
</code></pre><h3 id="创建openstack用户"><a href="#创建openstack用户" class="headerlink" title="创建openstack用户"></a>创建openstack用户</h3><p>注意将密码替换为自己的合适密码，这里密码都是devops</p>
<pre><code>rabbitmqctl add_user openstack devops
</code></pre><h3 id="将openstack用户赋予权限"><a href="#将openstack用户赋予权限" class="headerlink" title="将openstack用户赋予权限"></a>将openstack用户赋予权限</h3><pre><code>rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
rabbitmqctl set_user_tags openstack administrator
rabbitmqctl list_users
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-3.png" alt="o-3">    </p>
<h3 id="查看监听端口"><a href="#查看监听端口" class="headerlink" title="查看监听端口"></a>查看监听端口</h3><p>rabbitmq用的是5672端口</p>
<pre><code>netstat -ntlp |grep 5672
</code></pre><h3 id="查看RabbitMQ插件"><a href="#查看RabbitMQ插件" class="headerlink" title="查看RabbitMQ插件"></a>查看RabbitMQ插件</h3><pre><code>/usr/lib/rabbitmq/bin/rabbitmq-plugins list
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-4.png" alt="o-4"></p>
<h3 id="打开RabbitMQ相关插件"><a href="#打开RabbitMQ相关插件" class="headerlink" title="打开RabbitMQ相关插件"></a>打开RabbitMQ相关插件</h3><pre><code>/usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management mochiweb webmachine rabbitmq_web_dispatch amqp_client rabbitmq_management_agent
</code></pre><p>打开相关插件后，重启下rabbitmq服务</p>
<pre><code>systemctl restart rabbitmq-server
</code></pre><p>浏览器输入：<a href="http://192.168.0.120:15672" target="_blank" rel="external">http://192.168.0.120:15672</a> 默认用户名密码：guest/guest,<br>通过这个界面，我们能很直观的看到rabbitmq的运行和负载情况</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-5.png" alt="o-5"></p>
<h1 id="安装配置keystone"><a href="#安装配置keystone" class="headerlink" title="安装配置keystone"></a>安装配置keystone</h1><h2 id="创建keystone数据库"><a href="#创建keystone数据库" class="headerlink" title="创建keystone数据库"></a>创建keystone数据库</h2><pre><code>CREATE DATABASE keystone;
</code></pre><h2 id="创建数据库keystone用户-amp-root用户及赋予权限"><a href="#创建数据库keystone用户-amp-root用户及赋予权限" class="headerlink" title="创建数据库keystone用户&amp;root用户及赋予权限"></a>创建数据库keystone用户&amp;root用户及赋予权限</h2><pre><code>GRANT ALL PRIVILEGES ON keystone.* TO &apos;keystone&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON keystone.* TO &apos;keystone&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
</code></pre><p>注意将devops替换为自己的数据库密码</p>
<h2 id="安装keystone和memcached"><a href="#安装keystone和memcached" class="headerlink" title="安装keystone和memcached"></a>安装keystone和memcached</h2><pre><code>yum -y install openstack-keystone httpd mod_wsgi python-openstackclient memcached python-memcached openstack-utils
</code></pre><h2 id="启动memcache服务并设置开机自启动"><a href="#启动memcache服务并设置开机自启动" class="headerlink" title="启动memcache服务并设置开机自启动"></a>启动memcache服务并设置开机自启动</h2><pre><code>systemctl enable memcached.service
systemctl restart memcached.service
systemctl status memcached.service
</code></pre><h2 id="配置-etc-keystone-keystone-conf文件"><a href="#配置-etc-keystone-keystone-conf文件" class="headerlink" title="配置/etc/keystone/keystone.conf文件"></a>配置/etc/keystone/keystone.conf文件</h2><pre><code>cp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bak
&gt;/etc/keystone/keystone.conf
openstack-config --set /etc/keystone/keystone.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/keystone/keystone.conf database connection mysql://keystone:devops@controller/keystone
openstack-config --set /etc/keystone/keystone.conf cache backend oslo_cache.memcache_pool
openstack-config --set /etc/keystone/keystone.conf cache enabled true
openstack-config --set /etc/keystone/keystone.conf cache memcache_servers controller:11211
openstack-config --set /etc/keystone/keystone.conf memcache servers controller:11211
openstack-config --set /etc/keystone/keystone.conf token expiration 3600
openstack-config --set /etc/keystone/keystone.conf token provider fernet
</code></pre><h2 id="配置httpd-conf文件-amp-memcached文件"><a href="#配置httpd-conf文件-amp-memcached文件" class="headerlink" title="配置httpd.conf文件&amp;memcached文件"></a>配置httpd.conf文件&amp;memcached文件</h2><pre><code>sed -i &quot;s/#ServerName www.example.com:80/ServerName controller/&quot; /etc/httpd/conf/httpd.conf
sed -i &apos;s/OPTIONS*.*/OPTIONS=&quot;-l 127.0.0.1,::1,10.1.1.120&quot;/&apos; /etc/sysconfig/memcached
</code></pre><h2 id="配置keystone与httpd结合"><a href="#配置keystone与httpd结合" class="headerlink" title="配置keystone与httpd结合"></a>配置keystone与httpd结合</h2><pre><code>ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/
</code></pre><h2 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h2><pre><code>su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone
</code></pre><h2 id="初始化fernet"><a href="#初始化fernet" class="headerlink" title="初始化fernet"></a>初始化fernet</h2><pre><code>keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
</code></pre><h2 id="启动httpd，并设置httpd开机启动"><a href="#启动httpd，并设置httpd开机启动" class="headerlink" title="启动httpd，并设置httpd开机启动"></a>启动httpd，并设置httpd开机启动</h2><pre><code>systemctl enable httpd.service
systemctl restart httpd.service
systemctl status httpd.service
systemctl list-unit-files |grep httpd.service
</code></pre><h2 id="创建admin用户角色"><a href="#创建admin用户角色" class="headerlink" title="创建admin用户角色"></a>创建admin用户角色</h2><pre><code>keystone-manage bootstrap \
--bootstrap-password devops \
--bootstrap-username admin \
--bootstrap-project-name admin \
--bootstrap-role-name admin \
--bootstrap-service-name keystone \
--bootstrap-region-id RegionOne \
--bootstrap-admin-url http://controller:35357/v3 \
--bootstrap-internal-url http://controller:35357/v3 \
--bootstrap-public-url http://controller:5000/v3
</code></pre><p>验证：</p>
<pre><code>openstack project list --os-username admin --os-project-name admin --os-user-domain-id default --os-project-domain-id default --os-identity-api-version 3 --os-auth-url http://controller:5000 --os-password devops
</code></pre><p>返回如下结果说明你的keystone服务就没有问题了</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-6.png" alt="o-6"></p>
<h2 id="创建admin用户环境变量"><a href="#创建admin用户环境变量" class="headerlink" title="创建admin用户环境变量"></a>创建admin用户环境变量</h2><p>创建/root/admin-openrc 文件并写入如下内容：</p>
<pre><code>vim /root/admin-openrc
</code></pre><p>添加以下内容：</p>
<pre><code>export OS_USER_DOMAIN_ID=default
export OS_PROJECT_DOMAIN_ID=default
export OS_USERNAME=admin
export OS_PROJECT_NAME=admin
export OS_PASSWORD=devops
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
export OS_AUTH_URL=http://controller:35357/v3
</code></pre><h2 id="创建service项目"><a href="#创建service项目" class="headerlink" title="创建service项目"></a>创建service项目</h2><pre><code>source /root/admin-openrc
openstack project create --domain default --description &quot;Service Project&quot; service
</code></pre><h2 id="创建demo项目"><a href="#创建demo项目" class="headerlink" title="创建demo项目"></a>创建demo项目</h2><pre><code>openstack project create --domain default --description &quot;Demo Project&quot; demo
</code></pre><h2 id="创建demo用户"><a href="#创建demo用户" class="headerlink" title="创建demo用户"></a>创建demo用户</h2><pre><code>openstack user create --domain default demo --password devops
</code></pre><p>注意：devops为demo用户密码</p>
<h2 id="创建user角色"><a href="#创建user角色" class="headerlink" title="创建user角色"></a>创建user角色</h2><p>创建user角色将demo用户赋予user角色</p>
<pre><code>openstack role create user
openstack role add --project demo --user demo user
</code></pre><h2 id="验证keystone"><a href="#验证keystone" class="headerlink" title="验证keystone"></a>验证keystone</h2><pre><code>unset OS_TOKEN OS_URL
openstack --os-auth-url http://controller:35357/v3 --os-project-domain-name default --os-user-domain-name default --os-project-name admin --os-username admin token issue --os-password devops
openstack --os-auth-url http://controller:5000/v3 --os-project-domain-name default --os-user-domain-name default --os-project-name demo --os-username demo token issue --os-password devops
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-7.png" alt="o-7"></p>
<h1 id="安装配置glance"><a href="#安装配置glance" class="headerlink" title="安装配置glance"></a>安装配置glance</h1><h2 id="创建glance数据库"><a href="#创建glance数据库" class="headerlink" title="创建glance数据库"></a>创建glance数据库</h2><pre><code>CREATE DATABASE glance;
</code></pre><h2 id="创建数据库用户并赋予权限"><a href="#创建数据库用户并赋予权限" class="headerlink" title="创建数据库用户并赋予权限"></a>创建数据库用户并赋予权限</h2><pre><code>GRANT ALL PRIVILEGES ON glance.* TO &apos;glance&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON glance.* TO &apos;glance&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
</code></pre><h2 id="创建glance用户及赋予admin权限"><a href="#创建glance用户及赋予admin权限" class="headerlink" title="创建glance用户及赋予admin权限"></a>创建glance用户及赋予admin权限</h2><pre><code>source /root/admin-openrc
openstack user create --domain default glance --password devops
openstack role add --project service --user glance admin
</code></pre><h2 id="创建image服务"><a href="#创建image服务" class="headerlink" title="创建image服务"></a>创建image服务</h2><pre><code>openstack service create --name glance --description &quot;OpenStack Image service&quot; image
</code></pre><h2 id="创建glance的endpoint"><a href="#创建glance的endpoint" class="headerlink" title="创建glance的endpoint"></a>创建glance的endpoint</h2><pre><code>openstack endpoint create --region RegionOne image public http://controller:9292
openstack endpoint create --region RegionOne image internal http://controller:9292
openstack endpoint create --region RegionOne image admin http://controller:9292
</code></pre><h2 id="安装glance相关rpm包"><a href="#安装glance相关rpm包" class="headerlink" title="安装glance相关rpm包"></a>安装glance相关rpm包</h2><pre><code>yum install openstack-glance -y
</code></pre><h2 id="修改glance配置文件-etc-glance-glance-api-conf"><a href="#修改glance配置文件-etc-glance-glance-api-conf" class="headerlink" title="修改glance配置文件/etc/glance/glance-api.conf"></a>修改glance配置文件/etc/glance/glance-api.conf</h2><p>注意将devops的密码设置成你自己的</p>
<pre><code>cp /etc/glance/glance-api.conf /etc/glance/glance-api.conf.bak
&gt;/etc/glance/glance-api.conf
openstack-config --set /etc/glance/glance-api.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/glance/glance-api.conf database connection mysql+pymysql://glance:devops@controller/glance
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_type password
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken username glance
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken password devops
openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_name service
openstack-config --set /etc/glance/glance-api.conf paste_deploy flavor keystone
openstack-config --set /etc/glance/glance-api.conf glance_store stores file,http
openstack-config --set /etc/glance/glance-api.conf glance_store default_store file
openstack-config --set /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/
</code></pre><h2 id="修改glance配置文件-etc-glance-glance-registry-conf："><a href="#修改glance配置文件-etc-glance-glance-registry-conf：" class="headerlink" title="修改glance配置文件/etc/glance/glance-registry.conf："></a>修改glance配置文件/etc/glance/glance-registry.conf：</h2><pre><code>cp /etc/glance/glance-registry.conf /etc/glance/glance-registry.conf.bak
&gt;/etc/glance/glance-registry.conf
openstack-config --set /etc/glance/glance-registry.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/glance/glance-registry.conf database connection mysql+pymysql://glance:devops@controller/glance
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_type password
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_name service
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken username glance
openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken password devops
openstack-config --set /etc/glance/glance-registry.conf paste_deploy flavor keystone
</code></pre><h2 id="同步glance数据库"><a href="#同步glance数据库" class="headerlink" title="同步glance数据库"></a>同步glance数据库</h2><pre><code>su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance
</code></pre><p>同步成功</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-8.png" alt="o-8"></p>
<h2 id="启动glance及设置开机启动"><a href="#启动glance及设置开机启动" class="headerlink" title="启动glance及设置开机启动"></a>启动glance及设置开机启动</h2><pre><code>systemctl enable openstack-glance-api.service openstack-glance-registry.service
systemctl restart openstack-glance-api.service openstack-glance-registry.service
systemctl status openstack-glance-api.service openstack-glance-registry.service
</code></pre><h2 id="下载测试镜像文件"><a href="#下载测试镜像文件" class="headerlink" title="下载测试镜像文件"></a>下载测试镜像文件</h2><pre><code>wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
</code></pre><h2 id="上传镜像到glance"><a href="#上传镜像到glance" class="headerlink" title="上传镜像到glance"></a>上传镜像到glance</h2><pre><code>source /root/admin-openrc
glance image-create --name &quot;cirros-0.3.4-x86_64&quot; --file cirros-0.3.4-x86_64-disk.img --disk-format qcow2 --container-format bare --visibility public --progress
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-9.png" alt="o-9"></p>
<p>如果你做好了一个CentOS7.2系统的镜像，也可以用这命令操作，例：</p>
<pre><code>glance image-create --name &quot;CentOS7.2-x86_64&quot; --file CentOS_7.2.qcow2 --disk-format qcow2 --container-format bare --visibility public --progress
</code></pre><p>查看镜像列表：</p>
<pre><code>glance image-list
</code></pre><h1 id="安装配置nova"><a href="#安装配置nova" class="headerlink" title="安装配置nova"></a>安装配置nova</h1><h2 id="创建nova数据库"><a href="#创建nova数据库" class="headerlink" title="创建nova数据库"></a>创建nova数据库</h2><pre><code>CREATE DATABASE nova;
CREATE DATABASE nova_api;
CREATE DATABASE nova_cell0;
</code></pre><h2 id="创建数据库用户并赋予权限-1"><a href="#创建数据库用户并赋予权限-1" class="headerlink" title="创建数据库用户并赋予权限"></a>创建数据库用户并赋予权限</h2><pre><code>GRANT ALL PRIVILEGES ON nova.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON nova.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON nova_api.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON nova_api.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON nova_cell0.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON nova_cell0.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;controller&apos; IDENTIFIED BY &apos;devops&apos;;
FLUSH PRIVILEGES;
</code></pre><p>注：查看授权列表信息 SELECT DISTINCT CONCAT(‘User: ‘’’,user,’’’@’’’,host,’’’;’) AS query FROM mysql.user;<br>取消之前某个授权 REVOKE ALTER ON *.* TO ‘root’@’controller’ IDENTIFIED BY ‘devops’;</p>
<h2 id="创建nova用户及赋予admin权限"><a href="#创建nova用户及赋予admin权限" class="headerlink" title="创建nova用户及赋予admin权限"></a>创建nova用户及赋予admin权限</h2><pre><code>source /root/admin-openrc
openstack user create --domain default nova --password devops
openstack role add --project service --user nova admin
</code></pre><h2 id="创建computer服务"><a href="#创建computer服务" class="headerlink" title="创建computer服务"></a>创建computer服务</h2><pre><code>openstack service create --name nova --description &quot;OpenStack Compute&quot; compute
</code></pre><h2 id="创建nova的endpoint"><a href="#创建nova的endpoint" class="headerlink" title="创建nova的endpoint"></a>创建nova的endpoint</h2><pre><code>openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1/%\(tenant_id\)s
openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1/%\(tenant_id\)s
openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1/%\(tenant_id\)s
</code></pre><h2 id="安装nova相关软件"><a href="#安装nova相关软件" class="headerlink" title="安装nova相关软件"></a>安装nova相关软件</h2><pre><code>yum install -y openstack-nova-api openstack-nova-conductor openstack-nova-cert openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler
</code></pre><h2 id="配置nova的配置文件-etc-nova-nova-conf"><a href="#配置nova的配置文件-etc-nova-nova-conf" class="headerlink" title="配置nova的配置文件/etc/nova/nova.conf"></a>配置nova的配置文件/etc/nova/nova.conf</h2><pre><code>cp /etc/nova/nova.conf /etc/nova/nova.conf.bak
&gt;/etc/nova/nova.conf
openstack-config --set /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata
openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/nova/nova.conf DEFAULT my_ip 10.1.1.120
openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True
openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
openstack-config --set /etc/nova/nova.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/nova/nova.conf database connection mysql+pymysql://nova:devops@controller/nova
openstack-config --set /etc/nova/nova.conf api_database connection mysql+pymysql://nova:devops@controller/nova_api
openstack-config --set /etc/nova/nova.conf scheduler discover_hosts_in_cells_interval -1
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password
openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service
openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova
openstack-config --set /etc/nova/nova.conf keystone_authtoken password devops
openstack-config --set /etc/nova/nova.conf keystone_authtoken service_token_roles_required True
openstack-config --set /etc/nova/nova.conf vnc vncserver_listen 10.1.1.120
openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address 10.1.1.120
openstack-config --set /etc/nova/nova.conf glance api_servers http://controller:9292
openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
</code></pre><p>注意：其他节点上记得替换IP，还有密码。</p>
<h2 id="设置cell（单元格）"><a href="#设置cell（单元格）" class="headerlink" title="设置cell（单元格）"></a>设置cell（单元格）</h2><p>关于cell（单元格）的介绍，引用出自于九州云分享的《Ocata组件Nova Cell V2 详解》&amp; 有云的《引入Cells功能最核心要解决的问题就是OpenStack集群的扩展性》两篇文章的整合介绍：<br>OpenStack 在控制平面上的性能瓶颈主要在 Message Queue 和 Database 。尤其是 Message Queue , 随着计算节点的增加，性能变的越来越差，因为openstack里每个资源和接口都是通过消息队列来通信的，有测试表明，当集群规模到了200，一个消息可能要在十几秒后才会响应；为了应对这种情况，引入Cells功能以解决OpenStack集群的扩展性。</p>
<p>同步下nova数据库</p>
<pre><code>su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova
su -s /bin/sh -c &quot;nova-manage db sync&quot; nova
</code></pre><p>不用管这个报警</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-10.png" alt="o-10"></p>
<p>设置cell_v2关联上创建好的数据库nova_cell0</p>
<pre><code>nova-manage cell_v2 map_cell0 --database_connection mysql+pymysql://root:devops@controller/nova_cell0
</code></pre><p>创建一个常规cell，名字叫cell1，这个单元格里面将会包含计算节点</p>
<pre><code>nova-manage cell_v2 create_cell --verbose --name cell1 --database_connection mysql+pymysql://root:devops@controller/nova_cell0 --transport-url rabbit://openstack:devops@controller:5672/
</code></pre><p>检查部署是否正常</p>
<pre><code>nova-status upgrade check
</code></pre><p>如有报错请先运行下面的命令<br>创建和映射cell0，并将现有计算主机和实例映射到单元格中</p>
<pre><code>nova-manage cell_v2 simple_cell_setup
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-11.png" alt="o-11"></p>
<p>查看已经创建好的单元格列表</p>
<pre><code>nova-manage cell_v2 list_cells --verbose
</code></pre><p>注意，如果有新添加的计算节点，需要运行下面命令来发现，并且添加到单元格中</p>
<pre><code>nova-manage cell_v2 discover_hosts
</code></pre><p>当然，你可以在控制节点的nova.conf文件里[scheduler]模块下添加discover_hosts_in_cells_interval=-1 这个设置来自动发现</p>
<h2 id="安装placement"><a href="#安装placement" class="headerlink" title="安装placement"></a>安装placement</h2><p>从Ocata开始，需要安装配置placement参与nova调度了，不然虚拟机将无法创建！</p>
<pre><code>yum install -y openstack-nova-placement-api
</code></pre><p>创建placement用户和placement 服务</p>
<pre><code>openstack user create --domain default placement --password devops
openstack role add --project service --user placement admin
openstack service create --name placement --description &quot;OpenStack Placement&quot; placement
</code></pre><p>创建placement endpoint</p>
<pre><code>openstack endpoint create --region RegionOne placement public http://controller:8778
openstack endpoint create --region RegionOne placement admin http://controller:8778
openstack endpoint create --region RegionOne placement internal http://controller:8778
</code></pre><p>把placement 整合到nova.conf里</p>
<pre><code>openstack-config --set /etc/nova/nova.conf placement auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf placement memcached_servers controller:11211
openstack-config --set /etc/nova/nova.conf placement auth_type password
openstack-config --set /etc/nova/nova.conf placement project_domain_name default
openstack-config --set /etc/nova/nova.conf placement user_domain_name default
openstack-config --set /etc/nova/nova.conf placement project_name service
openstack-config --set /etc/nova/nova.conf placement username placement
openstack-config --set /etc/nova/nova.conf placement password devops
openstack-config --set /etc/nova/nova.conf placement os_region_name RegionOne
</code></pre><p>配置修改00-nova-placement-api.conf文件，这步没做创建虚拟机的时候会出现禁止访问资源的问题</p>
<pre><code>cd /etc/httpd/conf.d/
cp 00-nova-placement-api.conf 00-nova-placement-api.conf.bak
&gt;00-nova-placement-api.conf
vim 00-nova-placement-api.conf
</code></pre><p>添加以下内容：</p>
<pre><code>Listen 8778

&lt;VirtualHost *:8778&gt;
WSGIProcessGroup nova-placement-api
WSGIApplicationGroup %{GLOBAL}
WSGIPassAuthorization On
WSGIDaemonProcess nova-placement-api processes=3 threads=1 user=nova group=nova
WSGIScriptAlias / /usr/bin/nova-placement-api
&lt;Directory &quot;/&quot;&gt;
    Order allow,deny
    Allow from all
    Require all granted
&lt;/Directory&gt;
&lt;IfVersion &gt;= 2.4&gt;
  ErrorLogFormat &quot;%M&quot;
&lt;/IfVersion&gt;
  ErrorLog /var/log/nova/nova-placement-api.log
&lt;/VirtualHost&gt;

Alias /nova-placement-api /usr/bin/nova-placement-api
&lt;Location /nova-placement-api&gt;
  SetHandler wsgi-script
  Options +ExecCGI
  WSGIProcessGroup nova-placement-api
  WSGIApplicationGroup %{GLOBAL}
  WSGIPassAuthorization On
&lt;/Location&gt;
</code></pre><p>重启下httpd服务</p>
<pre><code>systemctl restart httpd
</code></pre><p>检查下是否配置成功</p>
<pre><code>nova-status upgrade check
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-11.png" alt="o-12"></p>
<h2 id="设置nova相关服务开机启动"><a href="#设置nova相关服务开机启动" class="headerlink" title="设置nova相关服务开机启动"></a>设置nova相关服务开机启动</h2><pre><code>systemctl enable openstack-nova-api.service openstack-nova-cert.service     openstack-nova-consoleauth.service openstack-nova-scheduler.service     openstack-nova-conductor.service openstack-nova-novncproxy.service
</code></pre><p>启动nova服务：</p>
<pre><code>systemctl restart openstack-nova-api.service openstack-nova-cert.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service
</code></pre><p>查看nova服务：</p>
<pre><code>systemctl status openstack-nova-api.service openstack-nova-cert.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service

systemctl list-unit-files |grep openstack-nova-*
</code></pre><h2 id="验证nova服务"><a href="#验证nova服务" class="headerlink" title="验证nova服务"></a>验证nova服务</h2><pre><code>unset OS_TOKEN OS_URL
source /root/admin-openrc
nova service-list
</code></pre><p><img src="http://oxysobnip.bkt.clouddn.com/o-13.png" alt="o-13"></p>
<p>openstack endpoint list 查看endpoint list<br>看是否有结果正确输出</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-14.png" alt="o-14"></p>
<h1 id="安装配置neutron"><a href="#安装配置neutron" class="headerlink" title="安装配置neutron"></a>安装配置neutron</h1><h2 id="创建neutron数据库"><a href="#创建neutron数据库" class="headerlink" title="创建neutron数据库"></a>创建neutron数据库</h2><pre><code>CREATE DATABASE neutron;
</code></pre><h2 id="创建数据库用户并赋予权限-2"><a href="#创建数据库用户并赋予权限-2" class="headerlink" title="创建数据库用户并赋予权限"></a>创建数据库用户并赋予权限</h2><pre><code>GRANT ALL PRIVILEGES ON neutron.* TO &apos;neutron&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;devops&apos;;
GRANT ALL PRIVILEGES ON neutron.* TO &apos;neutron&apos;@&apos;%&apos; IDENTIFIED BY &apos;devops&apos;;
</code></pre><h2 id="创建neutron用户及赋予admin权限"><a href="#创建neutron用户及赋予admin权限" class="headerlink" title="创建neutron用户及赋予admin权限"></a>创建neutron用户及赋予admin权限</h2><pre><code>source /root/admin-openrc
openstack user create --domain default neutron --password devops
openstack role add --project service --user neutron admin
</code></pre><h2 id="创建network服务"><a href="#创建network服务" class="headerlink" title="创建network服务"></a>创建network服务</h2><pre><code>openstack service create --name neutron --description &quot;OpenStack Networking&quot; network
</code></pre><h2 id="创建endpoint"><a href="#创建endpoint" class="headerlink" title="创建endpoint"></a>创建endpoint</h2><pre><code>openstack endpoint create --region RegionOne network public http://controller:9696
openstack endpoint create --region RegionOne network internal http://controller:9696
openstack endpoint create --region RegionOne network admin http://controller:9696
</code></pre><h2 id="安装neutron相关软件"><a href="#安装neutron相关软件" class="headerlink" title="安装neutron相关软件"></a>安装neutron相关软件</h2><pre><code>yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables -y
</code></pre><h2 id="配置neutron配置文件-etc-neutron-neutron-conf"><a href="#配置neutron配置文件-etc-neutron-neutron-conf" class="headerlink" title="配置neutron配置文件/etc/neutron/neutron.conf"></a>配置neutron配置文件/etc/neutron/neutron.conf</h2><pre><code>cp /etc/neutron/neutron.conf /etc/neutron/neutron.conf.bak
&gt;/etc/neutron/neutron.conf
openstack-config --set /etc/neutron/neutron.conf DEFAULT core_plugin ml2
openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router
openstack-config --set /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips True
openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
openstack-config --set /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:devops@controller
openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes True
openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes True
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://controller:5000
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:35357
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron
openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password devops
openstack-config --set /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:devops@controller/neutron
openstack-config --set /etc/neutron/neutron.conf nova auth_url http://controller:35357
openstack-config --set /etc/neutron/neutron.conf nova auth_type password
openstack-config --set /etc/neutron/neutron.conf nova project_domain_name default
openstack-config --set /etc/neutron/neutron.conf nova user_domain_name default
openstack-config --set /etc/neutron/neutron.conf nova region_name RegionOne
openstack-config --set /etc/neutron/neutron.conf nova project_name service
openstack-config --set /etc/neutron/neutron.conf nova username nova
openstack-config --set /etc/neutron/neutron.conf nova password devops
openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp
</code></pre><h2 id="配置-etc-neutron-plugins-ml2-ml2-conf-ini"><a href="#配置-etc-neutron-plugins-ml2-ml2-conf-ini" class="headerlink" title="配置/etc/neutron/plugins/ml2/ml2_conf.ini"></a>配置/etc/neutron/plugins/ml2/ml2_conf.ini</h2><pre><code>openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers linuxbridge,l2population
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vxlan
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 path_mtu 1500
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges 1:1000
openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset True
</code></pre><h2 id="配置-etc-neutron-plugins-ml2-linuxbridge-agent-ini"><a href="#配置-etc-neutron-plugins-ml2-linuxbridge-agent-ini" class="headerlink" title="配置/etc/neutron/plugins/ml2/linuxbridge_agent.ini"></a>配置/etc/neutron/plugins/ml2/linuxbridge_agent.ini</h2><pre><code>openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini DEFAULT debug false
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:eth0
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip 10.2.2.120
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini agent prevent_arp_spoofing True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group True
openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
</code></pre><ul>
<li>注意eth0是外网网卡，一般这里写的网卡名都是能访问外网的，如果不是外网网卡，那么VM就会与外界网络隔离。local_ip 定义的是隧道网络，vxLan下 vm-linuxbridge-&gt;vxlan ——tun—–vxlan-&gt;linuxbridge-vm</li>
</ul>
<h2 id="配置-etc-neutron-l3-agent-ini"><a href="#配置-etc-neutron-l3-agent-ini" class="headerlink" title="配置 /etc/neutron/l3_agent.ini"></a>配置 /etc/neutron/l3_agent.ini</h2><pre><code>openstack-config --set /etc/neutron/l3_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
openstack-config --set /etc/neutron/l3_agent.ini DEFAULT external_network_bridge
openstack-config --set /etc/neutron/l3_agent.ini DEFAULT debug false
</code></pre><h2 id="配置-etc-neutron-dhcp-agent-ini"><a href="#配置-etc-neutron-dhcp-agent-ini" class="headerlink" title="配置/etc/neutron/dhcp_agent.ini"></a>配置/etc/neutron/dhcp_agent.ini</h2><pre><code>openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata True
openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT verbose True
openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT debug false
</code></pre><h2 id="重新配置-etc-nova-nova-conf"><a href="#重新配置-etc-nova-nova-conf" class="headerlink" title="重新配置/etc/nova/nova.conf"></a>重新配置/etc/nova/nova.conf</h2><p>配置这步的目的是让compute节点能使用上neutron网络</p>
<pre><code>openstack-config --set /etc/nova/nova.conf neutron url http://controller:9696
openstack-config --set /etc/nova/nova.conf neutron auth_url http://controller:35357
openstack-config --set /etc/nova/nova.conf neutron auth_plugin password
openstack-config --set /etc/nova/nova.conf neutron project_domain_id default
openstack-config --set /etc/nova/nova.conf neutron user_domain_id default
openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne
openstack-config --set /etc/nova/nova.conf neutron project_name service
openstack-config --set /etc/nova/nova.conf neutron username neutron
openstack-config --set /etc/nova/nova.conf neutron password devops
openstack-config --set /etc/nova/nova.conf neutron service_metadata_proxy True
openstack-config --set /etc/nova/nova.conf neutron metadata_proxy_shared_secret devops
</code></pre><h2 id="dnsmasq-neutron-conf配置"><a href="#dnsmasq-neutron-conf配置" class="headerlink" title="dnsmasq-neutron.conf配置"></a>dnsmasq-neutron.conf配置</h2><p>echo “dhcp-option-force=26,1450” &gt;/etc/neutron/dnsmasq-neutron.conf</p>
<h2 id="配置-etc-neutron-metadata-agent-ini"><a href="#配置-etc-neutron-metadata-agent-ini" class="headerlink" title="配置/etc/neutron/metadata_agent.ini"></a>配置/etc/neutron/metadata_agent.ini</h2><pre><code>openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_ip controller
openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret devops
openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT metadata_workers 4
openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT verbose True
openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT debug false
openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_protocol http
</code></pre><h2 id="创建硬链接"><a href="#创建硬链接" class="headerlink" title="创建硬链接"></a>创建硬链接</h2><pre><code>ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
</code></pre><h2 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h2><pre><code>su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron
</code></pre><h2 id="重启nova服务，因为刚才改了nova-conf"><a href="#重启nova服务，因为刚才改了nova-conf" class="headerlink" title="重启nova服务，因为刚才改了nova.conf"></a>重启nova服务，因为刚才改了nova.conf</h2><pre><code>systemctl restart openstack-nova-api.service
systemctl status openstack-nova-api.service
</code></pre><h2 id="重启neutron服务并设置开机启动"><a href="#重启neutron服务并设置开机启动" class="headerlink" title="重启neutron服务并设置开机启动"></a>重启neutron服务并设置开机启动</h2><pre><code>systemctl enable neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service
systemctl restart neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service
systemctl status neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service
</code></pre><h2 id="启动neutron-l3-agent-service并设置开机启动"><a href="#启动neutron-l3-agent-service并设置开机启动" class="headerlink" title="启动neutron-l3-agent.service并设置开机启动"></a>启动neutron-l3-agent.service并设置开机启动</h2><pre><code>systemctl enable neutron-l3-agent.service
systemctl restart neutron-l3-agent.service
systemctl status neutron-l3-agent.service
</code></pre><h2 id="执行验证"><a href="#执行验证" class="headerlink" title="执行验证"></a>执行验证</h2><pre><code>source /root/admin-openrc
neutron ext-list
neutron agent-list
</code></pre><h2 id="创建vxLan模式网络，让虚拟机能外出"><a href="#创建vxLan模式网络，让虚拟机能外出" class="headerlink" title="创建vxLan模式网络，让虚拟机能外出"></a>创建vxLan模式网络，让虚拟机能外出</h2><p>a）首先先执行环境变量</p>
<pre><code>source /root/admin-openrc
</code></pre><p>b）创建flat模式的public网络，注意这个public是外出网络，必须是flat模式的</p>
<pre><code>neutron --debug net-create --shared provider --router:external True --provider:network_type flat --provider:physical_network provider
</code></pre><p>执行完这步，在界面里进行操作，把public网络设置为共享和外部网络。</p>
<p>c）创建public网络子网，名为public-sub，网段就是192.168.0.1，并且IP范围是50-90（这个一般是给VM用的floating IP了），dns设置为192.168.0.1，网关为192.168.0.1</p>
<pre><code>neutron subnet-create provider 192.168.0.1/24 --name provider-sub --allocation-pool start=192.168.0.50,end=192.168.0.90 --dns-nameserver 192.168.0.1 --gateway 192.168.0.1
</code></pre><p>d）创建名为private的私有网络, 网络模式为vxlan</p>
<pre><code>neutron net-create private --provider:network_type vxlan --router:external False --shared
</code></pre><p>e）创建名为private-subnet的私有网络子网，网段为192.168.1.0, 这个网段就是虚拟机获取的私有的IP地址</p>
<pre><code>neutron subnet-create private --name private-subnet --gateway 192.168.1.1 192.168.1.0/24
</code></pre><p>假如你们公司的私有云环境是用于不同的业务，比如行政、销售、技术等，那么你可以创建3个不同名称的私有网络</p>
<pre><code>neutron net-create private-office --provider:network_type vxlan --router:external False --shared
neutron subnet-create private-office --name office-net --gateway 192.168.2.1 192.168.2.0/24

neutron net-create private-sale --provider:network_type vxlan --router:external False --shared
neutron subnet-create private-sale --name sale-net --gateway 192.168.3.1 192.168.3.0/24

neutron net-create private-technology --provider:network_type vxlan --router:external False --shared
neutron subnet-create private-technology --name technology-net --gateway 192.168.4.1 192.168.4.0/24
</code></pre><p>f）创建路由，我们在界面上操作</p>
<p>点击项目–&gt;网络–&gt;路由–&gt;新建路由</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-15.png" alt="o-15"></p>
<p>路由名称随便命名，我这里写”router”, 管理员状态，选择”上”(up)，外部网络选择”provider”</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-16.png" alt="o-16"></p>
<p>点击”新建路由”后，提示创建router创建成功</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-17.png" alt="o-17"></p>
<p>接着点击”接口”–&gt;”增加接口”</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-18.png" alt="o-18"></p>
<p>添加一个连接私网的接口，选中”private-office: 192.168.2.0/24”</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-19.png" alt="o-19"></p>
<p>点击”增加接口”成功后，我们可以看到两个接口先是down的状态，过一会儿刷新下就是running状态（注意，一定得是运行running状态，不然到时候虚拟机网络会出不去）</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-20.png" alt="o-20"></p>
<h2 id="检查网络服务"><a href="#检查网络服务" class="headerlink" title="检查网络服务"></a>检查网络服务</h2><pre><code>neutron agent-list
</code></pre><p>看服务是否是笑脸</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-21.png" alt="o-21"></p>
<h1 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h1><h2 id="安装dashboard相关软件包"><a href="#安装dashboard相关软件包" class="headerlink" title="安装dashboard相关软件包"></a>安装dashboard相关软件包</h2><pre><code>yum install openstack-dashboard -y
</code></pre><h2 id="修改配置文件-etc-openstack-dashboard-local-settings"><a href="#修改配置文件-etc-openstack-dashboard-local-settings" class="headerlink" title="修改配置文件/etc/openstack-dashboard/local_settings"></a>修改配置文件/etc/openstack-dashboard/local_settings</h2><pre><code>vim /etc/openstack-dashboard/local_settings
</code></pre><p>直接覆盖我给的local_settings文件也行（为了减少出错，用我提供的local_settings文件替换覆盖）</p>
<p><a href="https://pan.baidu.com/s/1hxN35B5LITfetZDin-6Y5Q" target="_blank" rel="external">百度云盘链接</a>    密码：e4p9</p>
<h2 id="启动dashboard服务并设置开机启动"><a href="#启动dashboard服务并设置开机启动" class="headerlink" title="启动dashboard服务并设置开机启动"></a>启动dashboard服务并设置开机启动</h2><pre><code>systemctl restart httpd.service memcached.service
systemctl status httpd.service memcached.service
</code></pre><p>到此，Controller节点搭建完毕，打开firefox浏览器即可访问 <a href="http://192.168.0.120/dashboard/" target="_blank" rel="external">http://192.168.0.120/dashboard/</a> 可进入openstack界面！</p>
<p><img src="http://oxysobnip.bkt.clouddn.com/o-22.png" alt="o-22"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Mariadb和RabbitMQ&quot;&gt;&lt;a href=&quot;#安装Mariadb和RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;安装Mariadb和RabbitMQ&quot;&gt;&lt;/a&gt;安装Mariadb和RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;搭
    
    </summary>
    
      <category term="OpenStack学习笔记" scheme="http://yjscloud.site/categories/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenStack O版搭建" scheme="http://yjscloud.site/tags/OpenStack-O%E7%89%88%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
