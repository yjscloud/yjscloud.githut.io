<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yjsloud notes</title>
  <subtitle>取次花丛懒回顾，半缘修道半缘君</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yjscloud.com/"/>
  <updated>2017-04-25T02:55:45.000Z</updated>
  <id>http://yjscloud.com/</id>
  
  <author>
    <name>Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在redhat 7上安装VNC服务器</title>
    <link href="http://yjscloud.com/2017/04/25/%E5%A6%82%E4%BD%95%E5%9C%A8redhat-7%E4%B8%8A%E5%AE%89%E8%A3%85VNC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yjscloud.com/2017/04/25/如何在redhat-7上安装VNC服务器/</id>
    <published>2017-04-25T00:05:55.000Z</published>
    <updated>2017-04-25T02:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时我们基本上都是用xshell或者用putty远程我们的linux服务器，如果我们的linux服务器安装了图型化界面那我们又该如何远程使用我们的图形化界面呢？下面我们用vnc来实现远程我们的linux服务器</p>
<a id="more"></a>
<h2 id="1、安装VNC-Server：yum-y-install-vnc-server"><a href="#1、安装VNC-Server：yum-y-install-vnc-server" class="headerlink" title="1、安装VNC Server：yum -y install vnc-server"></a>1、安装VNC Server：yum -y install vnc-server</h2><p><img src="http://oovxjr0mr.bkt.clouddn.com/vnc%E9%85%8D%E7%BD%AE%EF%BC%881%EF%BC%89.png" alt=""></p>
<h2 id="2、复制vnc-server的配置模板："><a href="#2、复制vnc-server的配置模板：" class="headerlink" title="2、复制vnc server的配置模板："></a>2、复制vnc server的配置模板：</h2><p>参考命令：cp  vncserver@.service   vncserver@:1.service</p>
<pre><code>[root@xwq ~]# cd /lib/systemd/system
[root@xwq system]# cp  vncserver@.service   vncserver@:1.service
</code></pre><p> 注：VNC 服务本身使用的是5900端口。鉴于有不同的用户使用 VNC ，每个人的连接都会获得不同的端口。配置文件名里面的数字告诉 VNC 服务器把服务运行在5900的子端口上。在我们这个例子里，第一个 VNC 服务会运行在5901（5900 + 1）端口上，之后的依次增加，运行在5900 + x 号端口上。其中 x 是指之后用户的配置文件名 vncserver@:x.service 里面的 x 。<br>如果要用更多的用户连接，需要创建配置文件和端口，添加一个新的用户和端口。你需要创建 vncserver@:2.service 并替换配置文件里的用户名和之后步骤里相应的文件名、端口号。请确保你登录 VNC 服务器用的是你之前配置 VNC 密码的时候使用的那个用户名。</p>
<h2 id="3、编辑配置模板："><a href="#3、编辑配置模板：" class="headerlink" title="3、编辑配置模板："></a>3、编辑配置模板：</h2><p>参考命令:vim vncserver@:1.service</p>
<p>把root用户加入登陆用户中，以及修改登陆后的vnc分辨率</p>
<p>修改前：</p>
<pre><code>[Unit]
Description=Remote desktop service (VNC)
After=syslog.target network.target

[Service]
Type=forking
# Clean any existing files in /tmp/.X11-unix environment
ExecStartPre=/bin/sh -c &apos;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&apos;
ExecStart=/usr/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;
PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid
ExecStop=/bin/sh -c &apos;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&apos;

[Install]
WantedBy=multi-user.target
</code></pre><p>修改后：</p>
<pre><code>[Unit]
Description=Remote desktop service (VNC)
After=syslog.target network.target

[Service]
Type=forking
# Clean any existing files in /tmp/.X11-unix environment
ExecStartPre=/bin/sh -c &apos;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&apos;
ExecStart=/usr/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i -geometry 1376x730&quot;
PIDFile=/home/root/.vnc/%H%i.pid
ExecStop=/bin/sh -c &apos;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&apos;

[Install]
WantedBy=multi-user.target
</code></pre><h2 id="4、配置VNC远程用户"><a href="#4、配置VNC远程用户" class="headerlink" title="4、配置VNC远程用户"></a>4、配置VNC远程用户</h2><p>（1）重新载入 systemd，扫描新的或有变动的单元：systemctl daemon-reload</p>
<pre><code>[root@xwq system]# systemctl daemon-reload
</code></pre><p>（2）为登陆的root用户添加一个密码</p>
<pre><code>[root@xwq system]# vncpasswd root

Password:输入你的密码

Verify:再次输入你的密码
</code></pre><p>（3）启动vnc桌面</p>
<pre><code>[root@xwq system]# vncserver :1

You will require a password to access your desktops.

Password:输入你的密码

Verify:再次输入你的密码

xauth:  file /root/.Xauthority does not exist

xauth: (stdin):1:  bad display name &quot;xwq:1&quot; in &quot;add&quot; command

New &apos;xwq:1 (root)&apos; desktop is xwq:1

Creating default startup script /root/.vnc/xstartup

Starting applications specified in /root/.vnc/xstartup

Log file is /root/.vnc/xwq:1.log
</code></pre><p>（4）用下面的命令（永久的）开启服务</p>
<pre><code>[root@xwq system]# systemctl enable vncserver@:1.service
</code></pre><p>如果输入systemctl enable vncserver@:1.service命令输出了如下代码，</p>
<pre><code>[root@xwq system]# systemctl enable vncserver@:1.service

ln -s &apos;/usr/lib/systemd/system/vncserver@:1.service&apos; &apos;/etc/systemd/system/multi-user.target.wants/vncserver@:1.service&apos;
</code></pre><p>  请在终端输入这行命令：echo “127.0.0.1 xwq”&gt; /etc/hosts</p>
<p>  （5）输入以下命令配置防火墙规则：</p>
<pre><code>[root@xwq ~]# firewall-cmd --permanent --zone=public --add-port=5901/tcp

success

[root@xwq ~]# firewall-cmd --reload

success
</code></pre><h2 id="5、访问redhat"><a href="#5、访问redhat" class="headerlink" title="5、访问redhat"></a>5、访问redhat</h2><p>使用windows端安装vnc viewer访问redhat，可以成功访问。<br><img src="http://oovxjr0mr.bkt.clouddn.com/VNC%E9%85%8D%E7%BD%AE%EF%BC%882%EF%BC%89.png" alt=""></p>
<h2 id="6：其他命令"><a href="#6：其他命令" class="headerlink" title="6：其他命令"></a>6：其他命令</h2><p>关闭vnc服务：systemctl stop vncserver@:1.service</p>
<p>禁止 VNC 服务开机启动：systemctl disable vncserver@:1.service</p>
<p>关闭防火墙：systemctl stop firewalld.service</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时我们基本上都是用xshell或者用putty远程我们的linux服务器，如果我们的linux服务器安装了图型化界面那我们又该如何远程使用我们的图形化界面呢？下面我们用vnc来实现远程我们的linux服务器&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yjscloud.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux学习笔记" scheme="http://yjscloud.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记（1）</title>
    <link href="http://yjscloud.com/2017/04/25/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yjscloud.com/2017/04/25/Git学习笔记/</id>
    <published>2017-04-24T23:15:57.000Z</published>
    <updated>2017-04-25T02:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git是什么？</p>
<p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>Git有什么特点？简单来说就是：高端大气上档次！</p>
<p>Git是所有程序最爱的分布式控制系统！</p>
<p>Git有是世界上最活跃的开源社区！</p>
<p>Git上有这无数的开源项目！</p>
<a id="more"></a>
<h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git:"></a>1、安装Git:</h2><p>在linux下安装：yum install git</p>
<p>其他系统安装在这里略去~~~</p>
<p>安装完成后，需要设置一下，在命令行输入以下命令：</p>
<pre><code>[root@xwq ~]# git config --global user.name &quot;your name&quot;

[root@xwq ~]# git config --global user.email &quot;your email&quot;
</code></pre><p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h2 id="2、创建版本库"><a href="#2、创建版本库" class="headerlink" title="2、创建版本库"></a>2、创建版本库</h2><p>创建版本库很简单，找到一个合适的地方，创建一个空目录：</p>
<pre><code>[root@xwq ~]# mkdir testgit

[root@xwq ~]# cd testgit/

[root@xwq testgit]# pwd

/root/testgit
</code></pre><p>如果你是在window下运行git，请确保文件路径没有中文！</p>
<p>通过git init命令把这个目录变成Git可以管理的仓库：</p>
<pre><code>[root@xwq testgit]# git init

Initialized empty Git repository in /root/testgit/.git/
</code></pre><p>接着我们在仓库目录下创建一个txt文件：test_01.txt</p>
<pre><code>[root@xwq testgit]# vim test_01.txt
</code></pre><p>在里面输入以下内容：</p>
<p>Git is a version control system.</p>
<p>Git is free software.</p>
<p>用命令git add告诉Git，把文件添加到仓库：<br>[root@xwq testgit]# git add test_01.txt<br>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>用命令git commit告诉Git，把文件提交到仓库：</p>
<pre><code>[root@xwq testgit]# git commit -m &quot;wrote a readme file&quot;

[master (root-commit) 7347c20] wrote a readme file

1 file changed, 2 insertions(+)

create mode 100644 test_01.txt
</code></pre><p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。<br>嫌麻烦不想输入-m “xxx”行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。<br>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的test_01.txt文件），插入了两行内容（test_01.txt有两行内容）</p>
<h2 id="3、撤销命令"><a href="#3、撤销命令" class="headerlink" title="3、撤销命令"></a>3、撤销命令</h2><p>我们将test_01.txt文件的内容改为如下内容：</p>
<p>Git is a distributed version control system.</p>
<p>Git is free software.</p>
<p>运行git status命令查看结果：</p>
<pre><code>[root@xwq testgit]# git status

#On branch master

#Changes not staged for commit:

#(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)

#(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)



  modified:   test_01.txt



#no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，text_01.txt被修改过了，但还没有准备提交的修改。<br>虽然Git告诉我们test_01.txt被修改了，如果想查看被修改了什么内容可以用git diff命令查看：</p>
<pre><code>[root@xwq testgit]# git diff test_01.txt

diff --git a/test_01.txt b/test_01.txt

index 46d49bf..9247db6 100644

--- a/test_01.txt

+++ b/test_01.txt

@@ -1,2 +1,2 @@

-Git is a version control system.

+Git is a distributed version control system.

Git is free software.
</code></pre><p>我们知道被修改的内容后就可以放心的文件提交到仓库了，接下来我们用git add :</p>
<pre><code>[root@xwq testgit]# git add test_01.txt
</code></pre><p> 同样没有返回任何信息就是好结果</p>
<p>我们在用git status查看当前仓库的状态：</p>
<p>[root@xwq testgit]# git status</p>
<pre><code># On branch master

# Changes to be committed:

#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

#

#    modified:   test_01.txt

#
</code></pre><p>git status 告诉我们将要被提交的修改包括test_01.txt，下一步，就可以放心地提交了：</p>
<pre><code>[root@xwq testgit]# git commit -m &quot;add distributed&quot;

[master 6c90823] add distributed

1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre><h2 id="4、版本回退"><a href="#4、版本回退" class="headerlink" title="4、版本回退"></a>4、版本回退</h2><p>我们再次对test_01.txt文件进行修改，修改内容如下：</p>
<p>Git is a distributed version control system.</p>
<p>Git is free software distributed under the GPL.</p>
<p>然后提交：</p>
<pre><code>[root@xwq testgit]# git add test_01.txt

[root@xwq testgit]# git commit -m &quot;append GPL&quot;

[master ee985a6] append GPL

1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre><p>Git每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。<br>现在，我们回顾一下test_01.txt文件一共有几个版本被提交到Git仓库里了：<br>版本1：wrote a readme file</p>
<p>Git is a version control system.</p>
<p>Git is free software.</p>
<p>版本2：add distributed</p>
<p>Git is a distributed version control system.</p>
<p>Git is free software.</p>
<p>版本3：append GPL</p>
<p>Git is a distributed version control system.</p>
<p>Git is free software distributed under the GPL.</p>
<p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：</p>
<pre><code>[root@xwq testgit]# git log

commit ee985a69fecf94482280769949290b240b7a0329

Author: wenqiuan &lt;1303460512@qq.com&gt;

Date:   Thu Apr 13 11:45:14 2017 -0400

  append GPL

commit 6c9082366df03ee9a47f2bcd18be0105fa1fae86

Author: wenqiuan &lt;1303460512@qq.com&gt;

Date:   Thu Apr 13 11:33:34 2017 -0400

   add distributed

commit 7347c2023929935a58f147168a50ce9bf51a2478

Author: wenqiuan &lt;1303460512@qq.com&gt;

Date:   Thu Apr 13 09:48:56 2017 -0400

   wrote a readme file
</code></pre><p>git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。</p>
<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：</p>
<pre><code>[root@xwq testgit]# git log --pretty=oneline

ee985a69fecf94482280769949290b240b7a0329 append GPL

6c9082366df03ee9a47f2bcd18be0105fa1fae86 add distributed

7347c2023929935a58f147168a50ce9bf51a2478 wrote a readme file
</code></pre><p>注：类似这些数据ee985a69fecf94482280769949290b240b7a0329的是commit id（版本号）<br>那么问题来了我们要如何回退版本呢？其实很简单，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交ee985a69fecf94482280769949290b240b7a0329，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>
<p>现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：</p>
<pre><code>[root@xwq testgit]# git reset --hard HEAD^

HEAD is now at 6c90823 add distributed
</code></pre><p>现在我们查看一下test_01.txt的内容是不是add distributed:</p>
<pre><code>[root@xwq testgit]# cat test_01.txt

Git is a distributed version control system.

Git is free software.

[root@xwq testgit]# git log

commit 6c9082366df03ee9a47f2bcd18be0105fa1fae86

Author: wenqiuan &lt;1303460512@qq.com&gt;

Date:   Thu Apr 13 11:33:34 2017 -0400

 add distributed

commit 7347c2023929935a58f147168a50ce9bf51a2478

Author: wenqiuan &lt;1303460512@qq.com&gt;

Date:   Thu Apr 13 09:48:56 2017 -0400

 wrote a readme file
</code></pre><p> 很显然我们已经回退到上一个版本了</p>
<p>现在我又想回到最新版本的append GPL了怎么办？这个我们可以用git reflog命令就可以轻松的办到，命令git reflog用来记录你的每一次命令：</p>
<pre><code>[root@xwq testgit]# git reflog

6c90823 HEAD@{0}: reset: moving to HEAD^

ee985a6 HEAD@{1}: commit: append GPL

6c90823 HEAD@{2}: commit: add distributed

7347c20 HEAD@{3}: commit (initial): wrote a readme file
</code></pre><p>接下来我们只用输入命令 git reset –hard ee985a6(append GPL的id)就可以回到最新的版本了</p>
<pre><code>[root@xwq testgit]# git reset --hard ee985a6

HEAD is now at ee985a6 append GPL

[root@xwq testgit]# cat test_01.txt

Git is a distributed version control system.

Git is free software distributed under the GPL.
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是什么？&lt;/p&gt;
&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统（没有之一）。&lt;/p&gt;
&lt;p&gt;Git有什么特点？简单来说就是：高端大气上档次！&lt;/p&gt;
&lt;p&gt;Git是所有程序最爱的分布式控制系统！&lt;/p&gt;
&lt;p&gt;Git有是世界上最活跃的开源社区！&lt;/p&gt;
&lt;p&gt;Git上有这无数的开源项目！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yjscloud.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git学习" scheme="http://yjscloud.com/tags/Git%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
